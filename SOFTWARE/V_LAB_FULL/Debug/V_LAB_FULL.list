
V_LAB_FULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800a160  0800a160  0001a160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a644  0800a644  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a64c  0800a64c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a64c  0800a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800a654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          00000300  20000224  20000224  00020224  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  00020224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c507  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff8  00000000  00000000  0002c75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000968  00000000  00000000  0002f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bf0  00000000  00000000  0002fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc77  00000000  00000000  000526c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d19c7  00000000  00000000  0005f33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130d06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dc4  00000000  00000000  00130d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a148 	.word	0x0800a148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800a148 	.word	0x0800a148

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
void LCD1602_EnablePulse(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <LCD1602_EnablePulse+0x38>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <LCD1602_EnablePulse+0x3c>)
 8001002:	8811      	ldrh	r1, [r2, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f002 ff66 	bl	8003ed8 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 800100c:	230a      	movs	r3, #10
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f97a 	bl	8001308 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LCD1602_EnablePulse+0x38>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <LCD1602_EnablePulse+0x3c>)
 800101a:	8811      	ldrh	r1, [r2, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f002 ff5a 	bl	8003ed8 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8001024:	203c      	movs	r0, #60	; 0x3c
 8001026:	f000 f96f 	bl	8001308 <LCD1602_TIM_MicorSecDelay>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000240 	.word	0x20000240
 8001034:	20000246 	.word	0x20000246

08001038 <LCD1602_RS>:
//2) RS control
void LCD1602_RS(bool state)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <LCD1602_RS+0x22>
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <LCD1602_RS+0x3c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LCD1602_RS+0x40>)
 800104e:	8811      	ldrh	r1, [r2, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f002 ff40 	bl	8003ed8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8001058:	e007      	b.n	800106a <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LCD1602_RS+0x3c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <LCD1602_RS+0x40>)
 8001060:	8811      	ldrh	r1, [r2, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f002 ff37 	bl	8003ed8 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000240 	.word	0x20000240
 8001078:	20000244 	.word	0x20000244

0800107c <LCD1602_write>:

//3) Write Parallel interface
void LCD1602_write(uint8_t byte)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8001094:	4b61      	ldr	r3, [pc, #388]	; (800121c <LCD1602_write+0x1a0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d15a      	bne.n	8001152 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800109c:	4b60      	ldr	r3, [pc, #384]	; (8001220 <LCD1602_write+0x1a4>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <LCD1602_write+0x1a8>)
 80010a2:	8819      	ldrh	r1, [r3, #0]
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f002 ff13 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80010b2:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <LCD1602_write+0x1a4>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <LCD1602_write+0x1ac>)
 80010b8:	8819      	ldrh	r1, [r3, #0]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	f002 ff08 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80010c8:	4b55      	ldr	r3, [pc, #340]	; (8001220 <LCD1602_write+0x1a4>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	4b57      	ldr	r3, [pc, #348]	; (800122c <LCD1602_write+0x1b0>)
 80010ce:	8819      	ldrh	r1, [r3, #0]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f002 fefd 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80010de:	4b50      	ldr	r3, [pc, #320]	; (8001220 <LCD1602_write+0x1a4>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <LCD1602_write+0x1b4>)
 80010e4:	8819      	ldrh	r1, [r3, #0]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f002 fef2 	bl	8003ed8 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80010f4:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <LCD1602_write+0x1b8>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <LCD1602_write+0x1bc>)
 80010fa:	8819      	ldrh	r1, [r3, #0]
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	f002 fee7 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <LCD1602_write+0x1b8>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	4b4b      	ldr	r3, [pc, #300]	; (800123c <LCD1602_write+0x1c0>)
 8001110:	8819      	ldrh	r1, [r3, #0]
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	f002 fedc 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <LCD1602_write+0x1b8>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <LCD1602_write+0x1c4>)
 8001126:	8819      	ldrh	r1, [r3, #0]
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f002 fed1 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <LCD1602_write+0x1b8>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	4b42      	ldr	r3, [pc, #264]	; (8001244 <LCD1602_write+0x1c8>)
 800113c:	8819      	ldrh	r1, [r3, #0]
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	f002 fec6 	bl	8003ed8 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 800114c:	f7ff ff54 	bl	8000ff8 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8001150:	e05f      	b.n	8001212 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <LCD1602_write+0x1a0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d15b      	bne.n	8001212 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <LCD1602_write+0x1b8>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <LCD1602_write+0x1bc>)
 8001160:	8819      	ldrh	r1, [r3, #0]
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	f002 feb4 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <LCD1602_write+0x1b8>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <LCD1602_write+0x1c0>)
 8001176:	8819      	ldrh	r1, [r3, #0]
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	f002 fea9 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <LCD1602_write+0x1b8>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <LCD1602_write+0x1c4>)
 800118c:	8819      	ldrh	r1, [r3, #0]
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	f002 fe9e 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <LCD1602_write+0x1b8>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <LCD1602_write+0x1c8>)
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	f002 fe93 	bl	8003ed8 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80011b2:	f7ff ff21 	bl	8000ff8 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <LCD1602_write+0x1b8>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <LCD1602_write+0x1bc>)
 80011bc:	8819      	ldrh	r1, [r3, #0]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	f002 fe86 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <LCD1602_write+0x1b8>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <LCD1602_write+0x1c0>)
 80011d2:	8819      	ldrh	r1, [r3, #0]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	f002 fe7b 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <LCD1602_write+0x1b8>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <LCD1602_write+0x1c4>)
 80011e8:	8819      	ldrh	r1, [r3, #0]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f002 fe70 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <LCD1602_write+0x1b8>)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <LCD1602_write+0x1c8>)
 80011fe:	8819      	ldrh	r1, [r3, #0]
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	f002 fe65 	bl	8003ed8 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800120e:	f7ff fef3 	bl	8000ff8 <LCD1602_EnablePulse>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000000 	.word	0x20000000
 8001220:	20000248 	.word	0x20000248
 8001224:	2000024c 	.word	0x2000024c
 8001228:	2000024e 	.word	0x2000024e
 800122c:	20000250 	.word	0x20000250
 8001230:	20000252 	.word	0x20000252
 8001234:	20000254 	.word	0x20000254
 8001238:	20000258 	.word	0x20000258
 800123c:	2000025a 	.word	0x2000025a
 8001240:	2000025c 	.word	0x2000025c
 8001244:	2000025e 	.word	0x2000025e

08001248 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
void LCD1602_TIM_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 800124e:	1d3a      	adds	r2, r7, #4
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f003 faf0 	bl	800483c <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8001262:	f003 fac3 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8001266:	61f8      	str	r0, [r7, #28]
 8001268:	e004      	b.n	8001274 <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 800126a:	f003 fabf 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 800126e:	4603      	mov	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8001274:	69f8      	ldr	r0, [r7, #28]
 8001276:	f7ff f945 	bl	8000504 <__aeabi_ui2d>
 800127a:	a321      	add	r3, pc, #132	; (adr r3, 8001300 <LCD1602_TIM_Config+0xb8>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc8c 	bl	8000ba8 <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <LCD1602_TIM_Config+0xb0>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <LCD1602_TIM_Config+0xb0>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012a6:	f023 0310 	bic.w	r3, r3, #16
 80012aa:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012da:	2209      	movs	r2, #9
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6113      	str	r3, [r2, #16]
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40000400 	.word	0x40000400
 8001300:	a0b5ed8d 	.word	0xa0b5ed8d
 8001304:	3eb0c6f7 	.word	0x3eb0c6f7

08001308 <LCD1602_TIM_MicorSecDelay>:
void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3b01      	subs	r3, #1
 8001316:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8001330:	bf00      	nop
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d1f9      	bne.n	8001332 <LCD1602_TIM_MicorSecDelay+0x2a>
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40000400 	.word	0x40000400

08001350 <LCD1602_writeCommand>:
//5) Write command
void LCD1602_writeCommand(uint8_t command)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fe6c 	bl	8001038 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe8a 	bl	800107c <LCD1602_write>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <LCD1602_writeData>:
//6) Write 8 bits data
void LCD1602_writeData(uint8_t data)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fe5c 	bl	8001038 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe7a 	bl	800107c <LCD1602_write>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LCD1602_write4bitCommand>:
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
void LCD1602_write4bitCommand(uint8_t nibble)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fe48 	bl	8001038 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <LCD1602_write4bitCommand+0x7c>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <LCD1602_write4bitCommand+0x80>)
 80013ae:	8819      	ldrh	r1, [r3, #0]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	f002 fd8d 	bl	8003ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <LCD1602_write4bitCommand+0x7c>)
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <LCD1602_write4bitCommand+0x84>)
 80013c4:	8819      	ldrh	r1, [r3, #0]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	f002 fd82 	bl	8003ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <LCD1602_write4bitCommand+0x7c>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <LCD1602_write4bitCommand+0x88>)
 80013da:	8819      	ldrh	r1, [r3, #0]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f002 fd77 	bl	8003ed8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <LCD1602_write4bitCommand+0x7c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <LCD1602_write4bitCommand+0x8c>)
 80013f0:	8819      	ldrh	r1, [r3, #0]
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	f002 fd6c 	bl	8003ed8 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8001400:	f7ff fdfa 	bl	8000ff8 <LCD1602_EnablePulse>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000254 	.word	0x20000254
 8001410:	20000258 	.word	0x20000258
 8001414:	2000025a 	.word	0x2000025a
 8001418:	2000025c 	.word	0x2000025c
 800141c:	2000025e 	.word	0x2000025e

08001420 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	817b      	strh	r3, [r7, #10]
 800142e:	4613      	mov	r3, r2
 8001430:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8001432:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <LCD1602_Begin4BIT+0xb0>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <LCD1602_Begin4BIT+0xb4>)
 800143a:	897b      	ldrh	r3, [r7, #10]
 800143c:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 800143e:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <LCD1602_Begin4BIT+0xb8>)
 8001440:	893b      	ldrh	r3, [r7, #8]
 8001442:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <LCD1602_Begin4BIT+0xbc>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 800144a:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <LCD1602_Begin4BIT+0xc0>)
 800144c:	8b3b      	ldrh	r3, [r7, #24]
 800144e:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8001450:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <LCD1602_Begin4BIT+0xc4>)
 8001452:	8bbb      	ldrh	r3, [r7, #28]
 8001454:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <LCD1602_Begin4BIT+0xc8>)
 8001458:	8c3b      	ldrh	r3, [r7, #32]
 800145a:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <LCD1602_Begin4BIT+0xcc>)
 800145e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001460:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8001462:	f7ff fef1 	bl	8001248 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <LCD1602_Begin4BIT+0xd0>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <LCD1602_Begin4BIT+0xd4>)
 800146e:	2228      	movs	r2, #40	; 0x28
 8001470:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001472:	2014      	movs	r0, #20
 8001474:	f001 f926 	bl	80026c4 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8001478:	2003      	movs	r0, #3
 800147a:	f7ff ff89 	bl	8001390 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 800147e:	2005      	movs	r0, #5
 8001480:	f001 f920 	bl	80026c4 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001484:	2003      	movs	r0, #3
 8001486:	f7ff ff83 	bl	8001390 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f001 f91a 	bl	80026c4 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001490:	2003      	movs	r0, #3
 8001492:	f7ff ff7d 	bl	8001390 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f001 f914 	bl	80026c4 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff ff77 	bl	8001390 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f001 f90e 	bl	80026c4 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80014a8:	200f      	movs	r0, #15
 80014aa:	f7ff ff51 	bl	8001350 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff ff4e 	bl	8001350 <LCD1602_writeCommand>
	HAL_Delay(3);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f001 f905 	bl	80026c4 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80014ba:	2028      	movs	r0, #40	; 0x28
 80014bc:	f7ff ff48 	bl	8001350 <LCD1602_writeCommand>
	HAL_Delay(3);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f001 f8ff 	bl	80026c4 <HAL_Delay>
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000240 	.word	0x20000240
 80014d4:	20000244 	.word	0x20000244
 80014d8:	20000246 	.word	0x20000246
 80014dc:	20000254 	.word	0x20000254
 80014e0:	20000258 	.word	0x20000258
 80014e4:	2000025a 	.word	0x2000025a
 80014e8:	2000025c 	.word	0x2000025c
 80014ec:	2000025e 	.word	0x2000025e
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000001 	.word	0x20000001

080014f8 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	//for(uint8_t i=0;  i<string[i]!=NULL; i++)
	for(uint8_t i=0; i<16; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e00f      	b.n	8001526 <LCD1602_print+0x2e>
	{
		if(string[i]=='\0'){break;}
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00d      	beq.n	800152e <LCD1602_print+0x36>
		LCD1602_writeData((uint8_t)string[i]);
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff28 	bl	8001370 <LCD1602_writeData>
	for(uint8_t i=0; i<16; i++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d9ec      	bls.n	8001506 <LCD1602_print+0xe>
	}
}
 800152c:	e000      	b.n	8001530 <LCD1602_print+0x38>
		if(string[i]=='\0'){break;}
 800152e:	bf00      	nop
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	3b01      	subs	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001560:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fef3 	bl	8001350 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}
 800156a:	e007      	b.n	800157c <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001572:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff feea 	bl	8001350 <LCD1602_writeCommand>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fee1 	bl	8001350 <LCD1602_writeCommand>
	HAL_Delay(3);
 800158e:	2003      	movs	r0, #3
 8001590:	f001 f898 	bl	80026c4 <HAL_Delay>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159e:	f001 f81f 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a2:	f000 f8db 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a6:	f000 f9df 	bl	8001968 <MX_GPIO_Init>
  MX_DMA_Init();
 80015aa:	f000 f9bd 	bl	8001928 <MX_DMA_Init>
  MX_ADC1_Init();
 80015ae:	f000 f93f 	bl	8001830 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015b2:	f000 f98f 	bl	80018d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, EN_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 80015b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ba:	9303      	str	r3, [sp, #12]
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4b54      	ldr	r3, [pc, #336]	; (8001720 <main+0x188>)
 80015d0:	2220      	movs	r2, #32
 80015d2:	2104      	movs	r1, #4
 80015d4:	4852      	ldr	r0, [pc, #328]	; (8001720 <main+0x188>)
 80015d6:	f7ff ff23 	bl	8001420 <LCD1602_Begin4BIT>
  LCD1602_setCursor(1,1);// 0x80RS
 80015da:	2101      	movs	r1, #1
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff ffab 	bl	8001538 <LCD1602_setCursor>
  LCD1602_print("VLAB_PROJECT");
 80015e2:	4850      	ldr	r0, [pc, #320]	; (8001724 <main+0x18c>)
 80015e4:	f7ff ff88 	bl	80014f8 <LCD1602_print>
  LCD1602_setCursor(2,1);// 0xC0
 80015e8:	2101      	movs	r1, #1
 80015ea:	2002      	movs	r0, #2
 80015ec:	f7ff ffa4 	bl	8001538 <LCD1602_setCursor>
  LCD1602_print("V_LAB_COM");
 80015f0:	484d      	ldr	r0, [pc, #308]	; (8001728 <main+0x190>)
 80015f2:	f7ff ff81 	bl	80014f8 <LCD1602_print>
  HAL_Delay(5000);
 80015f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80015fa:	f001 f863 	bl	80026c4 <HAL_Delay>
  LCD1602_clear();
 80015fe:	f7ff ffc1 	bl	8001584 <LCD1602_clear>

  HAL_UART_Receive_IT(&huart2, receive_data, 251);
 8001602:	22fb      	movs	r2, #251	; 0xfb
 8001604:	4949      	ldr	r1, [pc, #292]	; (800172c <main+0x194>)
 8001606:	484a      	ldr	r0, [pc, #296]	; (8001730 <main+0x198>)
 8001608:	f003 f9dc 	bl	80049c4 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, transmit_data1, 247);
 800160c:	22f7      	movs	r2, #247	; 0xf7
 800160e:	4949      	ldr	r1, [pc, #292]	; (8001734 <main+0x19c>)
 8001610:	4847      	ldr	r0, [pc, #284]	; (8001730 <main+0x198>)
 8001612:	f003 f992 	bl	800493a <HAL_UART_Transmit_IT>
  HAL_UART_Transmit_IT(&huart2, transmit_data2, 35);
 8001616:	2223      	movs	r2, #35	; 0x23
 8001618:	4947      	ldr	r1, [pc, #284]	; (8001738 <main+0x1a0>)
 800161a:	4845      	ldr	r0, [pc, #276]	; (8001730 <main+0x198>)
 800161c:	f003 f98d 	bl	800493a <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(state)
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <main+0x1a4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	2b03      	cmp	r3, #3
 8001628:	d8fa      	bhi.n	8001620 <main+0x88>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <main+0x98>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	08001675 	.word	0x08001675
 8001638:	0800167d 	.word	0x0800167d
 800163c:	08001711 	.word	0x08001711
	{
	case 1://when request configuration  data or hardware demand data or request live data frame is received from VM to VB
		if(RCD_flag==1)
 8001640:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <main+0x1a8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d103      	bne.n	8001650 <main+0xb8>
		{
			state=2;
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <main+0x1a4>)
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
		else if(RLD_flag==1)
		{
			analog_read();
			state=4;
		}
		break;
 800164e:	e063      	b.n	8001718 <main+0x180>
		else if(HDD_flag==1)
 8001650:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <main+0x1ac>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d103      	bne.n	8001660 <main+0xc8>
			state=3;
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <main+0x1a4>)
 800165a:	2203      	movs	r2, #3
 800165c:	701a      	strb	r2, [r3, #0]
		break;
 800165e:	e05b      	b.n	8001718 <main+0x180>
		else if(RLD_flag==1)
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <main+0x1b0>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d157      	bne.n	8001718 <main+0x180>
			analog_read();
 8001668:	f000 fd10 	bl	800208c <analog_read>
			state=4;
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <main+0x1a4>)
 800166e:	2204      	movs	r2, #4
 8001670:	701a      	strb	r2, [r3, #0]
		break;
 8001672:	e051      	b.n	8001718 <main+0x180>


	case 2:  // to transmit transmit data1
		flag_HCD=1;
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <main+0x1b4>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]

		break;
 800167a:	e050      	b.n	800171e <main+0x186>

	case 3: // setting the GPIO pin of buzzer
		if((HDD_PAYLOAD[0]=='C' && HDD_PAYLOAD[0]=='O' && HDD_PAYLOAD[0]=='M' && HDD_PAYLOAD[0]=='P' && HDD_PAYLOAD[0]=='0' && HDD_PAYLOAD[0]=='0' && HDD_PAYLOAD[0]=='1' && HDD_PAYLOAD[0]=='A') && (HDD_PAYLOAD[0]=='C' && HDD_PAYLOAD[0]=='O' && HDD_PAYLOAD[0]=='M' && HDD_PAYLOAD[0]=='P' && HDD_PAYLOAD[0]=='0' && HDD_PAYLOAD[0]=='0' && HDD_PAYLOAD[0]=='1' && HDD_PAYLOAD[0]=='B'))
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <main+0x1b8>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b43      	cmp	r3, #67	; 0x43
 8001682:	d14b      	bne.n	800171c <main+0x184>
 8001684:	4b32      	ldr	r3, [pc, #200]	; (8001750 <main+0x1b8>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b4f      	cmp	r3, #79	; 0x4f
 800168a:	d147      	bne.n	800171c <main+0x184>
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <main+0x1b8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b4d      	cmp	r3, #77	; 0x4d
 8001692:	d143      	bne.n	800171c <main+0x184>
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <main+0x1b8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b50      	cmp	r3, #80	; 0x50
 800169a:	d13f      	bne.n	800171c <main+0x184>
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <main+0x1b8>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b30      	cmp	r3, #48	; 0x30
 80016a2:	d13b      	bne.n	800171c <main+0x184>
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <main+0x1b8>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b30      	cmp	r3, #48	; 0x30
 80016aa:	d137      	bne.n	800171c <main+0x184>
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <main+0x1b8>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b31      	cmp	r3, #49	; 0x31
 80016b2:	d133      	bne.n	800171c <main+0x184>
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <main+0x1b8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b41      	cmp	r3, #65	; 0x41
 80016ba:	d12f      	bne.n	800171c <main+0x184>
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <main+0x1b8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b43      	cmp	r3, #67	; 0x43
 80016c2:	d12b      	bne.n	800171c <main+0x184>
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <main+0x1b8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b4f      	cmp	r3, #79	; 0x4f
 80016ca:	d127      	bne.n	800171c <main+0x184>
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <main+0x1b8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b4d      	cmp	r3, #77	; 0x4d
 80016d2:	d123      	bne.n	800171c <main+0x184>
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <main+0x1b8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b50      	cmp	r3, #80	; 0x50
 80016da:	d11f      	bne.n	800171c <main+0x184>
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <main+0x1b8>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b30      	cmp	r3, #48	; 0x30
 80016e2:	d11b      	bne.n	800171c <main+0x184>
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <main+0x1b8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b30      	cmp	r3, #48	; 0x30
 80016ea:	d117      	bne.n	800171c <main+0x184>
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <main+0x1b8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b31      	cmp	r3, #49	; 0x31
 80016f2:	d113      	bne.n	800171c <main+0x184>
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <main+0x1b8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b42      	cmp	r3, #66	; 0x42
 80016fa:	d10f      	bne.n	800171c <main+0x184>
		{
	    HAL_GPIO_WritePin(BUZZER_CON_GPIO_Port, BUZZER_CON_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <main+0x1bc>)
 8001704:	f002 fbe8 	bl	8003ed8 <HAL_GPIO_WritePin>
	    //HAL_GPIO_WritePin(LED_CON_GPIO_Port, LED_CON_Pin, GPIO_PIN_SET);
		HDD_flag=0;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <main+0x1ac>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800170e:	e005      	b.n	800171c <main+0x184>

	case 4://To transmit the requested live data
		flag_RDA=1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <main+0x1c0>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]

		break;
 8001716:	e002      	b.n	800171e <main+0x186>
		break;
 8001718:	bf00      	nop
 800171a:	e781      	b.n	8001620 <main+0x88>
		break;
 800171c:	bf00      	nop
	switch(state)
 800171e:	e77f      	b.n	8001620 <main+0x88>
 8001720:	40021000 	.word	0x40021000
 8001724:	0800a160 	.word	0x0800a160
 8001728:	0800a170 	.word	0x0800a170
 800172c:	2000034c 	.word	0x2000034c
 8001730:	20000308 	.word	0x20000308
 8001734:	20000004 	.word	0x20000004
 8001738:	20000020 	.word	0x20000020
 800173c:	20000043 	.word	0x20000043
 8001740:	200004f9 	.word	0x200004f9
 8001744:	200004fa 	.word	0x200004fa
 8001748:	200004fb 	.word	0x200004fb
 800174c:	200004fc 	.word	0x200004fc
 8001750:	200004cc 	.word	0x200004cc
 8001754:	40020000 	.word	0x40020000
 8001758:	200004fd 	.word	0x200004fd

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b094      	sub	sp, #80	; 0x50
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2230      	movs	r2, #48	; 0x30
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f004 f874 	bl	8005858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <SystemClock_Config+0xcc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <SystemClock_Config+0xcc>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <SystemClock_Config+0xcc>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <SystemClock_Config+0xd0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <SystemClock_Config+0xd0>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <SystemClock_Config+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017d8:	2307      	movs	r3, #7
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fb93 	bl	8003f0c <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ec:	f000 fcb2 	bl	8002154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2103      	movs	r1, #3
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fdf4 	bl	80043fc <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800181a:	f000 fc9b 	bl	8002154 <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3750      	adds	r7, #80	; 0x50
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <MX_ADC1_Init+0x9c>)
 8001846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_ADC1_Init+0x98>)
 800184a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800184e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_ADC1_Init+0x98>)
 800185e:	2201      	movs	r2, #1
 8001860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_ADC1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <MX_ADC1_Init+0xa0>)
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_ADC1_Init+0x98>)
 800187e:	2201      	movs	r2, #1
 8001880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_ADC1_Init+0x98>)
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MX_ADC1_Init+0x98>)
 8001892:	f000 ff3b 	bl	800270c <HAL_ADC_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800189c:	f000 fc5a 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018a0:	230f      	movs	r3, #15
 80018a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_ADC1_Init+0x98>)
 80018b2:	f001 f9b7 	bl	8002c24 <HAL_ADC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018bc:	f000 fc4a 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000260 	.word	0x20000260
 80018cc:	40012000 	.word	0x40012000
 80018d0:	0f000001 	.word	0x0f000001

080018d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART2_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 800190c:	f002 ffc8 	bl	80048a0 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f000 fc1d 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000308 	.word	0x20000308
 8001924:	40004400 	.word	0x40004400

08001928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_DMA_Init+0x3c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <MX_DMA_Init+0x3c>)
 8001938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_DMA_Init+0x3c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2038      	movs	r0, #56	; 0x38
 8001950:	f001 fced 	bl	800332e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001954:	2038      	movs	r0, #56	; 0x38
 8001956:	f001 fd06 	bl	8003366 <HAL_NVIC_EnableIRQ>

}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <MX_GPIO_Init+0xe4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <MX_GPIO_Init+0xe4>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <MX_GPIO_Init+0xe4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a2a      	ldr	r2, [pc, #168]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_GPIO_Init+0xe4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|EN_Pin|D4_Pin|D5_Pin
 80019ee:	2200      	movs	r2, #0
 80019f0:	f643 4124 	movw	r1, #15396	; 0x3c24
 80019f4:	4816      	ldr	r0, [pc, #88]	; (8001a50 <MX_GPIO_Init+0xe8>)
 80019f6:	f002 fa6f 	bl	8003ed8 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_CON_GPIO_Port, BUZZER_CON_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_GPIO_Init+0xec>)
 8001a02:	f002 fa69 	bl	8003ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin EN_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin|D4_Pin|D5_Pin
 8001a06:	f643 4324 	movw	r3, #15396	; 0x3c24
 8001a0a:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_GPIO_Init+0xe8>)
 8001a20:	f002 f8be 	bl	8003ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_CON_Pin */
  GPIO_InitStruct.Pin = BUZZER_CON_Pin;
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_CON_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_GPIO_Init+0xec>)
 8001a3e:	f002 f8af 	bl	8003ba0 <HAL_GPIO_Init>

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, receive_data,251);
 8001a60:	22fb      	movs	r2, #251	; 0xfb
 8001a62:	498f      	ldr	r1, [pc, #572]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001a64:	488f      	ldr	r0, [pc, #572]	; (8001ca4 <HAL_UART_RxCpltCallback+0x24c>)
 8001a66:	f002 ffad 	bl	80049c4 <HAL_UART_Receive_IT>

	l=strlen((char*)receive_data);
 8001a6a:	488d      	ldr	r0, [pc, #564]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001a6c:	f7fe fbb0 	bl	80001d0 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001a76:	701a      	strb	r2, [r3, #0]


	//If Request_Config_Data Frame is received
			if(receive_data[0]=='*' && receive_data[1]=='*' && receive_data[2]=='*' && receive_data[3]=='*' && receive_data[4]=='R' && receive_data[5]=='C' && receive_data[6]=='D'  && receive_data[l-4]=='#' && receive_data[l-3]=='#' && receive_data[l-2]=='#' && receive_data[l-1]=='#')
 8001a78:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a7e:	f040 80a1 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001a82:	4b87      	ldr	r3, [pc, #540]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	2b2a      	cmp	r3, #42	; 0x2a
 8001a88:	f040 809c 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001a8c:	4b84      	ldr	r3, [pc, #528]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	2b2a      	cmp	r3, #42	; 0x2a
 8001a92:	f040 8097 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9c:	f040 8092 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001aa0:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	2b52      	cmp	r3, #82	; 0x52
 8001aa6:	f040 808d 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	2b43      	cmp	r3, #67	; 0x43
 8001ab0:	f040 8088 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001ab4:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001ab6:	799b      	ldrb	r3, [r3, #6]
 8001ab8:	2b44      	cmp	r3, #68	; 0x44
 8001aba:	f040 8083 	bne.w	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	4a76      	ldr	r2, [pc, #472]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	2b23      	cmp	r3, #35	; 0x23
 8001aca:	d17b      	bne.n	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001acc:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	4a73      	ldr	r2, [pc, #460]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	2b23      	cmp	r3, #35	; 0x23
 8001ad8:	d174      	bne.n	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3b02      	subs	r3, #2
 8001ae0:	4a6f      	ldr	r2, [pc, #444]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	2b23      	cmp	r3, #35	; 0x23
 8001ae6:	d16d      	bne.n	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	4a6c      	ldr	r2, [pc, #432]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	2b23      	cmp	r3, #35	; 0x23
 8001af4:	d166      	bne.n	8001bc4 <HAL_UART_RxCpltCallback+0x16c>
							  {

								RCD_flag=1;
 8001af6:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <HAL_UART_RxCpltCallback+0x254>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]

								  //RCD_TOF
							  for(i=4,j=0;i<7;i++,j++)
 8001afc:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001afe:	2204      	movs	r2, #4
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e015      	b.n	8001b36 <HAL_UART_RxCpltCallback+0xde>
								  RCD_TOF[j]=receive_data[i];
 8001b0a:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001b18:	5c59      	ldrb	r1, [r3, r1]
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_UART_RxCpltCallback+0x260>)
 8001b1c:	5499      	strb	r1, [r3, r2]
							  for(i=4,j=0;i<7;i++,j++)
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b62      	ldr	r3, [pc, #392]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b60      	ldr	r3, [pc, #384]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d9e5      	bls.n	8001b0a <HAL_UART_RxCpltCallback+0xb2>

							  	  //RCD_VMUID
							  for(i=7,j=0;i<11;i++,j++)
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e015      	b.n	8001b78 <HAL_UART_RxCpltCallback+0x120>
								  RCD_VMUID[j]=receive_data[i];
 8001b4c:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001b5a:	5c59      	ldrb	r1, [r3, r1]
 8001b5c:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_UART_RxCpltCallback+0x264>)
 8001b5e:	5499      	strb	r1, [r3, r2]
							  for(i=7,j=0;i<11;i++,j++)
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d9e5      	bls.n	8001b4c <HAL_UART_RxCpltCallback+0xf4>

							  	  //Data
							  for(i=11,j=0;i<21;i++,j++)
 8001b80:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b82:	220b      	movs	r2, #11
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_UART_RxCpltCallback+0x162>
								  RCD_PAYLOAD[j]=receive_data[i];
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001b9c:	5c59      	ldrb	r1, [r3, r1]
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_UART_RxCpltCallback+0x268>)
 8001ba0:	5499      	strb	r1, [r3, r2]
							  for(i=11,j=0;i<21;i++,j++)
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b14      	cmp	r3, #20
 8001bc0:	d9e5      	bls.n	8001b8e <HAL_UART_RxCpltCallback+0x136>
			if(receive_data[0]=='*' && receive_data[1]=='*' && receive_data[2]=='*' && receive_data[3]=='*' && receive_data[4]=='R' && receive_data[5]=='C' && receive_data[6]=='D'  && receive_data[l-4]=='#' && receive_data[l-3]=='#' && receive_data[l-2]=='#' && receive_data[l-1]=='#')
 8001bc2:	e228      	b.n	8002016 <HAL_UART_RxCpltCallback+0x5be>
							  }

			//If demand_data is received
			else if(receive_data[0]=='*' && receive_data[1]=='*' && receive_data[2]=='*' && receive_data[3]=='*' && receive_data[4]=='H' && receive_data[5]=='D' && receive_data[6]=='D'  && receive_data[l-4]=='#' && receive_data[l-3]=='#' && receive_data[l-2]=='#' && receive_data[l-1]=='#')
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8001bca:	f040 8100 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001bd0:	785b      	ldrb	r3, [r3, #1]
 8001bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8001bd4:	f040 80fb 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8001bde:	f040 80f6 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001be4:	78db      	ldrb	r3, [r3, #3]
 8001be6:	2b2a      	cmp	r3, #42	; 0x2a
 8001be8:	f040 80f1 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001bec:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	2b48      	cmp	r3, #72	; 0x48
 8001bf2:	f040 80ec 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	2b44      	cmp	r3, #68	; 0x44
 8001bfc:	f040 80e7 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001c02:	799b      	ldrb	r3, [r3, #6]
 8001c04:	2b44      	cmp	r3, #68	; 0x44
 8001c06:	f040 80e2 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	2b23      	cmp	r3, #35	; 0x23
 8001c16:	f040 80da 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3b03      	subs	r3, #3
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	2b23      	cmp	r3, #35	; 0x23
 8001c26:	f040 80d2 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3b02      	subs	r3, #2
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	2b23      	cmp	r3, #35	; 0x23
 8001c36:	f040 80ca 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_UART_RxCpltCallback+0x250>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	2b23      	cmp	r3, #35	; 0x23
 8001c46:	f040 80c2 	bne.w	8001dce <HAL_UART_RxCpltCallback+0x376>
								  {

									HDD_flag=1;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_UART_RxCpltCallback+0x26c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
									  //HDD_TOF
								  for(i=4,j=0;i<7;i++,j++)
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001c52:	2204      	movs	r2, #4
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_UART_RxCpltCallback+0x232>
									  HDD_TOF[j]=receive_data[i];
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_UART_RxCpltCallback+0x248>)
 8001c6c:	5c59      	ldrb	r1, [r3, r1]
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_UART_RxCpltCallback+0x270>)
 8001c70:	5499      	strb	r1, [r3, r2]
								  for(i=4,j=0;i<7;i++,j++)
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d9e5      	bls.n	8001c5e <HAL_UART_RxCpltCallback+0x206>

								  	  //HDD_VMUID
								  for(i=7,j=0;i<11;i++,j++)
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_UART_RxCpltCallback+0x258>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_UART_RxCpltCallback+0x25c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	e02b      	b.n	8001cf8 <HAL_UART_RxCpltCallback+0x2a0>
 8001ca0:	2000034c 	.word	0x2000034c
 8001ca4:	20000308 	.word	0x20000308
 8001ca8:	20000500 	.word	0x20000500
 8001cac:	200004f9 	.word	0x200004f9
 8001cb0:	200004fe 	.word	0x200004fe
 8001cb4:	200004ff 	.word	0x200004ff
 8001cb8:	200004b0 	.word	0x200004b0
 8001cbc:	200004ac 	.word	0x200004ac
 8001cc0:	200004b4 	.word	0x200004b4
 8001cc4:	200004fa 	.word	0x200004fa
 8001cc8:	200004c8 	.word	0x200004c8
									  HDD_VMUID[j]=receive_data[i];
 8001ccc:	4b98      	ldr	r3, [pc, #608]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4b98      	ldr	r3, [pc, #608]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b97      	ldr	r3, [pc, #604]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001cda:	5c59      	ldrb	r1, [r3, r1]
 8001cdc:	4b97      	ldr	r3, [pc, #604]	; (8001f3c <HAL_UART_RxCpltCallback+0x4e4>)
 8001cde:	5499      	strb	r1, [r3, r2]
								  for(i=7,j=0;i<11;i++,j++)
 8001ce0:	4b93      	ldr	r3, [pc, #588]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	4b8d      	ldr	r3, [pc, #564]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d9e5      	bls.n	8001ccc <HAL_UART_RxCpltCallback+0x274>

								  //HDD_VBUID
								  for(i=11,j=0;i<15;i++,j++)
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d02:	220b      	movs	r2, #11
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_UART_RxCpltCallback+0x2e2>
									  HDD_VBUID[j]=receive_data[i];
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001d1c:	5c59      	ldrb	r1, [r3, r1]
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_UART_RxCpltCallback+0x4e8>)
 8001d20:	5499      	strb	r1, [r3, r2]
								  for(i=11,j=0;i<15;i++,j++)
 8001d22:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b0e      	cmp	r3, #14
 8001d40:	d9e5      	bls.n	8001d0e <HAL_UART_RxCpltCallback+0x2b6>

								  //HDD_CID
								  for(i=15,j=0;i<19;i++,j++)
 8001d42:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d44:	220f      	movs	r2, #15
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	4b7a      	ldr	r3, [pc, #488]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e015      	b.n	8001d7c <HAL_UART_RxCpltCallback+0x324>
									  HDD_VBUID[j]=receive_data[i];
 8001d50:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001d5e:	5c59      	ldrb	r1, [r3, r1]
 8001d60:	4b77      	ldr	r3, [pc, #476]	; (8001f40 <HAL_UART_RxCpltCallback+0x4e8>)
 8001d62:	5499      	strb	r1, [r3, r2]
								  for(i=15,j=0;i<19;i++,j++)
 8001d64:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b12      	cmp	r3, #18
 8001d82:	d9e5      	bls.n	8001d50 <HAL_UART_RxCpltCallback+0x2f8>

								  //HDD_Data ; Assuming only COMP001A(BUZZER) is received
								  for(i=19,j=0;receive_data[i]!='#';i++,j++)
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d86:	2213      	movs	r2, #19
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_UART_RxCpltCallback+0x366>
									  HDD_PAYLOAD[j]=receive_data[i];
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001da0:	5c59      	ldrb	r1, [r3, r1]
 8001da2:	4b68      	ldr	r3, [pc, #416]	; (8001f44 <HAL_UART_RxCpltCallback+0x4ec>)
 8001da4:	5499      	strb	r1, [r3, r2]
								  for(i=19,j=0;receive_data[i]!='#';i++,j++)
 8001da6:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001dc6:	5c9b      	ldrb	r3, [r3, r2]
 8001dc8:	2b23      	cmp	r3, #35	; 0x23
 8001dca:	d1e2      	bne.n	8001d92 <HAL_UART_RxCpltCallback+0x33a>
			else if(receive_data[0]=='*' && receive_data[1]=='*' && receive_data[2]=='*' && receive_data[3]=='*' && receive_data[4]=='H' && receive_data[5]=='D' && receive_data[6]=='D'  && receive_data[l-4]=='#' && receive_data[l-3]=='#' && receive_data[l-2]=='#' && receive_data[l-1]=='#')
 8001dcc:	e123      	b.n	8002016 <HAL_UART_RxCpltCallback+0x5be>

								  }

			//If Request_Live_data Frame is received
			else if(receive_data[0]=='*' && receive_data[1]=='*' && receive_data[2]=='*' && receive_data[3]=='*' && receive_data[4]=='R' && receive_data[5]=='L' && receive_data[6]=='D'  && receive_data[l-4]=='#' && receive_data[l-3]=='#' && receive_data[l-2]=='#' && receive_data[l-1]=='#')
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8001dd4:	f040 811f 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001dd8:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dde:	f040 811a 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001de2:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	2b2a      	cmp	r3, #42	; 0x2a
 8001de8:	f040 8115 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001dec:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001dee:	78db      	ldrb	r3, [r3, #3]
 8001df0:	2b2a      	cmp	r3, #42	; 0x2a
 8001df2:	f040 8110 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001df8:	791b      	ldrb	r3, [r3, #4]
 8001dfa:	2b52      	cmp	r3, #82	; 0x52
 8001dfc:	f040 810b 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e02:	795b      	ldrb	r3, [r3, #5]
 8001e04:	2b4c      	cmp	r3, #76	; 0x4c
 8001e06:	f040 8106 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e0c:	799b      	ldrb	r3, [r3, #6]
 8001e0e:	2b44      	cmp	r3, #68	; 0x44
 8001e10:	f040 8101 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_UART_RxCpltCallback+0x4f0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3b04      	subs	r3, #4
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	2b23      	cmp	r3, #35	; 0x23
 8001e20:	f040 80f9 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001e24:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <HAL_UART_RxCpltCallback+0x4f0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	2b23      	cmp	r3, #35	; 0x23
 8001e30:	f040 80f1 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001e34:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_UART_RxCpltCallback+0x4f0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b02      	subs	r3, #2
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	2b23      	cmp	r3, #35	; 0x23
 8001e40:	f040 80e9 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8001e44:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_UART_RxCpltCallback+0x4f0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	2b23      	cmp	r3, #35	; 0x23
 8001e50:	f040 80e1 	bne.w	8002016 <HAL_UART_RxCpltCallback+0x5be>
									  {

											RLD_flag=1;
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_UART_RxCpltCallback+0x4f4>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
										  //RLD_TOF
									  for(i=4,j=0;i<7;i++,j++)
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e015      	b.n	8001e94 <HAL_UART_RxCpltCallback+0x43c>
										  RLD_TOF[j]=receive_data[i];
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001e76:	5c59      	ldrb	r1, [r3, r1]
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_UART_RxCpltCallback+0x4f8>)
 8001e7a:	5499      	strb	r1, [r3, r2]
									  for(i=4,j=0;i<7;i++,j++)
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d9e5      	bls.n	8001e68 <HAL_UART_RxCpltCallback+0x410>

									  	  //RLD_VMUID
									  for(i=7,j=0;i<11;i++,j++)
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_UART_RxCpltCallback+0x47e>
										  RLD_VMUID[j]=receive_data[i];
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001eb8:	5c59      	ldrb	r1, [r3, r1]
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_UART_RxCpltCallback+0x4fc>)
 8001ebc:	5499      	strb	r1, [r3, r2]
									  for(i=7,j=0;i<11;i++,j++)
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b0a      	cmp	r3, #10
 8001edc:	d9e5      	bls.n	8001eaa <HAL_UART_RxCpltCallback+0x452>

									  //RLD_VBUID
									  for(i=11,j=0;i<15;i++,j++)
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001ee0:	220b      	movs	r2, #11
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e015      	b.n	8001f18 <HAL_UART_RxCpltCallback+0x4c0>
										  RLD_VBUID[j]=receive_data[i];
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_UART_RxCpltCallback+0x4e0>)
 8001efa:	5c59      	ldrb	r1, [r3, r1]
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_UART_RxCpltCallback+0x500>)
 8001efe:	5499      	strb	r1, [r3, r2]
									  for(i=11,j=0;i<15;i++,j++)
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b0e      	cmp	r3, #14
 8001f1e:	d9e5      	bls.n	8001eec <HAL_UART_RxCpltCallback+0x494>

									  //RLD_CID
									  for(i=15,j=0;i<19;i++,j++)
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_UART_RxCpltCallback+0x4d8>)
 8001f22:	220f      	movs	r2, #15
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e02c      	b.n	8001f88 <HAL_UART_RxCpltCallback+0x530>
 8001f2e:	bf00      	nop
 8001f30:	200004fe 	.word	0x200004fe
 8001f34:	200004ff 	.word	0x200004ff
 8001f38:	2000034c 	.word	0x2000034c
 8001f3c:	200004c0 	.word	0x200004c0
 8001f40:	200004c4 	.word	0x200004c4
 8001f44:	200004cc 	.word	0x200004cc
 8001f48:	20000500 	.word	0x20000500
 8001f4c:	200004fb 	.word	0x200004fb
 8001f50:	200004e0 	.word	0x200004e0
 8001f54:	200004d8 	.word	0x200004d8
 8001f58:	200004dc 	.word	0x200004dc
										  RLD_VBUID[j]=receive_data[i];
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_UART_RxCpltCallback+0x5d0>)
 8001f6a:	5c59      	ldrb	r1, [r3, r1]
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_UART_RxCpltCallback+0x5d4>)
 8001f6e:	5499      	strb	r1, [r3, r2]
									  for(i=15,j=0;i<19;i++,j++)
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d9e5      	bls.n	8001f5c <HAL_UART_RxCpltCallback+0x504>

									  	  //RLD_Data1
									  for(i=19,j=0;i<27;i++,j++)
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001f92:	2213      	movs	r2, #19
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_UART_RxCpltCallback+0x572>
										  RLD_PAYLOAD_INT[j]=receive_data[i];
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_UART_RxCpltCallback+0x5d0>)
 8001fac:	5c59      	ldrb	r1, [r3, r1]
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_UART_RxCpltCallback+0x5d8>)
 8001fb0:	5499      	strb	r1, [r3, r2]
									  for(i=19,j=0;i<27;i++,j++)
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b1a      	cmp	r3, #26
 8001fd0:	d9e5      	bls.n	8001f9e <HAL_UART_RxCpltCallback+0x546>

									  //RLD_Data2
									  for(i=27,j=0;i<40;i++,j++)
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001fd4:	221b      	movs	r2, #27
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e015      	b.n	800200c <HAL_UART_RxCpltCallback+0x5b4>
										  RLD_PAYLOAD_INFO[j]=receive_data[i];
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_UART_RxCpltCallback+0x5d0>)
 8001fee:	5c59      	ldrb	r1, [r3, r1]
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_UART_RxCpltCallback+0x5dc>)
 8001ff2:	5499      	strb	r1, [r3, r2]
									  for(i=27,j=0;i<40;i++,j++)
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_UART_RxCpltCallback+0x5cc>)
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_UART_RxCpltCallback+0x5c8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b27      	cmp	r3, #39	; 0x27
 8002012:	d9e5      	bls.n	8001fe0 <HAL_UART_RxCpltCallback+0x588>
									  }

}
 8002014:	e7ff      	b.n	8002016 <HAL_UART_RxCpltCallback+0x5be>
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200004fe 	.word	0x200004fe
 8002024:	200004ff 	.word	0x200004ff
 8002028:	2000034c 	.word	0x2000034c
 800202c:	200004dc 	.word	0x200004dc
 8002030:	200004e4 	.word	0x200004e4
 8002034:	200004ec 	.word	0x200004ec

08002038 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	if(flag_HCD==1)
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_UART_TxCpltCallback+0x40>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_UART_TxCpltCallback+0x20>
	{
	HAL_UART_Transmit_IT(&huart2, transmit_data1, 27);
 8002048:	221b      	movs	r2, #27
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <HAL_UART_TxCpltCallback+0x44>)
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <HAL_UART_TxCpltCallback+0x48>)
 800204e:	f002 fc74 	bl	800493a <HAL_UART_Transmit_IT>
	flag_HCD=0;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_UART_TxCpltCallback+0x40>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	}

	if(flag_RDA==1)
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_UART_TxCpltCallback+0x4c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_UART_TxCpltCallback+0x38>
	{
	HAL_UART_Transmit_IT(&huart2, transmit_data2, 35);
 8002060:	2223      	movs	r2, #35	; 0x23
 8002062:	4909      	ldr	r1, [pc, #36]	; (8002088 <HAL_UART_TxCpltCallback+0x50>)
 8002064:	4806      	ldr	r0, [pc, #24]	; (8002080 <HAL_UART_TxCpltCallback+0x48>)
 8002066:	f002 fc68 	bl	800493a <HAL_UART_Transmit_IT>
	flag_RDA=0;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_UART_TxCpltCallback+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
	}
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200004fc 	.word	0x200004fc
 800207c:	20000004 	.word	0x20000004
 8002080:	20000308 	.word	0x20000308
 8002084:	200004fd 	.word	0x200004fd
 8002088:	20000020 	.word	0x20000020

0800208c <analog_read>:

void analog_read()
		{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	// Read analog value from MIC
				HAL_ADC_Start_DMA(&hadc1, raw_value, 1);
 8002090:	2201      	movs	r2, #1
 8002092:	492b      	ldr	r1, [pc, #172]	; (8002140 <analog_read+0xb4>)
 8002094:	482b      	ldr	r0, [pc, #172]	; (8002144 <analog_read+0xb8>)
 8002096:	f000 fc8d 	bl	80029b4 <HAL_ADC_Start_DMA>



				transmit_data2[27]=raw_value[0]%10;
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <analog_read+0xb4>)
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <analog_read+0xbc>)
 80020a0:	fba3 2301 	umull	r2, r3, r3, r1
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	1aca      	subs	r2, r1, r3
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <analog_read+0xc0>)
 80020b4:	76da      	strb	r2, [r3, #27]
				live_data/=10;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <analog_read+0xc4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a23      	ldr	r2, [pc, #140]	; (8002148 <analog_read+0xbc>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	4a23      	ldr	r2, [pc, #140]	; (8002150 <analog_read+0xc4>)
 80020c4:	6013      	str	r3, [r2, #0]
				transmit_data2[28]=raw_value[0]%10;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <analog_read+0xb4>)
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <analog_read+0xbc>)
 80020cc:	fba3 2301 	umull	r2, r3, r3, r1
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	1aca      	subs	r2, r1, r3
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <analog_read+0xc0>)
 80020e0:	771a      	strb	r2, [r3, #28]
				live_data/=10;
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <analog_read+0xc4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a18      	ldr	r2, [pc, #96]	; (8002148 <analog_read+0xbc>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <analog_read+0xc4>)
 80020f0:	6013      	str	r3, [r2, #0]
				transmit_data2[29]=raw_value[0]%10;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <analog_read+0xb4>)
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <analog_read+0xbc>)
 80020f8:	fba3 2301 	umull	r2, r3, r3, r1
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	1aca      	subs	r2, r1, r3
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <analog_read+0xc0>)
 800210c:	775a      	strb	r2, [r3, #29]
				live_data/=10;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <analog_read+0xc4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <analog_read+0xbc>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <analog_read+0xc4>)
 800211c:	6013      	str	r3, [r2, #0]
				transmit_data2[30]=raw_value[0]%10;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <analog_read+0xb4>)
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <analog_read+0xbc>)
 8002124:	fba3 2301 	umull	r2, r3, r3, r1
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	1aca      	subs	r2, r1, r3
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <analog_read+0xc0>)
 8002138:	779a      	strb	r2, [r3, #30]

		}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000504 	.word	0x20000504
 8002144:	20000260 	.word	0x20000260
 8002148:	cccccccd 	.word	0xcccccccd
 800214c:	20000020 	.word	0x20000020
 8002150:	20000508 	.word	0x20000508

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800215c:	e7fe      	b.n	800215c <Error_Handler+0x8>
	...

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <HAL_MspInit+0x4c>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_MspInit+0x4c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_MspInit+0x4c>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_MspInit+0x4c>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800219e:	2007      	movs	r0, #7
 80021a0:	f001 f8ba 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <HAL_ADC_MspInit+0xe8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d15e      	bne.n	8002290 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_ADC_MspInit+0xec>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_ADC_MspInit+0xec>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_ADC_MspInit+0xec>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_ADC_MspInit+0xec>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_ADC_MspInit+0xec>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_ADC_MspInit+0xec>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MIC_IN_Pin;
 800220a:	2320      	movs	r3, #32
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800220e:	2303      	movs	r3, #3
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_IN_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4820      	ldr	r0, [pc, #128]	; (80022a0 <HAL_ADC_MspInit+0xf0>)
 800221e:	f001 fcbf 	bl	8003ba0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_ADC_MspInit+0xf8>)
 8002226:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 800222a:	2200      	movs	r2, #0
 800222c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 800223c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002240:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002248:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 800224c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002250:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002264:	480f      	ldr	r0, [pc, #60]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002266:	f001 f899 	bl	800339c <HAL_DMA_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002270:	f7ff ff70 	bl	8002154 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_ADC_MspInit+0xf4>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2012      	movs	r0, #18
 8002286:	f001 f852 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800228a:	2012      	movs	r0, #18
 800228c:	f001 f86b 	bl	8003366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40012000 	.word	0x40012000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020800 	.word	0x40020800
 80022a4:	200002a8 	.word	0x200002a8
 80022a8:	40026410 	.word	0x40026410

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_UART_MspInit+0x94>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d133      	bne.n	8002336 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_UART_MspInit+0x98>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002306:	230c      	movs	r3, #12
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002316:	2307      	movs	r3, #7
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <HAL_UART_MspInit+0x9c>)
 8002322:	f001 fc3d 	bl	8003ba0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2026      	movs	r0, #38	; 0x26
 800232c:	f000 ffff 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002330:	2026      	movs	r0, #38	; 0x26
 8002332:	f001 f818 	bl	8003366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40004400 	.word	0x40004400
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <NMI_Handler+0x4>

08002352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler+0x4>

0800235e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <UsageFault_Handler+0x4>

0800236a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002398:	f000 f974 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <ADC_IRQHandler+0x10>)
 80023a6:	f000 f9f4 	bl	8002792 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000260 	.word	0x20000260

080023b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <USART2_IRQHandler+0x10>)
 80023ba:	f002 fb33 	bl	8004a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000308 	.word	0x20000308

080023c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA2_Stream0_IRQHandler+0x10>)
 80023ce:	f001 f97d 	bl	80036cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200002a8 	.word	0x200002a8

080023dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
	return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_kill>:

int _kill(int pid, int sig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023f6:	f003 fa05 	bl	8005804 <__errno>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2216      	movs	r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_exit>:

void _exit (int status)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe7 	bl	80023ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800241e:	e7fe      	b.n	800241e <_exit+0x12>

08002420 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e00a      	b.n	8002448 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002432:	f3af 8000 	nop.w
 8002436:	4601      	mov	r1, r0
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	60ba      	str	r2, [r7, #8]
 800243e:	b2ca      	uxtb	r2, r1
 8002440:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3301      	adds	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	dbf0      	blt.n	8002432 <_read+0x12>
	}

return len;
 8002450:	687b      	ldr	r3, [r7, #4]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e009      	b.n	8002480 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbf1      	blt.n	800246c <_write+0x12>
	}
	return len;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_close>:

int _close(int file)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
	return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ba:	605a      	str	r2, [r3, #4]
	return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_isatty>:

int _isatty(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	return 1;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <_sbrk+0x5c>)
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <_sbrk+0x60>)
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <_sbrk+0x64>)
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <_sbrk+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800252c:	f003 f96a 	bl	8005804 <__errno>
 8002530:	4603      	mov	r3, r0
 8002532:	220c      	movs	r2, #12
 8002534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e009      	b.n	8002550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <_sbrk+0x64>)
 800254c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20020000 	.word	0x20020000
 800255c:	00000400 	.word	0x00000400
 8002560:	2000050c 	.word	0x2000050c
 8002564:	20000528 	.word	0x20000528

08002568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002592:	490e      	ldr	r1, [pc, #56]	; (80025cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a8:	4c0b      	ldr	r4, [pc, #44]	; (80025d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b6:	f7ff ffd7 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ba:	f003 f929 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7fe ffeb 	bl	8001598 <main>
  bx  lr    
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80025d0:	0800a654 	.word	0x0800a654
  ldr r2, =_sbss
 80025d4:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80025d8:	20000524 	.word	0x20000524

080025dc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <CAN1_RX0_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_Init+0x40>)
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_Init+0x40>)
 80025f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x40>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 fe85 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f808 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff fda4 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x54>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fe9d 	bl	8003382 <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 fe65 	bl	800332e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x5c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000044 	.word	0x20000044
 800267c:	2000004c 	.word	0x2000004c
 8002680:	20000048 	.word	0x20000048

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	2000004c 	.word	0x2000004c
 80026a8:	20000510 	.word	0x20000510

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000510 	.word	0x20000510

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000004c 	.word	0x2000004c

0800270c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e033      	b.n	800278a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fd40 	bl	80021b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002752:	f023 0302 	bic.w	r3, r3, #2
 8002756:	f043 0202 	orr.w	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fb82 	bl	8002e68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
 800277a:	e001      	b.n	8002780 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d049      	beq.n	800285c <HAL_ADC_IRQHandler+0xca>
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d046      	beq.n	800285c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d12b      	bne.n	800284c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d127      	bne.n	800284c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002814:	2b00      	cmp	r3, #0
 8002816:	d119      	bne.n	800284c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0220 	bic.w	r2, r2, #32
 8002826:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f9c1 	bl	8002bd4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0212 	mvn.w	r2, #18
 800285a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d057      	beq.n	8002922 <HAL_ADC_IRQHandler+0x190>
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d054      	beq.n	8002922 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d139      	bne.n	8002912 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12b      	bne.n	8002912 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d124      	bne.n	8002912 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11d      	bne.n	8002912 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d119      	bne.n	8002912 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fc26 	bl	8003164 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 020c 	mvn.w	r2, #12
 8002920:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_ADC_IRQHandler+0x1d6>
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d014      	beq.n	8002968 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f94f 	bl	8002bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0201 	mvn.w	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002976:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d015      	beq.n	80029aa <HAL_ADC_IRQHandler+0x218>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f043 0202 	orr.w	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0220 	mvn.w	r2, #32
 8002998:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f938 	bl	8002c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0220 	mvn.w	r2, #32
 80029a8:	601a      	str	r2, [r3, #0]
  }
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e0e9      	b.n	8002ba6 <HAL_ADC_Start_DMA+0x1f2>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d018      	beq.n	8002a1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f8:	4b6d      	ldr	r3, [pc, #436]	; (8002bb0 <HAL_ADC_Start_DMA+0x1fc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6d      	ldr	r2, [pc, #436]	; (8002bb4 <HAL_ADC_Start_DMA+0x200>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9a      	lsrs	r2, r3, #18
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a0c:	e002      	b.n	8002a14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f9      	bne.n	8002a0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a28:	d107      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 80a1 	bne.w	8002b8c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d106      	bne.n	8002a98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f023 0206 	bic.w	r2, r3, #6
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa6:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <HAL_ADC_Start_DMA+0x204>)
 8002aa8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <HAL_ADC_Start_DMA+0x208>)
 8002ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_ADC_Start_DMA+0x20c>)
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4a41      	ldr	r2, [pc, #260]	; (8002bc4 <HAL_ADC_Start_DMA+0x210>)
 8002ac0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002aca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ada:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	334c      	adds	r3, #76	; 0x4c
 8002af6:	4619      	mov	r1, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f000 fcfc 	bl	80034f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d12a      	bne.n	8002b62 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2d      	ldr	r2, [pc, #180]	; (8002bc8 <HAL_ADC_Start_DMA+0x214>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d015      	beq.n	8002b42 <HAL_ADC_Start_DMA+0x18e>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <HAL_ADC_Start_DMA+0x218>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_Start_DMA+0x178>
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_ADC_Start_DMA+0x204>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_ADC_Start_DMA+0x21c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d136      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_ADC_Start_DMA+0x204>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d130      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d129      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	e020      	b.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_ADC_Start_DMA+0x214>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d114      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0210 	orr.w	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000044 	.word	0x20000044
 8002bb4:	431bde83 	.word	0x431bde83
 8002bb8:	40012300 	.word	0x40012300
 8002bbc:	08003061 	.word	0x08003061
 8002bc0:	0800311b 	.word	0x0800311b
 8002bc4:	08003137 	.word	0x08003137
 8002bc8:	40012000 	.word	0x40012000
 8002bcc:	40012100 	.word	0x40012100
 8002bd0:	40012200 	.word	0x40012200

08002bd4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1c>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e105      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x228>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d925      	bls.n	8002c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	3b1e      	subs	r3, #30
 8002c66:	2207      	movs	r2, #7
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	400a      	ands	r2, r1
 8002c74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	4603      	mov	r3, r0
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4403      	add	r3, r0
 8002c8e:	3b1e      	subs	r3, #30
 8002c90:	409a      	lsls	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	e022      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4403      	add	r3, r0
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d824      	bhi.n	8002d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b05      	subs	r3, #5
 8002cfc:	221f      	movs	r2, #31
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b05      	subs	r3, #5
 8002d26:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34
 8002d32:	e04c      	b.n	8002dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d824      	bhi.n	8002d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b23      	subs	r3, #35	; 0x23
 8002d4e:	221f      	movs	r2, #31
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43da      	mvns	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	3b23      	subs	r3, #35	; 0x23
 8002d78:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
 8002d84:	e023      	b.n	8002dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b41      	subs	r3, #65	; 0x41
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b41      	subs	r3, #65	; 0x41
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_ADC_ConfigChannel+0x234>)
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_ADC_ConfigChannel+0x238>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1cc>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b12      	cmp	r3, #18
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_ADC_ConfigChannel+0x238>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d123      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x21e>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d003      	beq.n	8002e0a <HAL_ADC_ConfigChannel+0x1e6>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b11      	cmp	r3, #17
 8002e08:	d11b      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d111      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_ADC_ConfigChannel+0x23c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_ADC_ConfigChannel+0x240>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	0c9a      	lsrs	r2, r3, #18
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e34:	e002      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f9      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40012300 	.word	0x40012300
 8002e5c:	40012000 	.word	0x40012000
 8002e60:	20000044 	.word	0x20000044
 8002e64:	431bde83 	.word	0x431bde83

08002e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e70:	4b79      	ldr	r3, [pc, #484]	; (8003058 <ADC_Init+0x1f0>)
 8002e72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	4a58      	ldr	r2, [pc, #352]	; (800305c <ADC_Init+0x1f4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e00f      	b.n	8002f66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0202 	bic.w	r2, r2, #2
 8002f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e1b      	ldrb	r3, [r3, #24]
 8002f80:	005a      	lsls	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	035a      	lsls	r2, r3, #13
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e007      	b.n	8002fdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	051a      	lsls	r2, r3, #20
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800301e:	025a      	lsls	r2, r3, #9
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	029a      	lsls	r2, r3, #10
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012300 	.word	0x40012300
 800305c:	0f000001 	.word	0x0f000001

08003060 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003076:	2b00      	cmp	r3, #0
 8003078:	d13c      	bne.n	80030f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d12b      	bne.n	80030ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d127      	bne.n	80030ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d119      	bne.n	80030ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0220 	bic.w	r2, r2, #32
 80030c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fd71 	bl	8002bd4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030f2:	e00e      	b.n	8003112 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff fd85 	bl	8002c10 <HAL_ADC_ErrorCallback>
}
 8003106:	e004      	b.n	8003112 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff fd5d 	bl	8002be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fd5a 	bl	8002c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	; (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db0a      	blt.n	8003242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	490c      	ldr	r1, [pc, #48]	; (8003264 <__NVIC_SetPriority+0x4c>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	440b      	add	r3, r1
 800323c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003240:	e00a      	b.n	8003258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4908      	ldr	r1, [pc, #32]	; (8003268 <__NVIC_SetPriority+0x50>)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	3b04      	subs	r3, #4
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	440b      	add	r3, r1
 8003256:	761a      	strb	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000e100 	.word	0xe000e100
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf28      	it	cs
 800328a:	2304      	movcs	r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3304      	adds	r3, #4
 8003292:	2b06      	cmp	r3, #6
 8003294:	d902      	bls.n	800329c <NVIC_EncodePriority+0x30>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3b03      	subs	r3, #3
 800329a:	e000      	b.n	800329e <NVIC_EncodePriority+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	401a      	ands	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43d9      	mvns	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	4313      	orrs	r3, r2
         );
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e4:	d301      	bcc.n	80032ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <SysTick_Config+0x40>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	210f      	movs	r1, #15
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f7ff ff8e 	bl	8003218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <SysTick_Config+0x40>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <SysTick_Config+0x40>)
 8003304:	2207      	movs	r2, #7
 8003306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000e010 	.word	0xe000e010

08003318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff29 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003340:	f7ff ff3e 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 8003344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff ff8e 	bl	800326c <NVIC_EncodePriority>
 8003350:	4602      	mov	r2, r0
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff5d 	bl	8003218 <__NVIC_SetPriority>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff31 	bl	80031dc <__NVIC_EnableIRQ>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ffa2 	bl	80032d4 <SysTick_Config>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff f980 	bl	80026ac <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e099      	b.n	80034ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d8:	e00f      	b.n	80033fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033da:	f7ff f967 	bl	80026ac <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d908      	bls.n	80033fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e078      	b.n	80034ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e8      	bne.n	80033da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <HAL_DMA_Init+0x158>)
 8003414:	4013      	ands	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b04      	cmp	r3, #4
 8003452:	d107      	bne.n	8003464 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	4313      	orrs	r3, r2
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b04      	cmp	r3, #4
 800348c:	d117      	bne.n	80034be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fb01 	bl	8003aa8 <DMA_CheckFifoParam>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034ba:	2301      	movs	r3, #1
 80034bc:	e016      	b.n	80034ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fab8 	bl	8003a3c <DMA_CalcBaseAndBitshift>
 80034cc:	4603      	mov	r3, r0
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	223f      	movs	r2, #63	; 0x3f
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	f010803f 	.word	0xf010803f

080034f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_DMA_Start_IT+0x26>
 800351a:	2302      	movs	r3, #2
 800351c:	e040      	b.n	80035a0 <HAL_DMA_Start_IT+0xa8>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d12f      	bne.n	8003592 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2202      	movs	r2, #2
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa4a 	bl	80039e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	223f      	movs	r2, #63	; 0x3f
 8003552:	409a      	lsls	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0216 	orr.w	r2, r2, #22
 8003566:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0208 	orr.w	r2, r2, #8
 800357e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e005      	b.n	800359e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800359a:	2302      	movs	r3, #2
 800359c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800359e:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035b6:	f7ff f879 	bl	80026ac <HAL_GetTick>
 80035ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d008      	beq.n	80035da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e052      	b.n	8003680 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0216 	bic.w	r2, r2, #22
 80035e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_DMA_Abort+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0208 	bic.w	r2, r2, #8
 8003618:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362a:	e013      	b.n	8003654 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800362c:	f7ff f83e 	bl	80026ac <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b05      	cmp	r3, #5
 8003638:	d90c      	bls.n	8003654 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2203      	movs	r2, #3
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e015      	b.n	8003680 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e4      	bne.n	800362c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	223f      	movs	r2, #63	; 0x3f
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d004      	beq.n	80036a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00c      	b.n	80036c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2205      	movs	r2, #5
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036d8:	4b8e      	ldr	r3, [pc, #568]	; (8003914 <HAL_DMA_IRQHandler+0x248>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a8e      	ldr	r2, [pc, #568]	; (8003918 <HAL_DMA_IRQHandler+0x24c>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2208      	movs	r2, #8
 80036f8:	409a      	lsls	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01a      	beq.n	8003738 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0204 	bic.w	r2, r2, #4
 800371e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	2208      	movs	r2, #8
 8003726:	409a      	lsls	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	2201      	movs	r2, #1
 800373e:	409a      	lsls	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d012      	beq.n	800376e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2201      	movs	r2, #1
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f043 0202 	orr.w	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2204      	movs	r2, #4
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d012      	beq.n	80037a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2204      	movs	r2, #4
 8003792:	409a      	lsls	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	2210      	movs	r2, #16
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d043      	beq.n	800383c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d03c      	beq.n	800383c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	2210      	movs	r2, #16
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d018      	beq.n	800380e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d024      	beq.n	800383c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
 80037fa:	e01f      	b.n	800383c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01b      	beq.n	800383c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
 800380c:	e016      	b.n	800383c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d107      	bne.n	800382c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0208 	bic.w	r2, r2, #8
 800382a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	2220      	movs	r2, #32
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 808f 	beq.w	800396c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8087 	beq.w	800396c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2220      	movs	r2, #32
 8003864:	409a      	lsls	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b05      	cmp	r3, #5
 8003874:	d136      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0216 	bic.w	r2, r2, #22
 8003884:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003894:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <HAL_DMA_IRQHandler+0x1da>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	223f      	movs	r2, #63	; 0x3f
 80038bc:	409a      	lsls	r2, r3
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d07e      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
        }
        return;
 80038e2:	e079      	b.n	80039d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10d      	bne.n	800391c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2b00      	cmp	r3, #0
 8003906:	d031      	beq.n	800396c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
 8003910:	e02c      	b.n	800396c <HAL_DMA_IRQHandler+0x2a0>
 8003912:	bf00      	nop
 8003914:	20000044 	.word	0x20000044
 8003918:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d023      	beq.n	800396c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
 800392c:	e01e      	b.n	800396c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10f      	bne.n	800395c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0210 	bic.w	r2, r2, #16
 800394a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	2b00      	cmp	r3, #0
 8003972:	d032      	beq.n	80039da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d022      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2205      	movs	r2, #5
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3301      	adds	r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d307      	bcc.n	80039b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f2      	bne.n	8003998 <HAL_DMA_IRQHandler+0x2cc>
 80039b2:	e000      	b.n	80039b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
 80039d6:	e000      	b.n	80039da <HAL_DMA_IRQHandler+0x30e>
        return;
 80039d8:	bf00      	nop
    }
  }
}
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d108      	bne.n	8003a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a1e:	e007      	b.n	8003a30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	3b10      	subs	r3, #16
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d909      	bls.n	8003a7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	1d1a      	adds	r2, r3, #4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a7c:	e007      	b.n	8003a8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	aaaaaaab 	.word	0xaaaaaaab
 8003aa4:	0800a194 	.word	0x0800a194

08003aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11f      	bne.n	8003b02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d856      	bhi.n	8003b76 <DMA_CheckFifoParam+0xce>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <DMA_CheckFifoParam+0x28>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003af3 	.word	0x08003af3
 8003ad8:	08003ae1 	.word	0x08003ae1
 8003adc:	08003b77 	.word	0x08003b77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d046      	beq.n	8003b7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e043      	b.n	8003b7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003afa:	d140      	bne.n	8003b7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b00:	e03d      	b.n	8003b7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0a:	d121      	bne.n	8003b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d837      	bhi.n	8003b82 <DMA_CheckFifoParam+0xda>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <DMA_CheckFifoParam+0x70>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b2f 	.word	0x08003b2f
 8003b20:	08003b29 	.word	0x08003b29
 8003b24:	08003b41 	.word	0x08003b41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e030      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d025      	beq.n	8003b86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3e:	e022      	b.n	8003b86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b48:	d11f      	bne.n	8003b8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b4e:	e01c      	b.n	8003b8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d903      	bls.n	8003b5e <DMA_CheckFifoParam+0xb6>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d003      	beq.n	8003b64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b5c:	e018      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      break;
 8003b62:	e015      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e00b      	b.n	8003b8e <DMA_CheckFifoParam+0xe6>
      break;
 8003b76:	bf00      	nop
 8003b78:	e00a      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e008      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e006      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
 8003b84:	e004      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop

08003ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	e16b      	b.n	8003e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	f040 815a 	bne.w	8003e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d005      	beq.n	8003bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d130      	bne.n	8003c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 0201 	and.w	r2, r3, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d017      	beq.n	8003c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d123      	bne.n	8003ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	08da      	lsrs	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3208      	adds	r2, #8
 8003ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	08da      	lsrs	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3208      	adds	r2, #8
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0203 	and.w	r2, r3, #3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80b4 	beq.w	8003e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4b60      	ldr	r3, [pc, #384]	; (8003eac <HAL_GPIO_Init+0x30c>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	4a5f      	ldr	r2, [pc, #380]	; (8003eac <HAL_GPIO_Init+0x30c>)
 8003d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d34:	6453      	str	r3, [r2, #68]	; 0x44
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_GPIO_Init+0x30c>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d42:	4a5b      	ldr	r2, [pc, #364]	; (8003eb0 <HAL_GPIO_Init+0x310>)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a52      	ldr	r2, [pc, #328]	; (8003eb4 <HAL_GPIO_Init+0x314>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02b      	beq.n	8003dc6 <HAL_GPIO_Init+0x226>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a51      	ldr	r2, [pc, #324]	; (8003eb8 <HAL_GPIO_Init+0x318>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d025      	beq.n	8003dc2 <HAL_GPIO_Init+0x222>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a50      	ldr	r2, [pc, #320]	; (8003ebc <HAL_GPIO_Init+0x31c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <HAL_GPIO_Init+0x21e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4f      	ldr	r2, [pc, #316]	; (8003ec0 <HAL_GPIO_Init+0x320>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d019      	beq.n	8003dba <HAL_GPIO_Init+0x21a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4e      	ldr	r2, [pc, #312]	; (8003ec4 <HAL_GPIO_Init+0x324>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_GPIO_Init+0x216>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <HAL_GPIO_Init+0x328>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00d      	beq.n	8003db2 <HAL_GPIO_Init+0x212>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4c      	ldr	r2, [pc, #304]	; (8003ecc <HAL_GPIO_Init+0x32c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x20e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4b      	ldr	r2, [pc, #300]	; (8003ed0 <HAL_GPIO_Init+0x330>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_GPIO_Init+0x20a>
 8003da6:	2307      	movs	r3, #7
 8003da8:	e00e      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003daa:	2308      	movs	r3, #8
 8003dac:	e00c      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003dae:	2306      	movs	r3, #6
 8003db0:	e00a      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003db2:	2305      	movs	r3, #5
 8003db4:	e008      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003db6:	2304      	movs	r3, #4
 8003db8:	e006      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e004      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e002      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_GPIO_Init+0x228>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f002 0203 	and.w	r2, r2, #3
 8003dce:	0092      	lsls	r2, r2, #2
 8003dd0:	4093      	lsls	r3, r2
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd8:	4935      	ldr	r1, [pc, #212]	; (8003eb0 <HAL_GPIO_Init+0x310>)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e0a:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e10:	4b30      	ldr	r3, [pc, #192]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <HAL_GPIO_Init+0x334>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	f67f ae90 	bls.w	8003bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40020800 	.word	0x40020800
 8003ec0:	40020c00 	.word	0x40020c00
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40021400 	.word	0x40021400
 8003ecc:	40021800 	.word	0x40021800
 8003ed0:	40021c00 	.word	0x40021c00
 8003ed4:	40013c00 	.word	0x40013c00

08003ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee8:	787b      	ldrb	r3, [r7, #1]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ef4:	e003      	b.n	8003efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ef6:	887b      	ldrh	r3, [r7, #2]
 8003ef8:	041a      	lsls	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	619a      	str	r2, [r3, #24]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e267      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2a:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d00c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f36:	4b85      	ldr	r3, [pc, #532]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d112      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f42:	4b82      	ldr	r3, [pc, #520]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	4b7e      	ldr	r3, [pc, #504]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05b      	beq.n	8004014 <HAL_RCC_OscConfig+0x108>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d157      	bne.n	8004014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e242      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d106      	bne.n	8003f80 <HAL_RCC_OscConfig+0x74>
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a75      	ldr	r2, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b70      	ldr	r3, [pc, #448]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6f      	ldr	r2, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a68      	ldr	r2, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b66      	ldr	r3, [pc, #408]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fb72 	bl	80026ac <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fe fb6e 	bl	80026ac <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e207      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b5b      	ldr	r3, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xc0>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fb5e 	bl	80026ac <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe fb5a 	bl	80026ac <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1f3      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b51      	ldr	r3, [pc, #324]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xe8>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004022:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004036:	2b08      	cmp	r3, #8
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b44      	ldr	r3, [pc, #272]	; (800414c <HAL_RCC_OscConfig+0x240>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1c7      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4937      	ldr	r1, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x240>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e03a      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b34      	ldr	r3, [pc, #208]	; (8004150 <HAL_RCC_OscConfig+0x244>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fe fb13 	bl	80026ac <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408a:	f7fe fb0f 	bl	80026ac <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1a8      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b28      	ldr	r3, [pc, #160]	; (800414c <HAL_RCC_OscConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4925      	ldr	r1, [pc, #148]	; (800414c <HAL_RCC_OscConfig+0x240>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <HAL_RCC_OscConfig+0x244>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe faf2 	bl	80026ac <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040cc:	f7fe faee 	bl	80026ac <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e187      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d036      	beq.n	8004164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_RCC_OscConfig+0x248>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fe fad2 	bl	80026ac <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410c:	f7fe face 	bl	80026ac <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e167      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x200>
 800412a:	e01b      	b.n	8004164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x248>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe fabb 	bl	80026ac <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	e00e      	b.n	8004158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413a:	f7fe fab7 	bl	80026ac <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d907      	bls.n	8004158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e150      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	42470000 	.word	0x42470000
 8004154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ea      	bne.n	800413a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8097 	beq.w	80042a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	4b7d      	ldr	r3, [pc, #500]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a7c      	ldr	r2, [pc, #496]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b7a      	ldr	r3, [pc, #488]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a2:	4b77      	ldr	r3, [pc, #476]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d118      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ae:	4b74      	ldr	r3, [pc, #464]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a73      	ldr	r2, [pc, #460]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ba:	f7fe fa77 	bl	80026ac <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c2:	f7fe fa73 	bl	80026ac <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e10c      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2ea>
 80041e8:	4b64      	ldr	r3, [pc, #400]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a63      	ldr	r2, [pc, #396]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
 80041f4:	e01c      	b.n	8004230 <HAL_RCC_OscConfig+0x324>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x30c>
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	4b5c      	ldr	r3, [pc, #368]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a5b      	ldr	r2, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	e00b      	b.n	8004230 <HAL_RCC_OscConfig+0x324>
 8004218:	4b58      	ldr	r3, [pc, #352]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a57      	ldr	r2, [pc, #348]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	4b55      	ldr	r3, [pc, #340]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a54      	ldr	r2, [pc, #336]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800422a:	f023 0304 	bic.w	r3, r3, #4
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7fe fa38 	bl	80026ac <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fe fa34 	bl	80026ac <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0cb      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	4b49      	ldr	r3, [pc, #292]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ee      	beq.n	8004240 <HAL_RCC_OscConfig+0x334>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004264:	f7fe fa22 	bl	80026ac <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fe fa1e 	bl	80026ac <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0b5      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004282:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ee      	bne.n	800426c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004294:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80a1 	beq.w	80043ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042aa:	4b34      	ldr	r3, [pc, #208]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d05c      	beq.n	8004370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d141      	bne.n	8004342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0x478>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe f9f2 	bl	80026ac <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe f9ee 	bl	80026ac <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e087      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x478>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe f9c7 	bl	80026ac <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004322:	f7fe f9c3 	bl	80026ac <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e05c      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x416>
 8004340:	e054      	b.n	80043ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCC_OscConfig+0x478>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe f9b0 	bl	80026ac <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe f9ac 	bl	80026ac <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e045      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x444>
 800436e:	e03d      	b.n	80043ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e038      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
 8004384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x4ec>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d028      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d121      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d11a      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d111      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0cc      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b68      	ldr	r3, [pc, #416]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d90c      	bls.n	8004438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0b8      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d020      	beq.n	8004486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004450:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a58      	ldr	r2, [pc, #352]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800445a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004468:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	494d      	ldr	r1, [pc, #308]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d044      	beq.n	800451c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d119      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e06f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e067      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4934      	ldr	r1, [pc, #208]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fe f8de 	bl	80026ac <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fe f8da 	bl	80026ac <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e04f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d20c      	bcs.n	8004544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e032      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4916      	ldr	r1, [pc, #88]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	490e      	ldr	r1, [pc, #56]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004582:	f000 f821 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 8004586:	4602      	mov	r2, r0
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	490a      	ldr	r1, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe f83e 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023c00 	.word	0x40023c00
 80045b8:	40023800 	.word	0x40023800
 80045bc:	0800a17c 	.word	0x0800a17c
 80045c0:	20000044 	.word	0x20000044
 80045c4:	20000048 	.word	0x20000048

080045c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	b094      	sub	sp, #80	; 0x50
 80045ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	647b      	str	r3, [r7, #68]	; 0x44
 80045d4:	2300      	movs	r3, #0
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d8:	2300      	movs	r3, #0
 80045da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e0:	4b79      	ldr	r3, [pc, #484]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d00d      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x40>
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	f200 80e1 	bhi.w	80047b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x34>
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x3a>
 80045fa:	e0db      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b73      	ldr	r3, [pc, #460]	; (80047cc <HAL_RCC_GetSysClockFreq+0x204>)
 80045fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004600:	e0db      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004606:	e0d8      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004612:	4b6d      	ldr	r3, [pc, #436]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d063      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461e:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	2200      	movs	r2, #0
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
 8004628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	633b      	str	r3, [r7, #48]	; 0x30
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800463a:	4622      	mov	r2, r4
 800463c:	462b      	mov	r3, r5
 800463e:	f04f 0000 	mov.w	r0, #0
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	0159      	lsls	r1, r3, #5
 8004648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800464c:	0150      	lsls	r0, r2, #5
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4621      	mov	r1, r4
 8004654:	1a51      	subs	r1, r2, r1
 8004656:	6139      	str	r1, [r7, #16]
 8004658:	4629      	mov	r1, r5
 800465a:	eb63 0301 	sbc.w	r3, r3, r1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800466c:	4659      	mov	r1, fp
 800466e:	018b      	lsls	r3, r1, #6
 8004670:	4651      	mov	r1, sl
 8004672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004676:	4651      	mov	r1, sl
 8004678:	018a      	lsls	r2, r1, #6
 800467a:	4651      	mov	r1, sl
 800467c:	ebb2 0801 	subs.w	r8, r2, r1
 8004680:	4659      	mov	r1, fp
 8004682:	eb63 0901 	sbc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	462b      	mov	r3, r5
 80046a8:	eb49 0303 	adc.w	r3, r9, r3
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046ba:	4629      	mov	r1, r5
 80046bc:	024b      	lsls	r3, r1, #9
 80046be:	4621      	mov	r1, r4
 80046c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046c4:	4621      	mov	r1, r4
 80046c6:	024a      	lsls	r2, r1, #9
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ce:	2200      	movs	r2, #0
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046d8:	f7fc fad6 	bl	8000c88 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4613      	mov	r3, r2
 80046e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e4:	e058      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e6:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	2200      	movs	r2, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	4611      	mov	r1, r2
 80046f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f04f 0100 	mov.w	r1, #0
 800470c:	0159      	lsls	r1, r3, #5
 800470e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004712:	0150      	lsls	r0, r2, #5
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4641      	mov	r1, r8
 800471a:	ebb2 0a01 	subs.w	sl, r2, r1
 800471e:	4649      	mov	r1, r9
 8004720:	eb63 0b01 	sbc.w	fp, r3, r1
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004738:	ebb2 040a 	subs.w	r4, r2, sl
 800473c:	eb63 050b 	sbc.w	r5, r3, fp
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	00eb      	lsls	r3, r5, #3
 800474a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474e:	00e2      	lsls	r2, r4, #3
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	4643      	mov	r3, r8
 8004756:	18e3      	adds	r3, r4, r3
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	464b      	mov	r3, r9
 800475c:	eb45 0303 	adc.w	r3, r5, r3
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800476e:	4629      	mov	r1, r5
 8004770:	028b      	lsls	r3, r1, #10
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004778:	4621      	mov	r1, r4
 800477a:	028a      	lsls	r2, r1, #10
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004782:	2200      	movs	r2, #0
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	61fa      	str	r2, [r7, #28]
 8004788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478c:	f7fc fa7c 	bl	8000c88 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetSysClockFreq+0x204>)
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3750      	adds	r7, #80	; 0x50
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	007a1200 	.word	0x007a1200

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000044 	.word	0x20000044

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800a18c 	.word	0x0800a18c

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffdc 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0b5b      	lsrs	r3, r3, #13
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	0800a18c 	.word	0x0800a18c

0800483c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	220f      	movs	r2, #15
 800484a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	08db      	lsrs	r3, r3, #3
 8004876:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <HAL_RCC_GetClockConfig+0x60>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0207 	and.w	r2, r3, #7
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	40023c00 	.word	0x40023c00

080048a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e03f      	b.n	8004932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fcf0 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	; 0x24
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fd19 	bl	800531c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d130      	bne.n	80049b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Transmit_IT+0x26>
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e029      	b.n	80049b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Transmit_IT+0x38>
 800496e:	2302      	movs	r3, #2
 8004970:	e022      	b.n	80049b8 <HAL_UART_Transmit_IT+0x7e>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	; 0x21
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d11d      	bne.n	8004a1a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_UART_Receive_IT+0x26>
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e016      	b.n	8004a1c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Receive_IT+0x38>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e00f      	b.n	8004a1c <HAL_UART_Receive_IT+0x58>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 faab 	bl	8004f6c <UART_Start_Receive_IT>
 8004a16:	4603      	mov	r3, r0
 8004a18:	e000      	b.n	8004a1c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b0ba      	sub	sp, #232	; 0xe8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_UART_IRQHandler+0x66>
 8004a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fb8f 	bl	80051a6 <UART_Receive_IT>
      return;
 8004a88:	e256      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80de 	beq.w	8004c50 <HAL_UART_IRQHandler+0x22c>
 8004a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80d1 	beq.w	8004c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xae>
 8004aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0201 	orr.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xd2>
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0202 	orr.w	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xf6>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d011      	beq.n	8004b4a <HAL_UART_IRQHandler+0x126>
 8004b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f043 0208 	orr.w	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 81ed 	beq.w	8004f2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_UART_IRQHandler+0x14e>
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fb1a 	bl	80051a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d103      	bne.n	8004b9e <HAL_UART_IRQHandler+0x17a>
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d04f      	beq.n	8004c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa22 	bl	8004fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d141      	bne.n	8004c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3314      	adds	r3, #20
 8004bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1d9      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d013      	beq.n	8004c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	4a7d      	ldr	r2, [pc, #500]	; (8004e00 <HAL_UART_IRQHandler+0x3dc>)
 8004c0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fd38 	bl	8003688 <HAL_DMA_Abort_IT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e00e      	b.n	8004c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f986 	bl	8004f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e00a      	b.n	8004c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f982 	bl	8004f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	e006      	b.n	8004c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f97e 	bl	8004f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c4a:	e170      	b.n	8004f2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	bf00      	nop
    return;
 8004c4e:	e16e      	b.n	8004f2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 814a 	bne.w	8004eee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8143 	beq.w	8004eee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 813c 	beq.w	8004eee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	f040 80b4 	bne.w	8004e04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8140 	beq.w	8004f32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	f080 8139 	bcs.w	8004f32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd2:	f000 8088 	beq.w	8004de6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1d9      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e1      	bne.n	8004d22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fbe1 	bl	80035a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8ac 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dfc:	e099      	b.n	8004f32 <HAL_UART_IRQHandler+0x50e>
 8004dfe:	bf00      	nop
 8004e00:	080050af 	.word	0x080050af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 808b 	beq.w	8004f36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8086 	beq.w	8004f36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3314      	adds	r3, #20
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	623b      	str	r3, [r7, #32]
   return(result);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3314      	adds	r3, #20
 8004e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e86:	633a      	str	r2, [r7, #48]	; 0x30
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e3      	bne.n	8004e62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0310 	bic.w	r3, r3, #16
 8004ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ecc:	61fa      	str	r2, [r7, #28]
 8004ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	69b9      	ldr	r1, [r7, #24]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e3      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f834 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eec:	e023      	b.n	8004f36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_UART_IRQHandler+0x4ea>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8e5 	bl	80050d6 <UART_Transmit_IT>
    return;
 8004f0c:	e014      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00e      	beq.n	8004f38 <HAL_UART_IRQHandler+0x514>
 8004f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f925 	bl	8005176 <UART_EndTransmit_IT>
    return;
 8004f2c:	e004      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
    return;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
      return;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_UART_IRQHandler+0x514>
      return;
 8004f36:	bf00      	nop
  }
}
 8004f38:	37e8      	adds	r7, #232	; 0xe8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2222      	movs	r2, #34	; 0x22
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0220 	orr.w	r2, r2, #32
 8004fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b095      	sub	sp, #84	; 0x54
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005010:	643a      	str	r2, [r7, #64]	; 0x40
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e5      	bne.n	8004ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3314      	adds	r3, #20
 800502a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	61fb      	str	r3, [r7, #28]
   return(result);
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f023 0301 	bic.w	r3, r3, #1
 800503a:	64bb      	str	r3, [r7, #72]	; 0x48
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3314      	adds	r3, #20
 8005042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005044:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800504a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e5      	bne.n	8005024 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	2b01      	cmp	r3, #1
 800505e:	d119      	bne.n	8005094 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f023 0310 	bic.w	r3, r3, #16
 8005076:	647b      	str	r3, [r7, #68]	; 0x44
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005080:	61ba      	str	r2, [r7, #24]
 8005082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6979      	ldr	r1, [r7, #20]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	613b      	str	r3, [r7, #16]
   return(result);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050a2:	bf00      	nop
 80050a4:	3754      	adds	r7, #84	; 0x54
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff ff39 	bl	8004f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b21      	cmp	r3, #33	; 0x21
 80050e8:	d13e      	bne.n	8005168 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d114      	bne.n	800511e <UART_Transmit_IT+0x48>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d110      	bne.n	800511e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005110:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	621a      	str	r2, [r3, #32]
 800511c:	e008      	b.n	8005130 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6211      	str	r1, [r2, #32]
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29b      	uxth	r3, r3
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4619      	mov	r1, r3
 800513e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10f      	bne.n	8005164 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005152:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005162:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc ff4e 	bl	8002038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b08c      	sub	sp, #48	; 0x30
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b22      	cmp	r3, #34	; 0x22
 80051b8:	f040 80ab 	bne.w	8005312 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d117      	bne.n	80051f6 <UART_Receive_IT+0x50>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d113      	bne.n	80051f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
 80051f4:	e026      	b.n	8005244 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005208:	d007      	beq.n	800521a <UART_Receive_IT+0x74>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <UART_Receive_IT+0x82>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e008      	b.n	800523a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005234:	b2da      	uxtb	r2, r3
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4619      	mov	r1, r3
 8005252:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005254:	2b00      	cmp	r3, #0
 8005256:	d15a      	bne.n	800530e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0220 	bic.w	r2, r2, #32
 8005266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	d135      	bne.n	8005304 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	613b      	str	r3, [r7, #16]
   return(result);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f023 0310 	bic.w	r3, r3, #16
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052be:	623a      	str	r2, [r7, #32]
 80052c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	69f9      	ldr	r1, [r7, #28]
 80052c4:	6a3a      	ldr	r2, [r7, #32]
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e5      	bne.n	800529e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d10a      	bne.n	80052f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fe29 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
 8005302:	e002      	b.n	800530a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fc fba7 	bl	8001a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e002      	b.n	8005314 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3730      	adds	r7, #48	; 0x30
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800531c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005320:	b0c0      	sub	sp, #256	; 0x100
 8005322:	af00      	add	r7, sp, #0
 8005324:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	68d9      	ldr	r1, [r3, #12]
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	ea40 0301 	orr.w	r3, r0, r1
 8005344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	431a      	orrs	r2, r3
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005374:	f021 010c 	bic.w	r1, r1, #12
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005382:	430b      	orrs	r3, r1
 8005384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	6999      	ldr	r1, [r3, #24]
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	ea40 0301 	orr.w	r3, r0, r1
 80053a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b8f      	ldr	r3, [pc, #572]	; (80055e8 <UART_SetConfig+0x2cc>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d005      	beq.n	80053bc <UART_SetConfig+0xa0>
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <UART_SetConfig+0x2d0>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d104      	bne.n	80053c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7ff fa2a 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80053c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053c4:	e003      	b.n	80053ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053c6:	f7ff fa11 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80053ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d8:	f040 810c 	bne.w	80055f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	1891      	adds	r1, r2, r2
 80053f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053f6:	415b      	adcs	r3, r3
 80053f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053fe:	4621      	mov	r1, r4
 8005400:	eb12 0801 	adds.w	r8, r2, r1
 8005404:	4629      	mov	r1, r5
 8005406:	eb43 0901 	adc.w	r9, r3, r1
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541e:	4690      	mov	r8, r2
 8005420:	4699      	mov	r9, r3
 8005422:	4623      	mov	r3, r4
 8005424:	eb18 0303 	adds.w	r3, r8, r3
 8005428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800542c:	462b      	mov	r3, r5
 800542e:	eb49 0303 	adc.w	r3, r9, r3
 8005432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005442:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800544a:	460b      	mov	r3, r1
 800544c:	18db      	adds	r3, r3, r3
 800544e:	653b      	str	r3, [r7, #80]	; 0x50
 8005450:	4613      	mov	r3, r2
 8005452:	eb42 0303 	adc.w	r3, r2, r3
 8005456:	657b      	str	r3, [r7, #84]	; 0x54
 8005458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800545c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005460:	f7fb fc12 	bl	8000c88 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <UART_SetConfig+0x2d4>)
 800546a:	fba3 2302 	umull	r2, r3, r3, r2
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	011c      	lsls	r4, r3, #4
 8005472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800547c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	1891      	adds	r1, r2, r2
 800548a:	64b9      	str	r1, [r7, #72]	; 0x48
 800548c:	415b      	adcs	r3, r3
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005494:	4641      	mov	r1, r8
 8005496:	eb12 0a01 	adds.w	sl, r2, r1
 800549a:	4649      	mov	r1, r9
 800549c:	eb43 0b01 	adc.w	fp, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b4:	4692      	mov	sl, r2
 80054b6:	469b      	mov	fp, r3
 80054b8:	4643      	mov	r3, r8
 80054ba:	eb1a 0303 	adds.w	r3, sl, r3
 80054be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054c2:	464b      	mov	r3, r9
 80054c4:	eb4b 0303 	adc.w	r3, fp, r3
 80054c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054e0:	460b      	mov	r3, r1
 80054e2:	18db      	adds	r3, r3, r3
 80054e4:	643b      	str	r3, [r7, #64]	; 0x40
 80054e6:	4613      	mov	r3, r2
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
 80054ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054f6:	f7fb fbc7 	bl	8000c88 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <UART_SetConfig+0x2d4>)
 8005502:	fba3 2301 	umull	r2, r3, r3, r1
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	2264      	movs	r2, #100	; 0x64
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	1acb      	subs	r3, r1, r3
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <UART_SetConfig+0x2d4>)
 8005518:	fba3 2302 	umull	r2, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005524:	441c      	add	r4, r3
 8005526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552a:	2200      	movs	r2, #0
 800552c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005530:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005538:	4642      	mov	r2, r8
 800553a:	464b      	mov	r3, r9
 800553c:	1891      	adds	r1, r2, r2
 800553e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005540:	415b      	adcs	r3, r3
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005548:	4641      	mov	r1, r8
 800554a:	1851      	adds	r1, r2, r1
 800554c:	6339      	str	r1, [r7, #48]	; 0x30
 800554e:	4649      	mov	r1, r9
 8005550:	414b      	adcs	r3, r1
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005560:	4659      	mov	r1, fp
 8005562:	00cb      	lsls	r3, r1, #3
 8005564:	4651      	mov	r1, sl
 8005566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556a:	4651      	mov	r1, sl
 800556c:	00ca      	lsls	r2, r1, #3
 800556e:	4610      	mov	r0, r2
 8005570:	4619      	mov	r1, r3
 8005572:	4603      	mov	r3, r0
 8005574:	4642      	mov	r2, r8
 8005576:	189b      	adds	r3, r3, r2
 8005578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800557c:	464b      	mov	r3, r9
 800557e:	460a      	mov	r2, r1
 8005580:	eb42 0303 	adc.w	r3, r2, r3
 8005584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005594:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800559c:	460b      	mov	r3, r1
 800559e:	18db      	adds	r3, r3, r3
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a2:	4613      	mov	r3, r2
 80055a4:	eb42 0303 	adc.w	r3, r2, r3
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055b2:	f7fb fb69 	bl	8000c88 <__aeabi_uldivmod>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <UART_SetConfig+0x2d4>)
 80055bc:	fba3 1302 	umull	r1, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	2164      	movs	r1, #100	; 0x64
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	3332      	adds	r3, #50	; 0x32
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <UART_SetConfig+0x2d4>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	f003 0207 	and.w	r2, r3, #7
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4422      	add	r2, r4
 80055e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055e4:	e105      	b.n	80057f2 <UART_SetConfig+0x4d6>
 80055e6:	bf00      	nop
 80055e8:	40011000 	.word	0x40011000
 80055ec:	40011400 	.word	0x40011400
 80055f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005606:	4642      	mov	r2, r8
 8005608:	464b      	mov	r3, r9
 800560a:	1891      	adds	r1, r2, r2
 800560c:	6239      	str	r1, [r7, #32]
 800560e:	415b      	adcs	r3, r3
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005616:	4641      	mov	r1, r8
 8005618:	1854      	adds	r4, r2, r1
 800561a:	4649      	mov	r1, r9
 800561c:	eb43 0501 	adc.w	r5, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	00eb      	lsls	r3, r5, #3
 800562a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562e:	00e2      	lsls	r2, r4, #3
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	4643      	mov	r3, r8
 8005636:	18e3      	adds	r3, r4, r3
 8005638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800563c:	464b      	mov	r3, r9
 800563e:	eb45 0303 	adc.w	r3, r5, r3
 8005642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005652:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005662:	4629      	mov	r1, r5
 8005664:	008b      	lsls	r3, r1, #2
 8005666:	4621      	mov	r1, r4
 8005668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800566c:	4621      	mov	r1, r4
 800566e:	008a      	lsls	r2, r1, #2
 8005670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005674:	f7fb fb08 	bl	8000c88 <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4b60      	ldr	r3, [pc, #384]	; (8005800 <UART_SetConfig+0x4e4>)
 800567e:	fba3 2302 	umull	r2, r3, r3, r2
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	011c      	lsls	r4, r3, #4
 8005686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800568a:	2200      	movs	r2, #0
 800568c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005690:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	1891      	adds	r1, r2, r2
 800569e:	61b9      	str	r1, [r7, #24]
 80056a0:	415b      	adcs	r3, r3
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a8:	4641      	mov	r1, r8
 80056aa:	1851      	adds	r1, r2, r1
 80056ac:	6139      	str	r1, [r7, #16]
 80056ae:	4649      	mov	r1, r9
 80056b0:	414b      	adcs	r3, r1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c0:	4659      	mov	r1, fp
 80056c2:	00cb      	lsls	r3, r1, #3
 80056c4:	4651      	mov	r1, sl
 80056c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ca:	4651      	mov	r1, sl
 80056cc:	00ca      	lsls	r2, r1, #3
 80056ce:	4610      	mov	r0, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	4642      	mov	r2, r8
 80056d6:	189b      	adds	r3, r3, r2
 80056d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056dc:	464b      	mov	r3, r9
 80056de:	460a      	mov	r2, r1
 80056e0:	eb42 0303 	adc.w	r3, r2, r3
 80056e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005700:	4649      	mov	r1, r9
 8005702:	008b      	lsls	r3, r1, #2
 8005704:	4641      	mov	r1, r8
 8005706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800570a:	4641      	mov	r1, r8
 800570c:	008a      	lsls	r2, r1, #2
 800570e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005712:	f7fb fab9 	bl	8000c88 <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4b39      	ldr	r3, [pc, #228]	; (8005800 <UART_SetConfig+0x4e4>)
 800571c:	fba3 1302 	umull	r1, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	2164      	movs	r1, #100	; 0x64
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	3332      	adds	r3, #50	; 0x32
 800572e:	4a34      	ldr	r2, [pc, #208]	; (8005800 <UART_SetConfig+0x4e4>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573a:	441c      	add	r4, r3
 800573c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005740:	2200      	movs	r2, #0
 8005742:	673b      	str	r3, [r7, #112]	; 0x70
 8005744:	677a      	str	r2, [r7, #116]	; 0x74
 8005746:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800574a:	4642      	mov	r2, r8
 800574c:	464b      	mov	r3, r9
 800574e:	1891      	adds	r1, r2, r2
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	415b      	adcs	r3, r3
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800575a:	4641      	mov	r1, r8
 800575c:	1851      	adds	r1, r2, r1
 800575e:	6039      	str	r1, [r7, #0]
 8005760:	4649      	mov	r1, r9
 8005762:	414b      	adcs	r3, r1
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005772:	4659      	mov	r1, fp
 8005774:	00cb      	lsls	r3, r1, #3
 8005776:	4651      	mov	r1, sl
 8005778:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577c:	4651      	mov	r1, sl
 800577e:	00ca      	lsls	r2, r1, #3
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	4603      	mov	r3, r0
 8005786:	4642      	mov	r2, r8
 8005788:	189b      	adds	r3, r3, r2
 800578a:	66bb      	str	r3, [r7, #104]	; 0x68
 800578c:	464b      	mov	r3, r9
 800578e:	460a      	mov	r2, r1
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	663b      	str	r3, [r7, #96]	; 0x60
 80057a0:	667a      	str	r2, [r7, #100]	; 0x64
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ae:	4649      	mov	r1, r9
 80057b0:	008b      	lsls	r3, r1, #2
 80057b2:	4641      	mov	r1, r8
 80057b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b8:	4641      	mov	r1, r8
 80057ba:	008a      	lsls	r2, r1, #2
 80057bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057c0:	f7fb fa62 	bl	8000c88 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <UART_SetConfig+0x4e4>)
 80057ca:	fba3 1302 	umull	r1, r3, r3, r2
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	2164      	movs	r1, #100	; 0x64
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	3332      	adds	r3, #50	; 0x32
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <UART_SetConfig+0x4e4>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4422      	add	r2, r4
 80057f0:	609a      	str	r2, [r3, #8]
}
 80057f2:	bf00      	nop
 80057f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057f8:	46bd      	mov	sp, r7
 80057fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fe:	bf00      	nop
 8005800:	51eb851f 	.word	0x51eb851f

08005804 <__errno>:
 8005804:	4b01      	ldr	r3, [pc, #4]	; (800580c <__errno+0x8>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000050 	.word	0x20000050

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4d0d      	ldr	r5, [pc, #52]	; (8005848 <__libc_init_array+0x38>)
 8005814:	4c0d      	ldr	r4, [pc, #52]	; (800584c <__libc_init_array+0x3c>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	2600      	movs	r6, #0
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	4d0b      	ldr	r5, [pc, #44]	; (8005850 <__libc_init_array+0x40>)
 8005822:	4c0c      	ldr	r4, [pc, #48]	; (8005854 <__libc_init_array+0x44>)
 8005824:	f004 fc90 	bl	800a148 <_init>
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	2600      	movs	r6, #0
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f855 3b04 	ldr.w	r3, [r5], #4
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	0800a64c 	.word	0x0800a64c
 800584c:	0800a64c 	.word	0x0800a64c
 8005850:	0800a64c 	.word	0x0800a64c
 8005854:	0800a650 	.word	0x0800a650

08005858 <memset>:
 8005858:	4402      	add	r2, r0
 800585a:	4603      	mov	r3, r0
 800585c:	4293      	cmp	r3, r2
 800585e:	d100      	bne.n	8005862 <memset+0xa>
 8005860:	4770      	bx	lr
 8005862:	f803 1b01 	strb.w	r1, [r3], #1
 8005866:	e7f9      	b.n	800585c <memset+0x4>

08005868 <__cvt>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	ec55 4b10 	vmov	r4, r5, d0
 8005870:	2d00      	cmp	r5, #0
 8005872:	460e      	mov	r6, r1
 8005874:	4619      	mov	r1, r3
 8005876:	462b      	mov	r3, r5
 8005878:	bfbb      	ittet	lt
 800587a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800587e:	461d      	movlt	r5, r3
 8005880:	2300      	movge	r3, #0
 8005882:	232d      	movlt	r3, #45	; 0x2d
 8005884:	700b      	strb	r3, [r1, #0]
 8005886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005888:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800588c:	4691      	mov	r9, r2
 800588e:	f023 0820 	bic.w	r8, r3, #32
 8005892:	bfbc      	itt	lt
 8005894:	4622      	movlt	r2, r4
 8005896:	4614      	movlt	r4, r2
 8005898:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800589c:	d005      	beq.n	80058aa <__cvt+0x42>
 800589e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058a2:	d100      	bne.n	80058a6 <__cvt+0x3e>
 80058a4:	3601      	adds	r6, #1
 80058a6:	2102      	movs	r1, #2
 80058a8:	e000      	b.n	80058ac <__cvt+0x44>
 80058aa:	2103      	movs	r1, #3
 80058ac:	ab03      	add	r3, sp, #12
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	ab02      	add	r3, sp, #8
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	ec45 4b10 	vmov	d0, r4, r5
 80058b8:	4653      	mov	r3, sl
 80058ba:	4632      	mov	r2, r6
 80058bc:	f001 fdac 	bl	8007418 <_dtoa_r>
 80058c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058c4:	4607      	mov	r7, r0
 80058c6:	d102      	bne.n	80058ce <__cvt+0x66>
 80058c8:	f019 0f01 	tst.w	r9, #1
 80058cc:	d022      	beq.n	8005914 <__cvt+0xac>
 80058ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058d2:	eb07 0906 	add.w	r9, r7, r6
 80058d6:	d110      	bne.n	80058fa <__cvt+0x92>
 80058d8:	783b      	ldrb	r3, [r7, #0]
 80058da:	2b30      	cmp	r3, #48	; 0x30
 80058dc:	d10a      	bne.n	80058f4 <__cvt+0x8c>
 80058de:	2200      	movs	r2, #0
 80058e0:	2300      	movs	r3, #0
 80058e2:	4620      	mov	r0, r4
 80058e4:	4629      	mov	r1, r5
 80058e6:	f7fb f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ea:	b918      	cbnz	r0, 80058f4 <__cvt+0x8c>
 80058ec:	f1c6 0601 	rsb	r6, r6, #1
 80058f0:	f8ca 6000 	str.w	r6, [sl]
 80058f4:	f8da 3000 	ldr.w	r3, [sl]
 80058f8:	4499      	add	r9, r3
 80058fa:	2200      	movs	r2, #0
 80058fc:	2300      	movs	r3, #0
 80058fe:	4620      	mov	r0, r4
 8005900:	4629      	mov	r1, r5
 8005902:	f7fb f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005906:	b108      	cbz	r0, 800590c <__cvt+0xa4>
 8005908:	f8cd 900c 	str.w	r9, [sp, #12]
 800590c:	2230      	movs	r2, #48	; 0x30
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	454b      	cmp	r3, r9
 8005912:	d307      	bcc.n	8005924 <__cvt+0xbc>
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005918:	1bdb      	subs	r3, r3, r7
 800591a:	4638      	mov	r0, r7
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	b004      	add	sp, #16
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	9103      	str	r1, [sp, #12]
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e7f0      	b.n	800590e <__cvt+0xa6>

0800592c <__exponent>:
 800592c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800592e:	4603      	mov	r3, r0
 8005930:	2900      	cmp	r1, #0
 8005932:	bfb8      	it	lt
 8005934:	4249      	neglt	r1, r1
 8005936:	f803 2b02 	strb.w	r2, [r3], #2
 800593a:	bfb4      	ite	lt
 800593c:	222d      	movlt	r2, #45	; 0x2d
 800593e:	222b      	movge	r2, #43	; 0x2b
 8005940:	2909      	cmp	r1, #9
 8005942:	7042      	strb	r2, [r0, #1]
 8005944:	dd2a      	ble.n	800599c <__exponent+0x70>
 8005946:	f10d 0407 	add.w	r4, sp, #7
 800594a:	46a4      	mov	ip, r4
 800594c:	270a      	movs	r7, #10
 800594e:	46a6      	mov	lr, r4
 8005950:	460a      	mov	r2, r1
 8005952:	fb91 f6f7 	sdiv	r6, r1, r7
 8005956:	fb07 1516 	mls	r5, r7, r6, r1
 800595a:	3530      	adds	r5, #48	; 0x30
 800595c:	2a63      	cmp	r2, #99	; 0x63
 800595e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005962:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005966:	4631      	mov	r1, r6
 8005968:	dcf1      	bgt.n	800594e <__exponent+0x22>
 800596a:	3130      	adds	r1, #48	; 0x30
 800596c:	f1ae 0502 	sub.w	r5, lr, #2
 8005970:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005974:	1c44      	adds	r4, r0, #1
 8005976:	4629      	mov	r1, r5
 8005978:	4561      	cmp	r1, ip
 800597a:	d30a      	bcc.n	8005992 <__exponent+0x66>
 800597c:	f10d 0209 	add.w	r2, sp, #9
 8005980:	eba2 020e 	sub.w	r2, r2, lr
 8005984:	4565      	cmp	r5, ip
 8005986:	bf88      	it	hi
 8005988:	2200      	movhi	r2, #0
 800598a:	4413      	add	r3, r2
 800598c:	1a18      	subs	r0, r3, r0
 800598e:	b003      	add	sp, #12
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005996:	f804 2f01 	strb.w	r2, [r4, #1]!
 800599a:	e7ed      	b.n	8005978 <__exponent+0x4c>
 800599c:	2330      	movs	r3, #48	; 0x30
 800599e:	3130      	adds	r1, #48	; 0x30
 80059a0:	7083      	strb	r3, [r0, #2]
 80059a2:	70c1      	strb	r1, [r0, #3]
 80059a4:	1d03      	adds	r3, r0, #4
 80059a6:	e7f1      	b.n	800598c <__exponent+0x60>

080059a8 <_printf_float>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	ed2d 8b02 	vpush	{d8}
 80059b0:	b08d      	sub	sp, #52	; 0x34
 80059b2:	460c      	mov	r4, r1
 80059b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059b8:	4616      	mov	r6, r2
 80059ba:	461f      	mov	r7, r3
 80059bc:	4605      	mov	r5, r0
 80059be:	f002 fe89 	bl	80086d4 <_localeconv_r>
 80059c2:	f8d0 a000 	ldr.w	sl, [r0]
 80059c6:	4650      	mov	r0, sl
 80059c8:	f7fa fc02 	bl	80001d0 <strlen>
 80059cc:	2300      	movs	r3, #0
 80059ce:	930a      	str	r3, [sp, #40]	; 0x28
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	9305      	str	r3, [sp, #20]
 80059d4:	f8d8 3000 	ldr.w	r3, [r8]
 80059d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059dc:	3307      	adds	r3, #7
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	f103 0208 	add.w	r2, r3, #8
 80059e6:	f8c8 2000 	str.w	r2, [r8]
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059fa:	9307      	str	r3, [sp, #28]
 80059fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a00:	ee08 0a10 	vmov	s16, r0
 8005a04:	4b9f      	ldr	r3, [pc, #636]	; (8005c84 <_printf_float+0x2dc>)
 8005a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	f7fb f88d 	bl	8000b2c <__aeabi_dcmpun>
 8005a12:	bb88      	cbnz	r0, 8005a78 <_printf_float+0xd0>
 8005a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a18:	4b9a      	ldr	r3, [pc, #616]	; (8005c84 <_printf_float+0x2dc>)
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	f7fb f867 	bl	8000af0 <__aeabi_dcmple>
 8005a22:	bb48      	cbnz	r0, 8005a78 <_printf_float+0xd0>
 8005a24:	2200      	movs	r2, #0
 8005a26:	2300      	movs	r3, #0
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fb f856 	bl	8000adc <__aeabi_dcmplt>
 8005a30:	b110      	cbz	r0, 8005a38 <_printf_float+0x90>
 8005a32:	232d      	movs	r3, #45	; 0x2d
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	4b93      	ldr	r3, [pc, #588]	; (8005c88 <_printf_float+0x2e0>)
 8005a3a:	4894      	ldr	r0, [pc, #592]	; (8005c8c <_printf_float+0x2e4>)
 8005a3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a40:	bf94      	ite	ls
 8005a42:	4698      	movls	r8, r3
 8005a44:	4680      	movhi	r8, r0
 8005a46:	2303      	movs	r3, #3
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	f023 0204 	bic.w	r2, r3, #4
 8005a50:	6022      	str	r2, [r4, #0]
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	9700      	str	r7, [sp, #0]
 8005a58:	4633      	mov	r3, r6
 8005a5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f9d8 	bl	8005e14 <_printf_common>
 8005a64:	3001      	adds	r0, #1
 8005a66:	f040 8090 	bne.w	8005b8a <_printf_float+0x1e2>
 8005a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6e:	b00d      	add	sp, #52	; 0x34
 8005a70:	ecbd 8b02 	vpop	{d8}
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4649      	mov	r1, r9
 8005a80:	f7fb f854 	bl	8000b2c <__aeabi_dcmpun>
 8005a84:	b140      	cbz	r0, 8005a98 <_printf_float+0xf0>
 8005a86:	464b      	mov	r3, r9
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bfbc      	itt	lt
 8005a8c:	232d      	movlt	r3, #45	; 0x2d
 8005a8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a92:	487f      	ldr	r0, [pc, #508]	; (8005c90 <_printf_float+0x2e8>)
 8005a94:	4b7f      	ldr	r3, [pc, #508]	; (8005c94 <_printf_float+0x2ec>)
 8005a96:	e7d1      	b.n	8005a3c <_printf_float+0x94>
 8005a98:	6863      	ldr	r3, [r4, #4]
 8005a9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a9e:	9206      	str	r2, [sp, #24]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	d13f      	bne.n	8005b24 <_printf_float+0x17c>
 8005aa4:	2306      	movs	r3, #6
 8005aa6:	6063      	str	r3, [r4, #4]
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	6861      	ldr	r1, [r4, #4]
 8005aac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9303      	str	r3, [sp, #12]
 8005ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ab6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005aba:	ab09      	add	r3, sp, #36	; 0x24
 8005abc:	ec49 8b10 	vmov	d0, r8, r9
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7ff fecd 	bl	8005868 <__cvt>
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad2:	2b47      	cmp	r3, #71	; 0x47
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	d108      	bne.n	8005aea <_printf_float+0x142>
 8005ad8:	1cc8      	adds	r0, r1, #3
 8005ada:	db02      	blt.n	8005ae2 <_printf_float+0x13a>
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	4299      	cmp	r1, r3
 8005ae0:	dd41      	ble.n	8005b66 <_printf_float+0x1be>
 8005ae2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ae6:	fa5f fb8b 	uxtb.w	fp, fp
 8005aea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aee:	d820      	bhi.n	8005b32 <_printf_float+0x18a>
 8005af0:	3901      	subs	r1, #1
 8005af2:	465a      	mov	r2, fp
 8005af4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005af8:	9109      	str	r1, [sp, #36]	; 0x24
 8005afa:	f7ff ff17 	bl	800592c <__exponent>
 8005afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b00:	1813      	adds	r3, r2, r0
 8005b02:	2a01      	cmp	r2, #1
 8005b04:	4681      	mov	r9, r0
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	dc02      	bgt.n	8005b10 <_printf_float+0x168>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	07d2      	lsls	r2, r2, #31
 8005b0e:	d501      	bpl.n	8005b14 <_printf_float+0x16c>
 8005b10:	3301      	adds	r3, #1
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d09c      	beq.n	8005a56 <_printf_float+0xae>
 8005b1c:	232d      	movs	r3, #45	; 0x2d
 8005b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b22:	e798      	b.n	8005a56 <_printf_float+0xae>
 8005b24:	9a06      	ldr	r2, [sp, #24]
 8005b26:	2a47      	cmp	r2, #71	; 0x47
 8005b28:	d1be      	bne.n	8005aa8 <_printf_float+0x100>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1bc      	bne.n	8005aa8 <_printf_float+0x100>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7b9      	b.n	8005aa6 <_printf_float+0xfe>
 8005b32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b36:	d118      	bne.n	8005b6a <_printf_float+0x1c2>
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	dd0b      	ble.n	8005b56 <_printf_float+0x1ae>
 8005b3e:	6121      	str	r1, [r4, #16]
 8005b40:	b913      	cbnz	r3, 8005b48 <_printf_float+0x1a0>
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	07d0      	lsls	r0, r2, #31
 8005b46:	d502      	bpl.n	8005b4e <_printf_float+0x1a6>
 8005b48:	3301      	adds	r3, #1
 8005b4a:	440b      	add	r3, r1
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b50:	f04f 0900 	mov.w	r9, #0
 8005b54:	e7de      	b.n	8005b14 <_printf_float+0x16c>
 8005b56:	b913      	cbnz	r3, 8005b5e <_printf_float+0x1b6>
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	07d2      	lsls	r2, r2, #31
 8005b5c:	d501      	bpl.n	8005b62 <_printf_float+0x1ba>
 8005b5e:	3302      	adds	r3, #2
 8005b60:	e7f4      	b.n	8005b4c <_printf_float+0x1a4>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e7f2      	b.n	8005b4c <_printf_float+0x1a4>
 8005b66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	db05      	blt.n	8005b7c <_printf_float+0x1d4>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	6121      	str	r1, [r4, #16]
 8005b74:	07d8      	lsls	r0, r3, #31
 8005b76:	d5ea      	bpl.n	8005b4e <_printf_float+0x1a6>
 8005b78:	1c4b      	adds	r3, r1, #1
 8005b7a:	e7e7      	b.n	8005b4c <_printf_float+0x1a4>
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	bfd4      	ite	le
 8005b80:	f1c1 0202 	rsble	r2, r1, #2
 8005b84:	2201      	movgt	r2, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	e7e0      	b.n	8005b4c <_printf_float+0x1a4>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	055a      	lsls	r2, r3, #21
 8005b8e:	d407      	bmi.n	8005ba0 <_printf_float+0x1f8>
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	4642      	mov	r2, r8
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d12c      	bne.n	8005bf8 <_printf_float+0x250>
 8005b9e:	e764      	b.n	8005a6a <_printf_float+0xc2>
 8005ba0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ba4:	f240 80e0 	bls.w	8005d68 <_printf_float+0x3c0>
 8005ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bac:	2200      	movs	r2, #0
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f7fa ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d034      	beq.n	8005c22 <_printf_float+0x27a>
 8005bb8:	4a37      	ldr	r2, [pc, #220]	; (8005c98 <_printf_float+0x2f0>)
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f af51 	beq.w	8005a6a <_printf_float+0xc2>
 8005bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	db02      	blt.n	8005bd6 <_printf_float+0x22e>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07d8      	lsls	r0, r3, #31
 8005bd4:	d510      	bpl.n	8005bf8 <_printf_float+0x250>
 8005bd6:	ee18 3a10 	vmov	r3, s16
 8005bda:	4652      	mov	r2, sl
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af41 	beq.w	8005a6a <_printf_float+0xc2>
 8005be8:	f04f 0800 	mov.w	r8, #0
 8005bec:	f104 091a 	add.w	r9, r4, #26
 8005bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	4543      	cmp	r3, r8
 8005bf6:	dc09      	bgt.n	8005c0c <_printf_float+0x264>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	079b      	lsls	r3, r3, #30
 8005bfc:	f100 8105 	bmi.w	8005e0a <_printf_float+0x462>
 8005c00:	68e0      	ldr	r0, [r4, #12]
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	4298      	cmp	r0, r3
 8005c06:	bfb8      	it	lt
 8005c08:	4618      	movlt	r0, r3
 8005c0a:	e730      	b.n	8005a6e <_printf_float+0xc6>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	464a      	mov	r2, r9
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f af27 	beq.w	8005a6a <_printf_float+0xc2>
 8005c1c:	f108 0801 	add.w	r8, r8, #1
 8005c20:	e7e6      	b.n	8005bf0 <_printf_float+0x248>
 8005c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	dc39      	bgt.n	8005c9c <_printf_float+0x2f4>
 8005c28:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <_printf_float+0x2f0>)
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f af19 	beq.w	8005a6a <_printf_float+0xc2>
 8005c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	d102      	bne.n	8005c46 <_printf_float+0x29e>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	d5d8      	bpl.n	8005bf8 <_printf_float+0x250>
 8005c46:	ee18 3a10 	vmov	r3, s16
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f af09 	beq.w	8005a6a <_printf_float+0xc2>
 8005c58:	f04f 0900 	mov.w	r9, #0
 8005c5c:	f104 0a1a 	add.w	sl, r4, #26
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	425b      	negs	r3, r3
 8005c64:	454b      	cmp	r3, r9
 8005c66:	dc01      	bgt.n	8005c6c <_printf_float+0x2c4>
 8005c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6a:	e792      	b.n	8005b92 <_printf_float+0x1ea>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f aef7 	beq.w	8005a6a <_printf_float+0xc2>
 8005c7c:	f109 0901 	add.w	r9, r9, #1
 8005c80:	e7ee      	b.n	8005c60 <_printf_float+0x2b8>
 8005c82:	bf00      	nop
 8005c84:	7fefffff 	.word	0x7fefffff
 8005c88:	0800a1a0 	.word	0x0800a1a0
 8005c8c:	0800a1a4 	.word	0x0800a1a4
 8005c90:	0800a1ac 	.word	0x0800a1ac
 8005c94:	0800a1a8 	.word	0x0800a1a8
 8005c98:	0800a1b0 	.word	0x0800a1b0
 8005c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	bfa8      	it	ge
 8005ca4:	461a      	movge	r2, r3
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	4691      	mov	r9, r2
 8005caa:	dc37      	bgt.n	8005d1c <_printf_float+0x374>
 8005cac:	f04f 0b00 	mov.w	fp, #0
 8005cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb4:	f104 021a 	add.w	r2, r4, #26
 8005cb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	eba3 0309 	sub.w	r3, r3, r9
 8005cc0:	455b      	cmp	r3, fp
 8005cc2:	dc33      	bgt.n	8005d2c <_printf_float+0x384>
 8005cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	db3b      	blt.n	8005d44 <_printf_float+0x39c>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07da      	lsls	r2, r3, #31
 8005cd0:	d438      	bmi.n	8005d44 <_printf_float+0x39c>
 8005cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd4:	9a05      	ldr	r2, [sp, #20]
 8005cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cd8:	1a9a      	subs	r2, r3, r2
 8005cda:	eba3 0901 	sub.w	r9, r3, r1
 8005cde:	4591      	cmp	r9, r2
 8005ce0:	bfa8      	it	ge
 8005ce2:	4691      	movge	r9, r2
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	dc35      	bgt.n	8005d56 <_printf_float+0x3ae>
 8005cea:	f04f 0800 	mov.w	r8, #0
 8005cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf2:	f104 0a1a 	add.w	sl, r4, #26
 8005cf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	eba3 0309 	sub.w	r3, r3, r9
 8005d00:	4543      	cmp	r3, r8
 8005d02:	f77f af79 	ble.w	8005bf8 <_printf_float+0x250>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f aeaa 	beq.w	8005a6a <_printf_float+0xc2>
 8005d16:	f108 0801 	add.w	r8, r8, #1
 8005d1a:	e7ec      	b.n	8005cf6 <_printf_float+0x34e>
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4642      	mov	r2, r8
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	d1c0      	bne.n	8005cac <_printf_float+0x304>
 8005d2a:	e69e      	b.n	8005a6a <_printf_float+0xc2>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	9205      	str	r2, [sp, #20]
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f ae97 	beq.w	8005a6a <_printf_float+0xc2>
 8005d3c:	9a05      	ldr	r2, [sp, #20]
 8005d3e:	f10b 0b01 	add.w	fp, fp, #1
 8005d42:	e7b9      	b.n	8005cb8 <_printf_float+0x310>
 8005d44:	ee18 3a10 	vmov	r3, s16
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	d1be      	bne.n	8005cd2 <_printf_float+0x32a>
 8005d54:	e689      	b.n	8005a6a <_printf_float+0xc2>
 8005d56:	9a05      	ldr	r2, [sp, #20]
 8005d58:	464b      	mov	r3, r9
 8005d5a:	4442      	add	r2, r8
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	d1c1      	bne.n	8005cea <_printf_float+0x342>
 8005d66:	e680      	b.n	8005a6a <_printf_float+0xc2>
 8005d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d6a:	2a01      	cmp	r2, #1
 8005d6c:	dc01      	bgt.n	8005d72 <_printf_float+0x3ca>
 8005d6e:	07db      	lsls	r3, r3, #31
 8005d70:	d538      	bpl.n	8005de4 <_printf_float+0x43c>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4642      	mov	r2, r8
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f ae74 	beq.w	8005a6a <_printf_float+0xc2>
 8005d82:	ee18 3a10 	vmov	r3, s16
 8005d86:	4652      	mov	r2, sl
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f ae6b 	beq.w	8005a6a <_printf_float+0xc2>
 8005d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f7fa fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da0:	b9d8      	cbnz	r0, 8005dda <_printf_float+0x432>
 8005da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da4:	f108 0201 	add.w	r2, r8, #1
 8005da8:	3b01      	subs	r3, #1
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	d10e      	bne.n	8005dd2 <_printf_float+0x42a>
 8005db4:	e659      	b.n	8005a6a <_printf_float+0xc2>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae52 	beq.w	8005a6a <_printf_float+0xc2>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4543      	cmp	r3, r8
 8005dd0:	dcf1      	bgt.n	8005db6 <_printf_float+0x40e>
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005dd8:	e6dc      	b.n	8005b94 <_printf_float+0x1ec>
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	f104 0a1a 	add.w	sl, r4, #26
 8005de2:	e7f2      	b.n	8005dca <_printf_float+0x422>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4642      	mov	r2, r8
 8005de8:	e7df      	b.n	8005daa <_printf_float+0x402>
 8005dea:	2301      	movs	r3, #1
 8005dec:	464a      	mov	r2, r9
 8005dee:	4631      	mov	r1, r6
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b8      	blx	r7
 8005df4:	3001      	adds	r0, #1
 8005df6:	f43f ae38 	beq.w	8005a6a <_printf_float+0xc2>
 8005dfa:	f108 0801 	add.w	r8, r8, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	4543      	cmp	r3, r8
 8005e06:	dcf0      	bgt.n	8005dea <_printf_float+0x442>
 8005e08:	e6fa      	b.n	8005c00 <_printf_float+0x258>
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	f104 0919 	add.w	r9, r4, #25
 8005e12:	e7f4      	b.n	8005dfe <_printf_float+0x456>

08005e14 <_printf_common>:
 8005e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	4616      	mov	r6, r2
 8005e1a:	4699      	mov	r9, r3
 8005e1c:	688a      	ldr	r2, [r1, #8]
 8005e1e:	690b      	ldr	r3, [r1, #16]
 8005e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	bfb8      	it	lt
 8005e28:	4613      	movlt	r3, r2
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e30:	4607      	mov	r7, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	b10a      	cbz	r2, 8005e3a <_printf_common+0x26>
 8005e36:	3301      	adds	r3, #1
 8005e38:	6033      	str	r3, [r6, #0]
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	0699      	lsls	r1, r3, #26
 8005e3e:	bf42      	ittt	mi
 8005e40:	6833      	ldrmi	r3, [r6, #0]
 8005e42:	3302      	addmi	r3, #2
 8005e44:	6033      	strmi	r3, [r6, #0]
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	f015 0506 	ands.w	r5, r5, #6
 8005e4c:	d106      	bne.n	8005e5c <_printf_common+0x48>
 8005e4e:	f104 0a19 	add.w	sl, r4, #25
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	6832      	ldr	r2, [r6, #0]
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	42ab      	cmp	r3, r5
 8005e5a:	dc26      	bgt.n	8005eaa <_printf_common+0x96>
 8005e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e60:	1e13      	subs	r3, r2, #0
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	bf18      	it	ne
 8005e66:	2301      	movne	r3, #1
 8005e68:	0692      	lsls	r2, r2, #26
 8005e6a:	d42b      	bmi.n	8005ec4 <_printf_common+0xb0>
 8005e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e70:	4649      	mov	r1, r9
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c0      	blx	r8
 8005e76:	3001      	adds	r0, #1
 8005e78:	d01e      	beq.n	8005eb8 <_printf_common+0xa4>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	68e5      	ldr	r5, [r4, #12]
 8005e7e:	6832      	ldr	r2, [r6, #0]
 8005e80:	f003 0306 	and.w	r3, r3, #6
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	bf08      	it	eq
 8005e88:	1aad      	subeq	r5, r5, r2
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	6922      	ldr	r2, [r4, #16]
 8005e8e:	bf0c      	ite	eq
 8005e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e94:	2500      	movne	r5, #0
 8005e96:	4293      	cmp	r3, r2
 8005e98:	bfc4      	itt	gt
 8005e9a:	1a9b      	subgt	r3, r3, r2
 8005e9c:	18ed      	addgt	r5, r5, r3
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	341a      	adds	r4, #26
 8005ea2:	42b5      	cmp	r5, r6
 8005ea4:	d11a      	bne.n	8005edc <_printf_common+0xc8>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e008      	b.n	8005ebc <_printf_common+0xa8>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4652      	mov	r2, sl
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	47c0      	blx	r8
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d103      	bne.n	8005ec0 <_printf_common+0xac>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	e7c6      	b.n	8005e52 <_printf_common+0x3e>
 8005ec4:	18e1      	adds	r1, r4, r3
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	2030      	movs	r0, #48	; 0x30
 8005eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ece:	4422      	add	r2, r4
 8005ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed8:	3302      	adds	r3, #2
 8005eda:	e7c7      	b.n	8005e6c <_printf_common+0x58>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4622      	mov	r2, r4
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	47c0      	blx	r8
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0e6      	beq.n	8005eb8 <_printf_common+0xa4>
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7d9      	b.n	8005ea2 <_printf_common+0x8e>
	...

08005ef0 <_printf_i>:
 8005ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	7e0f      	ldrb	r7, [r1, #24]
 8005ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ef8:	2f78      	cmp	r7, #120	; 0x78
 8005efa:	4691      	mov	r9, r2
 8005efc:	4680      	mov	r8, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	469a      	mov	sl, r3
 8005f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f06:	d807      	bhi.n	8005f18 <_printf_i+0x28>
 8005f08:	2f62      	cmp	r7, #98	; 0x62
 8005f0a:	d80a      	bhi.n	8005f22 <_printf_i+0x32>
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	f000 80d8 	beq.w	80060c2 <_printf_i+0x1d2>
 8005f12:	2f58      	cmp	r7, #88	; 0x58
 8005f14:	f000 80a3 	beq.w	800605e <_printf_i+0x16e>
 8005f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f20:	e03a      	b.n	8005f98 <_printf_i+0xa8>
 8005f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f26:	2b15      	cmp	r3, #21
 8005f28:	d8f6      	bhi.n	8005f18 <_printf_i+0x28>
 8005f2a:	a101      	add	r1, pc, #4	; (adr r1, 8005f30 <_printf_i+0x40>)
 8005f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f30:	08005f89 	.word	0x08005f89
 8005f34:	08005f9d 	.word	0x08005f9d
 8005f38:	08005f19 	.word	0x08005f19
 8005f3c:	08005f19 	.word	0x08005f19
 8005f40:	08005f19 	.word	0x08005f19
 8005f44:	08005f19 	.word	0x08005f19
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005f19 	.word	0x08005f19
 8005f50:	08005f19 	.word	0x08005f19
 8005f54:	08005f19 	.word	0x08005f19
 8005f58:	08005f19 	.word	0x08005f19
 8005f5c:	080060a9 	.word	0x080060a9
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	0800608b 	.word	0x0800608b
 8005f68:	08005f19 	.word	0x08005f19
 8005f6c:	08005f19 	.word	0x08005f19
 8005f70:	080060cb 	.word	0x080060cb
 8005f74:	08005f19 	.word	0x08005f19
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005f19 	.word	0x08005f19
 8005f80:	08005f19 	.word	0x08005f19
 8005f84:	08006093 	.word	0x08006093
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	602a      	str	r2, [r5, #0]
 8005f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0a3      	b.n	80060e4 <_printf_i+0x1f4>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	6829      	ldr	r1, [r5, #0]
 8005fa0:	0606      	lsls	r6, r0, #24
 8005fa2:	f101 0304 	add.w	r3, r1, #4
 8005fa6:	d50a      	bpl.n	8005fbe <_printf_i+0xce>
 8005fa8:	680e      	ldr	r6, [r1, #0]
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	da03      	bge.n	8005fb8 <_printf_i+0xc8>
 8005fb0:	232d      	movs	r3, #45	; 0x2d
 8005fb2:	4276      	negs	r6, r6
 8005fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb8:	485e      	ldr	r0, [pc, #376]	; (8006134 <_printf_i+0x244>)
 8005fba:	230a      	movs	r3, #10
 8005fbc:	e019      	b.n	8005ff2 <_printf_i+0x102>
 8005fbe:	680e      	ldr	r6, [r1, #0]
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fc6:	bf18      	it	ne
 8005fc8:	b236      	sxthne	r6, r6
 8005fca:	e7ef      	b.n	8005fac <_printf_i+0xbc>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	6820      	ldr	r0, [r4, #0]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	6029      	str	r1, [r5, #0]
 8005fd4:	0601      	lsls	r1, r0, #24
 8005fd6:	d501      	bpl.n	8005fdc <_printf_i+0xec>
 8005fd8:	681e      	ldr	r6, [r3, #0]
 8005fda:	e002      	b.n	8005fe2 <_printf_i+0xf2>
 8005fdc:	0646      	lsls	r6, r0, #25
 8005fde:	d5fb      	bpl.n	8005fd8 <_printf_i+0xe8>
 8005fe0:	881e      	ldrh	r6, [r3, #0]
 8005fe2:	4854      	ldr	r0, [pc, #336]	; (8006134 <_printf_i+0x244>)
 8005fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2308      	moveq	r3, #8
 8005fea:	230a      	movne	r3, #10
 8005fec:	2100      	movs	r1, #0
 8005fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ff2:	6865      	ldr	r5, [r4, #4]
 8005ff4:	60a5      	str	r5, [r4, #8]
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	bfa2      	ittt	ge
 8005ffa:	6821      	ldrge	r1, [r4, #0]
 8005ffc:	f021 0104 	bicge.w	r1, r1, #4
 8006000:	6021      	strge	r1, [r4, #0]
 8006002:	b90e      	cbnz	r6, 8006008 <_printf_i+0x118>
 8006004:	2d00      	cmp	r5, #0
 8006006:	d04d      	beq.n	80060a4 <_printf_i+0x1b4>
 8006008:	4615      	mov	r5, r2
 800600a:	fbb6 f1f3 	udiv	r1, r6, r3
 800600e:	fb03 6711 	mls	r7, r3, r1, r6
 8006012:	5dc7      	ldrb	r7, [r0, r7]
 8006014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006018:	4637      	mov	r7, r6
 800601a:	42bb      	cmp	r3, r7
 800601c:	460e      	mov	r6, r1
 800601e:	d9f4      	bls.n	800600a <_printf_i+0x11a>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d10b      	bne.n	800603c <_printf_i+0x14c>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07de      	lsls	r6, r3, #31
 8006028:	d508      	bpl.n	800603c <_printf_i+0x14c>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	6861      	ldr	r1, [r4, #4]
 800602e:	4299      	cmp	r1, r3
 8006030:	bfde      	ittt	le
 8006032:	2330      	movle	r3, #48	; 0x30
 8006034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006038:	f105 35ff 	addle.w	r5, r5, #4294967295
 800603c:	1b52      	subs	r2, r2, r5
 800603e:	6122      	str	r2, [r4, #16]
 8006040:	f8cd a000 	str.w	sl, [sp]
 8006044:	464b      	mov	r3, r9
 8006046:	aa03      	add	r2, sp, #12
 8006048:	4621      	mov	r1, r4
 800604a:	4640      	mov	r0, r8
 800604c:	f7ff fee2 	bl	8005e14 <_printf_common>
 8006050:	3001      	adds	r0, #1
 8006052:	d14c      	bne.n	80060ee <_printf_i+0x1fe>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	b004      	add	sp, #16
 800605a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605e:	4835      	ldr	r0, [pc, #212]	; (8006134 <_printf_i+0x244>)
 8006060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006064:	6829      	ldr	r1, [r5, #0]
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f851 6b04 	ldr.w	r6, [r1], #4
 800606c:	6029      	str	r1, [r5, #0]
 800606e:	061d      	lsls	r5, r3, #24
 8006070:	d514      	bpl.n	800609c <_printf_i+0x1ac>
 8006072:	07df      	lsls	r7, r3, #31
 8006074:	bf44      	itt	mi
 8006076:	f043 0320 	orrmi.w	r3, r3, #32
 800607a:	6023      	strmi	r3, [r4, #0]
 800607c:	b91e      	cbnz	r6, 8006086 <_printf_i+0x196>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	f023 0320 	bic.w	r3, r3, #32
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	2310      	movs	r3, #16
 8006088:	e7b0      	b.n	8005fec <_printf_i+0xfc>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f043 0320 	orr.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	2378      	movs	r3, #120	; 0x78
 8006094:	4828      	ldr	r0, [pc, #160]	; (8006138 <_printf_i+0x248>)
 8006096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800609a:	e7e3      	b.n	8006064 <_printf_i+0x174>
 800609c:	0659      	lsls	r1, r3, #25
 800609e:	bf48      	it	mi
 80060a0:	b2b6      	uxthmi	r6, r6
 80060a2:	e7e6      	b.n	8006072 <_printf_i+0x182>
 80060a4:	4615      	mov	r5, r2
 80060a6:	e7bb      	b.n	8006020 <_printf_i+0x130>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	6826      	ldr	r6, [r4, #0]
 80060ac:	6961      	ldr	r1, [r4, #20]
 80060ae:	1d18      	adds	r0, r3, #4
 80060b0:	6028      	str	r0, [r5, #0]
 80060b2:	0635      	lsls	r5, r6, #24
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0x1cc>
 80060b8:	6019      	str	r1, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <_printf_i+0x1d2>
 80060bc:	0670      	lsls	r0, r6, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0x1c8>
 80060c0:	8019      	strh	r1, [r3, #0]
 80060c2:	2300      	movs	r3, #0
 80060c4:	6123      	str	r3, [r4, #16]
 80060c6:	4615      	mov	r5, r2
 80060c8:	e7ba      	b.n	8006040 <_printf_i+0x150>
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	1d1a      	adds	r2, r3, #4
 80060ce:	602a      	str	r2, [r5, #0]
 80060d0:	681d      	ldr	r5, [r3, #0]
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	2100      	movs	r1, #0
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7fa f882 	bl	80001e0 <memchr>
 80060dc:	b108      	cbz	r0, 80060e2 <_printf_i+0x1f2>
 80060de:	1b40      	subs	r0, r0, r5
 80060e0:	6060      	str	r0, [r4, #4]
 80060e2:	6863      	ldr	r3, [r4, #4]
 80060e4:	6123      	str	r3, [r4, #16]
 80060e6:	2300      	movs	r3, #0
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ec:	e7a8      	b.n	8006040 <_printf_i+0x150>
 80060ee:	6923      	ldr	r3, [r4, #16]
 80060f0:	462a      	mov	r2, r5
 80060f2:	4649      	mov	r1, r9
 80060f4:	4640      	mov	r0, r8
 80060f6:	47d0      	blx	sl
 80060f8:	3001      	adds	r0, #1
 80060fa:	d0ab      	beq.n	8006054 <_printf_i+0x164>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	d413      	bmi.n	800612a <_printf_i+0x23a>
 8006102:	68e0      	ldr	r0, [r4, #12]
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	4298      	cmp	r0, r3
 8006108:	bfb8      	it	lt
 800610a:	4618      	movlt	r0, r3
 800610c:	e7a4      	b.n	8006058 <_printf_i+0x168>
 800610e:	2301      	movs	r3, #1
 8006110:	4632      	mov	r2, r6
 8006112:	4649      	mov	r1, r9
 8006114:	4640      	mov	r0, r8
 8006116:	47d0      	blx	sl
 8006118:	3001      	adds	r0, #1
 800611a:	d09b      	beq.n	8006054 <_printf_i+0x164>
 800611c:	3501      	adds	r5, #1
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	9903      	ldr	r1, [sp, #12]
 8006122:	1a5b      	subs	r3, r3, r1
 8006124:	42ab      	cmp	r3, r5
 8006126:	dcf2      	bgt.n	800610e <_printf_i+0x21e>
 8006128:	e7eb      	b.n	8006102 <_printf_i+0x212>
 800612a:	2500      	movs	r5, #0
 800612c:	f104 0619 	add.w	r6, r4, #25
 8006130:	e7f5      	b.n	800611e <_printf_i+0x22e>
 8006132:	bf00      	nop
 8006134:	0800a1b2 	.word	0x0800a1b2
 8006138:	0800a1c3 	.word	0x0800a1c3

0800613c <_scanf_float>:
 800613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006140:	b087      	sub	sp, #28
 8006142:	4617      	mov	r7, r2
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	688b      	ldr	r3, [r1, #8]
 8006148:	1e5a      	subs	r2, r3, #1
 800614a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800614e:	bf83      	ittte	hi
 8006150:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006154:	195b      	addhi	r3, r3, r5
 8006156:	9302      	strhi	r3, [sp, #8]
 8006158:	2300      	movls	r3, #0
 800615a:	bf86      	itte	hi
 800615c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006160:	608b      	strhi	r3, [r1, #8]
 8006162:	9302      	strls	r3, [sp, #8]
 8006164:	680b      	ldr	r3, [r1, #0]
 8006166:	468b      	mov	fp, r1
 8006168:	2500      	movs	r5, #0
 800616a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800616e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006172:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006176:	4680      	mov	r8, r0
 8006178:	460c      	mov	r4, r1
 800617a:	465e      	mov	r6, fp
 800617c:	46aa      	mov	sl, r5
 800617e:	46a9      	mov	r9, r5
 8006180:	9501      	str	r5, [sp, #4]
 8006182:	68a2      	ldr	r2, [r4, #8]
 8006184:	b152      	cbz	r2, 800619c <_scanf_float+0x60>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b4e      	cmp	r3, #78	; 0x4e
 800618c:	d864      	bhi.n	8006258 <_scanf_float+0x11c>
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d83c      	bhi.n	800620c <_scanf_float+0xd0>
 8006192:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006196:	b2c8      	uxtb	r0, r1
 8006198:	280e      	cmp	r0, #14
 800619a:	d93a      	bls.n	8006212 <_scanf_float+0xd6>
 800619c:	f1b9 0f00 	cmp.w	r9, #0
 80061a0:	d003      	beq.n	80061aa <_scanf_float+0x6e>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061ae:	f1ba 0f01 	cmp.w	sl, #1
 80061b2:	f200 8113 	bhi.w	80063dc <_scanf_float+0x2a0>
 80061b6:	455e      	cmp	r6, fp
 80061b8:	f200 8105 	bhi.w	80063c6 <_scanf_float+0x28a>
 80061bc:	2501      	movs	r5, #1
 80061be:	4628      	mov	r0, r5
 80061c0:	b007      	add	sp, #28
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061ca:	2a0d      	cmp	r2, #13
 80061cc:	d8e6      	bhi.n	800619c <_scanf_float+0x60>
 80061ce:	a101      	add	r1, pc, #4	; (adr r1, 80061d4 <_scanf_float+0x98>)
 80061d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061d4:	08006313 	.word	0x08006313
 80061d8:	0800619d 	.word	0x0800619d
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	0800619d 	.word	0x0800619d
 80061e4:	08006373 	.word	0x08006373
 80061e8:	0800634b 	.word	0x0800634b
 80061ec:	0800619d 	.word	0x0800619d
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	08006321 	.word	0x08006321
 80061f8:	0800619d 	.word	0x0800619d
 80061fc:	0800619d 	.word	0x0800619d
 8006200:	0800619d 	.word	0x0800619d
 8006204:	0800619d 	.word	0x0800619d
 8006208:	080062d9 	.word	0x080062d9
 800620c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006210:	e7db      	b.n	80061ca <_scanf_float+0x8e>
 8006212:	290e      	cmp	r1, #14
 8006214:	d8c2      	bhi.n	800619c <_scanf_float+0x60>
 8006216:	a001      	add	r0, pc, #4	; (adr r0, 800621c <_scanf_float+0xe0>)
 8006218:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800621c:	080062cb 	.word	0x080062cb
 8006220:	0800619d 	.word	0x0800619d
 8006224:	080062cb 	.word	0x080062cb
 8006228:	0800635f 	.word	0x0800635f
 800622c:	0800619d 	.word	0x0800619d
 8006230:	08006279 	.word	0x08006279
 8006234:	080062b5 	.word	0x080062b5
 8006238:	080062b5 	.word	0x080062b5
 800623c:	080062b5 	.word	0x080062b5
 8006240:	080062b5 	.word	0x080062b5
 8006244:	080062b5 	.word	0x080062b5
 8006248:	080062b5 	.word	0x080062b5
 800624c:	080062b5 	.word	0x080062b5
 8006250:	080062b5 	.word	0x080062b5
 8006254:	080062b5 	.word	0x080062b5
 8006258:	2b6e      	cmp	r3, #110	; 0x6e
 800625a:	d809      	bhi.n	8006270 <_scanf_float+0x134>
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d8b2      	bhi.n	80061c6 <_scanf_float+0x8a>
 8006260:	2b54      	cmp	r3, #84	; 0x54
 8006262:	d077      	beq.n	8006354 <_scanf_float+0x218>
 8006264:	2b59      	cmp	r3, #89	; 0x59
 8006266:	d199      	bne.n	800619c <_scanf_float+0x60>
 8006268:	2d07      	cmp	r5, #7
 800626a:	d197      	bne.n	800619c <_scanf_float+0x60>
 800626c:	2508      	movs	r5, #8
 800626e:	e029      	b.n	80062c4 <_scanf_float+0x188>
 8006270:	2b74      	cmp	r3, #116	; 0x74
 8006272:	d06f      	beq.n	8006354 <_scanf_float+0x218>
 8006274:	2b79      	cmp	r3, #121	; 0x79
 8006276:	e7f6      	b.n	8006266 <_scanf_float+0x12a>
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	05c8      	lsls	r0, r1, #23
 800627c:	d51a      	bpl.n	80062b4 <_scanf_float+0x178>
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006284:	6021      	str	r1, [r4, #0]
 8006286:	f109 0901 	add.w	r9, r9, #1
 800628a:	b11b      	cbz	r3, 8006294 <_scanf_float+0x158>
 800628c:	3b01      	subs	r3, #1
 800628e:	3201      	adds	r2, #1
 8006290:	9302      	str	r3, [sp, #8]
 8006292:	60a2      	str	r2, [r4, #8]
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	3b01      	subs	r3, #1
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	3301      	adds	r3, #1
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	f340 8084 	ble.w	80063b4 <_scanf_float+0x278>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	e766      	b.n	8006182 <_scanf_float+0x46>
 80062b4:	eb1a 0f05 	cmn.w	sl, r5
 80062b8:	f47f af70 	bne.w	800619c <_scanf_float+0x60>
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062c2:	6022      	str	r2, [r4, #0]
 80062c4:	f806 3b01 	strb.w	r3, [r6], #1
 80062c8:	e7e4      	b.n	8006294 <_scanf_float+0x158>
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	0610      	lsls	r0, r2, #24
 80062ce:	f57f af65 	bpl.w	800619c <_scanf_float+0x60>
 80062d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d6:	e7f4      	b.n	80062c2 <_scanf_float+0x186>
 80062d8:	f1ba 0f00 	cmp.w	sl, #0
 80062dc:	d10e      	bne.n	80062fc <_scanf_float+0x1c0>
 80062de:	f1b9 0f00 	cmp.w	r9, #0
 80062e2:	d10e      	bne.n	8006302 <_scanf_float+0x1c6>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062ee:	d108      	bne.n	8006302 <_scanf_float+0x1c6>
 80062f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062f4:	6022      	str	r2, [r4, #0]
 80062f6:	f04f 0a01 	mov.w	sl, #1
 80062fa:	e7e3      	b.n	80062c4 <_scanf_float+0x188>
 80062fc:	f1ba 0f02 	cmp.w	sl, #2
 8006300:	d055      	beq.n	80063ae <_scanf_float+0x272>
 8006302:	2d01      	cmp	r5, #1
 8006304:	d002      	beq.n	800630c <_scanf_float+0x1d0>
 8006306:	2d04      	cmp	r5, #4
 8006308:	f47f af48 	bne.w	800619c <_scanf_float+0x60>
 800630c:	3501      	adds	r5, #1
 800630e:	b2ed      	uxtb	r5, r5
 8006310:	e7d8      	b.n	80062c4 <_scanf_float+0x188>
 8006312:	f1ba 0f01 	cmp.w	sl, #1
 8006316:	f47f af41 	bne.w	800619c <_scanf_float+0x60>
 800631a:	f04f 0a02 	mov.w	sl, #2
 800631e:	e7d1      	b.n	80062c4 <_scanf_float+0x188>
 8006320:	b97d      	cbnz	r5, 8006342 <_scanf_float+0x206>
 8006322:	f1b9 0f00 	cmp.w	r9, #0
 8006326:	f47f af3c 	bne.w	80061a2 <_scanf_float+0x66>
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006330:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006334:	f47f af39 	bne.w	80061aa <_scanf_float+0x6e>
 8006338:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	2501      	movs	r5, #1
 8006340:	e7c0      	b.n	80062c4 <_scanf_float+0x188>
 8006342:	2d03      	cmp	r5, #3
 8006344:	d0e2      	beq.n	800630c <_scanf_float+0x1d0>
 8006346:	2d05      	cmp	r5, #5
 8006348:	e7de      	b.n	8006308 <_scanf_float+0x1cc>
 800634a:	2d02      	cmp	r5, #2
 800634c:	f47f af26 	bne.w	800619c <_scanf_float+0x60>
 8006350:	2503      	movs	r5, #3
 8006352:	e7b7      	b.n	80062c4 <_scanf_float+0x188>
 8006354:	2d06      	cmp	r5, #6
 8006356:	f47f af21 	bne.w	800619c <_scanf_float+0x60>
 800635a:	2507      	movs	r5, #7
 800635c:	e7b2      	b.n	80062c4 <_scanf_float+0x188>
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	0591      	lsls	r1, r2, #22
 8006362:	f57f af1b 	bpl.w	800619c <_scanf_float+0x60>
 8006366:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800636a:	6022      	str	r2, [r4, #0]
 800636c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006370:	e7a8      	b.n	80062c4 <_scanf_float+0x188>
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006378:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800637c:	d006      	beq.n	800638c <_scanf_float+0x250>
 800637e:	0550      	lsls	r0, r2, #21
 8006380:	f57f af0c 	bpl.w	800619c <_scanf_float+0x60>
 8006384:	f1b9 0f00 	cmp.w	r9, #0
 8006388:	f43f af0f 	beq.w	80061aa <_scanf_float+0x6e>
 800638c:	0591      	lsls	r1, r2, #22
 800638e:	bf58      	it	pl
 8006390:	9901      	ldrpl	r1, [sp, #4]
 8006392:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006396:	bf58      	it	pl
 8006398:	eba9 0101 	subpl.w	r1, r9, r1
 800639c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063a0:	bf58      	it	pl
 80063a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063a6:	6022      	str	r2, [r4, #0]
 80063a8:	f04f 0900 	mov.w	r9, #0
 80063ac:	e78a      	b.n	80062c4 <_scanf_float+0x188>
 80063ae:	f04f 0a03 	mov.w	sl, #3
 80063b2:	e787      	b.n	80062c4 <_scanf_float+0x188>
 80063b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063b8:	4639      	mov	r1, r7
 80063ba:	4640      	mov	r0, r8
 80063bc:	4798      	blx	r3
 80063be:	2800      	cmp	r0, #0
 80063c0:	f43f aedf 	beq.w	8006182 <_scanf_float+0x46>
 80063c4:	e6ea      	b.n	800619c <_scanf_float+0x60>
 80063c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ce:	463a      	mov	r2, r7
 80063d0:	4640      	mov	r0, r8
 80063d2:	4798      	blx	r3
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	e6ec      	b.n	80061b6 <_scanf_float+0x7a>
 80063dc:	1e6b      	subs	r3, r5, #1
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d825      	bhi.n	800642e <_scanf_float+0x2f2>
 80063e2:	2d02      	cmp	r5, #2
 80063e4:	d836      	bhi.n	8006454 <_scanf_float+0x318>
 80063e6:	455e      	cmp	r6, fp
 80063e8:	f67f aee8 	bls.w	80061bc <_scanf_float+0x80>
 80063ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063f4:	463a      	mov	r2, r7
 80063f6:	4640      	mov	r0, r8
 80063f8:	4798      	blx	r3
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	e7f1      	b.n	80063e6 <_scanf_float+0x2aa>
 8006402:	9802      	ldr	r0, [sp, #8]
 8006404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006408:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800640c:	9002      	str	r0, [sp, #8]
 800640e:	463a      	mov	r2, r7
 8006410:	4640      	mov	r0, r8
 8006412:	4798      	blx	r3
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	3b01      	subs	r3, #1
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641e:	fa5f fa8a 	uxtb.w	sl, sl
 8006422:	f1ba 0f02 	cmp.w	sl, #2
 8006426:	d1ec      	bne.n	8006402 <_scanf_float+0x2c6>
 8006428:	3d03      	subs	r5, #3
 800642a:	b2ed      	uxtb	r5, r5
 800642c:	1b76      	subs	r6, r6, r5
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	05da      	lsls	r2, r3, #23
 8006432:	d52f      	bpl.n	8006494 <_scanf_float+0x358>
 8006434:	055b      	lsls	r3, r3, #21
 8006436:	d510      	bpl.n	800645a <_scanf_float+0x31e>
 8006438:	455e      	cmp	r6, fp
 800643a:	f67f aebf 	bls.w	80061bc <_scanf_float+0x80>
 800643e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006446:	463a      	mov	r2, r7
 8006448:	4640      	mov	r0, r8
 800644a:	4798      	blx	r3
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	3b01      	subs	r3, #1
 8006450:	6123      	str	r3, [r4, #16]
 8006452:	e7f1      	b.n	8006438 <_scanf_float+0x2fc>
 8006454:	46aa      	mov	sl, r5
 8006456:	9602      	str	r6, [sp, #8]
 8006458:	e7df      	b.n	800641a <_scanf_float+0x2de>
 800645a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	2965      	cmp	r1, #101	; 0x65
 8006462:	f103 33ff 	add.w	r3, r3, #4294967295
 8006466:	f106 35ff 	add.w	r5, r6, #4294967295
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	d00c      	beq.n	8006488 <_scanf_float+0x34c>
 800646e:	2945      	cmp	r1, #69	; 0x45
 8006470:	d00a      	beq.n	8006488 <_scanf_float+0x34c>
 8006472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006476:	463a      	mov	r2, r7
 8006478:	4640      	mov	r0, r8
 800647a:	4798      	blx	r3
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006482:	3b01      	subs	r3, #1
 8006484:	1eb5      	subs	r5, r6, #2
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800648c:	463a      	mov	r2, r7
 800648e:	4640      	mov	r0, r8
 8006490:	4798      	blx	r3
 8006492:	462e      	mov	r6, r5
 8006494:	6825      	ldr	r5, [r4, #0]
 8006496:	f015 0510 	ands.w	r5, r5, #16
 800649a:	d159      	bne.n	8006550 <_scanf_float+0x414>
 800649c:	7035      	strb	r5, [r6, #0]
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d11b      	bne.n	80064e2 <_scanf_float+0x3a6>
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	454b      	cmp	r3, r9
 80064ae:	eba3 0209 	sub.w	r2, r3, r9
 80064b2:	d123      	bne.n	80064fc <_scanf_float+0x3c0>
 80064b4:	2200      	movs	r2, #0
 80064b6:	4659      	mov	r1, fp
 80064b8:	4640      	mov	r0, r8
 80064ba:	f000 fe97 	bl	80071ec <_strtod_r>
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	f012 0f02 	tst.w	r2, #2
 80064c6:	ec57 6b10 	vmov	r6, r7, d0
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	d021      	beq.n	8006512 <_scanf_float+0x3d6>
 80064ce:	9903      	ldr	r1, [sp, #12]
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	600a      	str	r2, [r1, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	e9c3 6700 	strd	r6, r7, [r3]
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60e3      	str	r3, [r4, #12]
 80064e0:	e66d      	b.n	80061be <_scanf_float+0x82>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0e5      	beq.n	80064b4 <_scanf_float+0x378>
 80064e8:	9905      	ldr	r1, [sp, #20]
 80064ea:	230a      	movs	r3, #10
 80064ec:	462a      	mov	r2, r5
 80064ee:	3101      	adds	r1, #1
 80064f0:	4640      	mov	r0, r8
 80064f2:	f000 ff03 	bl	80072fc <_strtol_r>
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	9e05      	ldr	r6, [sp, #20]
 80064fa:	1ac2      	subs	r2, r0, r3
 80064fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006500:	429e      	cmp	r6, r3
 8006502:	bf28      	it	cs
 8006504:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006508:	4912      	ldr	r1, [pc, #72]	; (8006554 <_scanf_float+0x418>)
 800650a:	4630      	mov	r0, r6
 800650c:	f000 f82c 	bl	8006568 <siprintf>
 8006510:	e7d0      	b.n	80064b4 <_scanf_float+0x378>
 8006512:	9903      	ldr	r1, [sp, #12]
 8006514:	f012 0f04 	tst.w	r2, #4
 8006518:	f103 0204 	add.w	r2, r3, #4
 800651c:	600a      	str	r2, [r1, #0]
 800651e:	d1d9      	bne.n	80064d4 <_scanf_float+0x398>
 8006520:	f8d3 8000 	ldr.w	r8, [r3]
 8006524:	ee10 2a10 	vmov	r2, s0
 8006528:	ee10 0a10 	vmov	r0, s0
 800652c:	463b      	mov	r3, r7
 800652e:	4639      	mov	r1, r7
 8006530:	f7fa fafc 	bl	8000b2c <__aeabi_dcmpun>
 8006534:	b128      	cbz	r0, 8006542 <_scanf_float+0x406>
 8006536:	4808      	ldr	r0, [pc, #32]	; (8006558 <_scanf_float+0x41c>)
 8006538:	f000 f810 	bl	800655c <nanf>
 800653c:	ed88 0a00 	vstr	s0, [r8]
 8006540:	e7cb      	b.n	80064da <_scanf_float+0x39e>
 8006542:	4630      	mov	r0, r6
 8006544:	4639      	mov	r1, r7
 8006546:	f7fa fb4f 	bl	8000be8 <__aeabi_d2f>
 800654a:	f8c8 0000 	str.w	r0, [r8]
 800654e:	e7c4      	b.n	80064da <_scanf_float+0x39e>
 8006550:	2500      	movs	r5, #0
 8006552:	e634      	b.n	80061be <_scanf_float+0x82>
 8006554:	0800a1d4 	.word	0x0800a1d4
 8006558:	0800a5e0 	.word	0x0800a5e0

0800655c <nanf>:
 800655c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006564 <nanf+0x8>
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	7fc00000 	.word	0x7fc00000

08006568 <siprintf>:
 8006568:	b40e      	push	{r1, r2, r3}
 800656a:	b500      	push	{lr}
 800656c:	b09c      	sub	sp, #112	; 0x70
 800656e:	ab1d      	add	r3, sp, #116	; 0x74
 8006570:	9002      	str	r0, [sp, #8]
 8006572:	9006      	str	r0, [sp, #24]
 8006574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <siprintf+0x38>)
 800657a:	9107      	str	r1, [sp, #28]
 800657c:	9104      	str	r1, [sp, #16]
 800657e:	4909      	ldr	r1, [pc, #36]	; (80065a4 <siprintf+0x3c>)
 8006580:	f853 2b04 	ldr.w	r2, [r3], #4
 8006584:	9105      	str	r1, [sp, #20]
 8006586:	6800      	ldr	r0, [r0, #0]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	a902      	add	r1, sp, #8
 800658c:	f002 fee2 	bl	8009354 <_svfiprintf_r>
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	b01c      	add	sp, #112	; 0x70
 8006598:	f85d eb04 	ldr.w	lr, [sp], #4
 800659c:	b003      	add	sp, #12
 800659e:	4770      	bx	lr
 80065a0:	20000050 	.word	0x20000050
 80065a4:	ffff0208 	.word	0xffff0208

080065a8 <sulp>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4604      	mov	r4, r0
 80065ac:	460d      	mov	r5, r1
 80065ae:	ec45 4b10 	vmov	d0, r4, r5
 80065b2:	4616      	mov	r6, r2
 80065b4:	f002 fc2c 	bl	8008e10 <__ulp>
 80065b8:	ec51 0b10 	vmov	r0, r1, d0
 80065bc:	b17e      	cbz	r6, 80065de <sulp+0x36>
 80065be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80065c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dd09      	ble.n	80065de <sulp+0x36>
 80065ca:	051b      	lsls	r3, r3, #20
 80065cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065d0:	2400      	movs	r4, #0
 80065d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	bd70      	pop	{r4, r5, r6, pc}

080065e0 <_strtod_l>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b02 	vpush	{d8}
 80065e8:	b09d      	sub	sp, #116	; 0x74
 80065ea:	461f      	mov	r7, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	9318      	str	r3, [sp, #96]	; 0x60
 80065f0:	4ba2      	ldr	r3, [pc, #648]	; (800687c <_strtod_l+0x29c>)
 80065f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	9305      	str	r3, [sp, #20]
 80065f8:	4604      	mov	r4, r0
 80065fa:	4618      	mov	r0, r3
 80065fc:	4688      	mov	r8, r1
 80065fe:	f7f9 fde7 	bl	80001d0 <strlen>
 8006602:	f04f 0a00 	mov.w	sl, #0
 8006606:	4605      	mov	r5, r0
 8006608:	f04f 0b00 	mov.w	fp, #0
 800660c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	2a2b      	cmp	r2, #43	; 0x2b
 8006616:	d04e      	beq.n	80066b6 <_strtod_l+0xd6>
 8006618:	d83b      	bhi.n	8006692 <_strtod_l+0xb2>
 800661a:	2a0d      	cmp	r2, #13
 800661c:	d834      	bhi.n	8006688 <_strtod_l+0xa8>
 800661e:	2a08      	cmp	r2, #8
 8006620:	d834      	bhi.n	800668c <_strtod_l+0xac>
 8006622:	2a00      	cmp	r2, #0
 8006624:	d03e      	beq.n	80066a4 <_strtod_l+0xc4>
 8006626:	2300      	movs	r3, #0
 8006628:	930a      	str	r3, [sp, #40]	; 0x28
 800662a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800662c:	7833      	ldrb	r3, [r6, #0]
 800662e:	2b30      	cmp	r3, #48	; 0x30
 8006630:	f040 80b0 	bne.w	8006794 <_strtod_l+0x1b4>
 8006634:	7873      	ldrb	r3, [r6, #1]
 8006636:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800663a:	2b58      	cmp	r3, #88	; 0x58
 800663c:	d168      	bne.n	8006710 <_strtod_l+0x130>
 800663e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	ab18      	add	r3, sp, #96	; 0x60
 8006644:	9702      	str	r7, [sp, #8]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	4a8d      	ldr	r2, [pc, #564]	; (8006880 <_strtod_l+0x2a0>)
 800664a:	ab19      	add	r3, sp, #100	; 0x64
 800664c:	a917      	add	r1, sp, #92	; 0x5c
 800664e:	4620      	mov	r0, r4
 8006650:	f001 fd38 	bl	80080c4 <__gethex>
 8006654:	f010 0707 	ands.w	r7, r0, #7
 8006658:	4605      	mov	r5, r0
 800665a:	d005      	beq.n	8006668 <_strtod_l+0x88>
 800665c:	2f06      	cmp	r7, #6
 800665e:	d12c      	bne.n	80066ba <_strtod_l+0xda>
 8006660:	3601      	adds	r6, #1
 8006662:	2300      	movs	r3, #0
 8006664:	9617      	str	r6, [sp, #92]	; 0x5c
 8006666:	930a      	str	r3, [sp, #40]	; 0x28
 8006668:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 8590 	bne.w	8007190 <_strtod_l+0xbb0>
 8006670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006672:	b1eb      	cbz	r3, 80066b0 <_strtod_l+0xd0>
 8006674:	4652      	mov	r2, sl
 8006676:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800667a:	ec43 2b10 	vmov	d0, r2, r3
 800667e:	b01d      	add	sp, #116	; 0x74
 8006680:	ecbd 8b02 	vpop	{d8}
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	2a20      	cmp	r2, #32
 800668a:	d1cc      	bne.n	8006626 <_strtod_l+0x46>
 800668c:	3301      	adds	r3, #1
 800668e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006690:	e7be      	b.n	8006610 <_strtod_l+0x30>
 8006692:	2a2d      	cmp	r2, #45	; 0x2d
 8006694:	d1c7      	bne.n	8006626 <_strtod_l+0x46>
 8006696:	2201      	movs	r2, #1
 8006698:	920a      	str	r2, [sp, #40]	; 0x28
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	9217      	str	r2, [sp, #92]	; 0x5c
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1c2      	bne.n	800662a <_strtod_l+0x4a>
 80066a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 856e 	bne.w	800718c <_strtod_l+0xbac>
 80066b0:	4652      	mov	r2, sl
 80066b2:	465b      	mov	r3, fp
 80066b4:	e7e1      	b.n	800667a <_strtod_l+0x9a>
 80066b6:	2200      	movs	r2, #0
 80066b8:	e7ee      	b.n	8006698 <_strtod_l+0xb8>
 80066ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066bc:	b13a      	cbz	r2, 80066ce <_strtod_l+0xee>
 80066be:	2135      	movs	r1, #53	; 0x35
 80066c0:	a81a      	add	r0, sp, #104	; 0x68
 80066c2:	f002 fcb0 	bl	8009026 <__copybits>
 80066c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066c8:	4620      	mov	r0, r4
 80066ca:	f002 f86f 	bl	80087ac <_Bfree>
 80066ce:	3f01      	subs	r7, #1
 80066d0:	2f04      	cmp	r7, #4
 80066d2:	d806      	bhi.n	80066e2 <_strtod_l+0x102>
 80066d4:	e8df f007 	tbb	[pc, r7]
 80066d8:	1714030a 	.word	0x1714030a
 80066dc:	0a          	.byte	0x0a
 80066dd:	00          	.byte	0x00
 80066de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80066e2:	0728      	lsls	r0, r5, #28
 80066e4:	d5c0      	bpl.n	8006668 <_strtod_l+0x88>
 80066e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80066ea:	e7bd      	b.n	8006668 <_strtod_l+0x88>
 80066ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80066f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80066f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80066fe:	e7f0      	b.n	80066e2 <_strtod_l+0x102>
 8006700:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006884 <_strtod_l+0x2a4>
 8006704:	e7ed      	b.n	80066e2 <_strtod_l+0x102>
 8006706:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800670a:	f04f 3aff 	mov.w	sl, #4294967295
 800670e:	e7e8      	b.n	80066e2 <_strtod_l+0x102>
 8006710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	9217      	str	r2, [sp, #92]	; 0x5c
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d0f9      	beq.n	8006710 <_strtod_l+0x130>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0a3      	beq.n	8006668 <_strtod_l+0x88>
 8006720:	2301      	movs	r3, #1
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	9304      	str	r3, [sp, #16]
 8006728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800672a:	9308      	str	r3, [sp, #32]
 800672c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006730:	464f      	mov	r7, r9
 8006732:	220a      	movs	r2, #10
 8006734:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006736:	7806      	ldrb	r6, [r0, #0]
 8006738:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800673c:	b2d9      	uxtb	r1, r3
 800673e:	2909      	cmp	r1, #9
 8006740:	d92a      	bls.n	8006798 <_strtod_l+0x1b8>
 8006742:	9905      	ldr	r1, [sp, #20]
 8006744:	462a      	mov	r2, r5
 8006746:	f002 ff1f 	bl	8009588 <strncmp>
 800674a:	b398      	cbz	r0, 80067b4 <_strtod_l+0x1d4>
 800674c:	2000      	movs	r0, #0
 800674e:	4632      	mov	r2, r6
 8006750:	463d      	mov	r5, r7
 8006752:	9005      	str	r0, [sp, #20]
 8006754:	4603      	mov	r3, r0
 8006756:	2a65      	cmp	r2, #101	; 0x65
 8006758:	d001      	beq.n	800675e <_strtod_l+0x17e>
 800675a:	2a45      	cmp	r2, #69	; 0x45
 800675c:	d118      	bne.n	8006790 <_strtod_l+0x1b0>
 800675e:	b91d      	cbnz	r5, 8006768 <_strtod_l+0x188>
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	4302      	orrs	r2, r0
 8006764:	d09e      	beq.n	80066a4 <_strtod_l+0xc4>
 8006766:	2500      	movs	r5, #0
 8006768:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800676c:	f108 0201 	add.w	r2, r8, #1
 8006770:	9217      	str	r2, [sp, #92]	; 0x5c
 8006772:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006776:	2a2b      	cmp	r2, #43	; 0x2b
 8006778:	d075      	beq.n	8006866 <_strtod_l+0x286>
 800677a:	2a2d      	cmp	r2, #45	; 0x2d
 800677c:	d07b      	beq.n	8006876 <_strtod_l+0x296>
 800677e:	f04f 0c00 	mov.w	ip, #0
 8006782:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006786:	2909      	cmp	r1, #9
 8006788:	f240 8082 	bls.w	8006890 <_strtod_l+0x2b0>
 800678c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006790:	2600      	movs	r6, #0
 8006792:	e09d      	b.n	80068d0 <_strtod_l+0x2f0>
 8006794:	2300      	movs	r3, #0
 8006796:	e7c4      	b.n	8006722 <_strtod_l+0x142>
 8006798:	2f08      	cmp	r7, #8
 800679a:	bfd8      	it	le
 800679c:	9907      	ldrle	r1, [sp, #28]
 800679e:	f100 0001 	add.w	r0, r0, #1
 80067a2:	bfda      	itte	le
 80067a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80067a8:	9307      	strle	r3, [sp, #28]
 80067aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80067ae:	3701      	adds	r7, #1
 80067b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80067b2:	e7bf      	b.n	8006734 <_strtod_l+0x154>
 80067b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067b6:	195a      	adds	r2, r3, r5
 80067b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067ba:	5d5a      	ldrb	r2, [r3, r5]
 80067bc:	2f00      	cmp	r7, #0
 80067be:	d037      	beq.n	8006830 <_strtod_l+0x250>
 80067c0:	9005      	str	r0, [sp, #20]
 80067c2:	463d      	mov	r5, r7
 80067c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d912      	bls.n	80067f2 <_strtod_l+0x212>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7c2      	b.n	8006756 <_strtod_l+0x176>
 80067d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80067d6:	785a      	ldrb	r2, [r3, #1]
 80067d8:	3001      	adds	r0, #1
 80067da:	2a30      	cmp	r2, #48	; 0x30
 80067dc:	d0f8      	beq.n	80067d0 <_strtod_l+0x1f0>
 80067de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	f200 84d9 	bhi.w	800719a <_strtod_l+0xbba>
 80067e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067ea:	9005      	str	r0, [sp, #20]
 80067ec:	2000      	movs	r0, #0
 80067ee:	9308      	str	r3, [sp, #32]
 80067f0:	4605      	mov	r5, r0
 80067f2:	3a30      	subs	r2, #48	; 0x30
 80067f4:	f100 0301 	add.w	r3, r0, #1
 80067f8:	d014      	beq.n	8006824 <_strtod_l+0x244>
 80067fa:	9905      	ldr	r1, [sp, #20]
 80067fc:	4419      	add	r1, r3
 80067fe:	9105      	str	r1, [sp, #20]
 8006800:	462b      	mov	r3, r5
 8006802:	eb00 0e05 	add.w	lr, r0, r5
 8006806:	210a      	movs	r1, #10
 8006808:	4573      	cmp	r3, lr
 800680a:	d113      	bne.n	8006834 <_strtod_l+0x254>
 800680c:	182b      	adds	r3, r5, r0
 800680e:	2b08      	cmp	r3, #8
 8006810:	f105 0501 	add.w	r5, r5, #1
 8006814:	4405      	add	r5, r0
 8006816:	dc1c      	bgt.n	8006852 <_strtod_l+0x272>
 8006818:	9907      	ldr	r1, [sp, #28]
 800681a:	230a      	movs	r3, #10
 800681c:	fb03 2301 	mla	r3, r3, r1, r2
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	2300      	movs	r3, #0
 8006824:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006826:	1c51      	adds	r1, r2, #1
 8006828:	9117      	str	r1, [sp, #92]	; 0x5c
 800682a:	7852      	ldrb	r2, [r2, #1]
 800682c:	4618      	mov	r0, r3
 800682e:	e7c9      	b.n	80067c4 <_strtod_l+0x1e4>
 8006830:	4638      	mov	r0, r7
 8006832:	e7d2      	b.n	80067da <_strtod_l+0x1fa>
 8006834:	2b08      	cmp	r3, #8
 8006836:	dc04      	bgt.n	8006842 <_strtod_l+0x262>
 8006838:	9e07      	ldr	r6, [sp, #28]
 800683a:	434e      	muls	r6, r1
 800683c:	9607      	str	r6, [sp, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	e7e2      	b.n	8006808 <_strtod_l+0x228>
 8006842:	f103 0c01 	add.w	ip, r3, #1
 8006846:	f1bc 0f10 	cmp.w	ip, #16
 800684a:	bfd8      	it	le
 800684c:	fb01 f909 	mulle.w	r9, r1, r9
 8006850:	e7f5      	b.n	800683e <_strtod_l+0x25e>
 8006852:	2d10      	cmp	r5, #16
 8006854:	bfdc      	itt	le
 8006856:	230a      	movle	r3, #10
 8006858:	fb03 2909 	mlale	r9, r3, r9, r2
 800685c:	e7e1      	b.n	8006822 <_strtod_l+0x242>
 800685e:	2300      	movs	r3, #0
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	2301      	movs	r3, #1
 8006864:	e77c      	b.n	8006760 <_strtod_l+0x180>
 8006866:	f04f 0c00 	mov.w	ip, #0
 800686a:	f108 0202 	add.w	r2, r8, #2
 800686e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006870:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006874:	e785      	b.n	8006782 <_strtod_l+0x1a2>
 8006876:	f04f 0c01 	mov.w	ip, #1
 800687a:	e7f6      	b.n	800686a <_strtod_l+0x28a>
 800687c:	0800a428 	.word	0x0800a428
 8006880:	0800a1dc 	.word	0x0800a1dc
 8006884:	7ff00000 	.word	0x7ff00000
 8006888:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800688a:	1c51      	adds	r1, r2, #1
 800688c:	9117      	str	r1, [sp, #92]	; 0x5c
 800688e:	7852      	ldrb	r2, [r2, #1]
 8006890:	2a30      	cmp	r2, #48	; 0x30
 8006892:	d0f9      	beq.n	8006888 <_strtod_l+0x2a8>
 8006894:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006898:	2908      	cmp	r1, #8
 800689a:	f63f af79 	bhi.w	8006790 <_strtod_l+0x1b0>
 800689e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068a4:	9206      	str	r2, [sp, #24]
 80068a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068a8:	1c51      	adds	r1, r2, #1
 80068aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80068ac:	7852      	ldrb	r2, [r2, #1]
 80068ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80068b2:	2e09      	cmp	r6, #9
 80068b4:	d937      	bls.n	8006926 <_strtod_l+0x346>
 80068b6:	9e06      	ldr	r6, [sp, #24]
 80068b8:	1b89      	subs	r1, r1, r6
 80068ba:	2908      	cmp	r1, #8
 80068bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80068c0:	dc02      	bgt.n	80068c8 <_strtod_l+0x2e8>
 80068c2:	4576      	cmp	r6, lr
 80068c4:	bfa8      	it	ge
 80068c6:	4676      	movge	r6, lr
 80068c8:	f1bc 0f00 	cmp.w	ip, #0
 80068cc:	d000      	beq.n	80068d0 <_strtod_l+0x2f0>
 80068ce:	4276      	negs	r6, r6
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	d14d      	bne.n	8006970 <_strtod_l+0x390>
 80068d4:	9904      	ldr	r1, [sp, #16]
 80068d6:	4301      	orrs	r1, r0
 80068d8:	f47f aec6 	bne.w	8006668 <_strtod_l+0x88>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f47f aee1 	bne.w	80066a4 <_strtod_l+0xc4>
 80068e2:	2a69      	cmp	r2, #105	; 0x69
 80068e4:	d027      	beq.n	8006936 <_strtod_l+0x356>
 80068e6:	dc24      	bgt.n	8006932 <_strtod_l+0x352>
 80068e8:	2a49      	cmp	r2, #73	; 0x49
 80068ea:	d024      	beq.n	8006936 <_strtod_l+0x356>
 80068ec:	2a4e      	cmp	r2, #78	; 0x4e
 80068ee:	f47f aed9 	bne.w	80066a4 <_strtod_l+0xc4>
 80068f2:	499f      	ldr	r1, [pc, #636]	; (8006b70 <_strtod_l+0x590>)
 80068f4:	a817      	add	r0, sp, #92	; 0x5c
 80068f6:	f001 fe3d 	bl	8008574 <__match>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f43f aed2 	beq.w	80066a4 <_strtod_l+0xc4>
 8006900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b28      	cmp	r3, #40	; 0x28
 8006906:	d12d      	bne.n	8006964 <_strtod_l+0x384>
 8006908:	499a      	ldr	r1, [pc, #616]	; (8006b74 <_strtod_l+0x594>)
 800690a:	aa1a      	add	r2, sp, #104	; 0x68
 800690c:	a817      	add	r0, sp, #92	; 0x5c
 800690e:	f001 fe45 	bl	800859c <__hexnan>
 8006912:	2805      	cmp	r0, #5
 8006914:	d126      	bne.n	8006964 <_strtod_l+0x384>
 8006916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006918:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800691c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006920:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006924:	e6a0      	b.n	8006668 <_strtod_l+0x88>
 8006926:	210a      	movs	r1, #10
 8006928:	fb01 2e0e 	mla	lr, r1, lr, r2
 800692c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006930:	e7b9      	b.n	80068a6 <_strtod_l+0x2c6>
 8006932:	2a6e      	cmp	r2, #110	; 0x6e
 8006934:	e7db      	b.n	80068ee <_strtod_l+0x30e>
 8006936:	4990      	ldr	r1, [pc, #576]	; (8006b78 <_strtod_l+0x598>)
 8006938:	a817      	add	r0, sp, #92	; 0x5c
 800693a:	f001 fe1b 	bl	8008574 <__match>
 800693e:	2800      	cmp	r0, #0
 8006940:	f43f aeb0 	beq.w	80066a4 <_strtod_l+0xc4>
 8006944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006946:	498d      	ldr	r1, [pc, #564]	; (8006b7c <_strtod_l+0x59c>)
 8006948:	3b01      	subs	r3, #1
 800694a:	a817      	add	r0, sp, #92	; 0x5c
 800694c:	9317      	str	r3, [sp, #92]	; 0x5c
 800694e:	f001 fe11 	bl	8008574 <__match>
 8006952:	b910      	cbnz	r0, 800695a <_strtod_l+0x37a>
 8006954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006956:	3301      	adds	r3, #1
 8006958:	9317      	str	r3, [sp, #92]	; 0x5c
 800695a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006b8c <_strtod_l+0x5ac>
 800695e:	f04f 0a00 	mov.w	sl, #0
 8006962:	e681      	b.n	8006668 <_strtod_l+0x88>
 8006964:	4886      	ldr	r0, [pc, #536]	; (8006b80 <_strtod_l+0x5a0>)
 8006966:	f002 fdf7 	bl	8009558 <nan>
 800696a:	ec5b ab10 	vmov	sl, fp, d0
 800696e:	e67b      	b.n	8006668 <_strtod_l+0x88>
 8006970:	9b05      	ldr	r3, [sp, #20]
 8006972:	9807      	ldr	r0, [sp, #28]
 8006974:	1af3      	subs	r3, r6, r3
 8006976:	2f00      	cmp	r7, #0
 8006978:	bf08      	it	eq
 800697a:	462f      	moveq	r7, r5
 800697c:	2d10      	cmp	r5, #16
 800697e:	9306      	str	r3, [sp, #24]
 8006980:	46a8      	mov	r8, r5
 8006982:	bfa8      	it	ge
 8006984:	f04f 0810 	movge.w	r8, #16
 8006988:	f7f9 fdbc 	bl	8000504 <__aeabi_ui2d>
 800698c:	2d09      	cmp	r5, #9
 800698e:	4682      	mov	sl, r0
 8006990:	468b      	mov	fp, r1
 8006992:	dd13      	ble.n	80069bc <_strtod_l+0x3dc>
 8006994:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <_strtod_l+0x5a4>)
 8006996:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800699a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	4682      	mov	sl, r0
 80069a4:	4648      	mov	r0, r9
 80069a6:	468b      	mov	fp, r1
 80069a8:	f7f9 fdac 	bl	8000504 <__aeabi_ui2d>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7f9 fc6a 	bl	800028c <__adddf3>
 80069b8:	4682      	mov	sl, r0
 80069ba:	468b      	mov	fp, r1
 80069bc:	2d0f      	cmp	r5, #15
 80069be:	dc38      	bgt.n	8006a32 <_strtod_l+0x452>
 80069c0:	9b06      	ldr	r3, [sp, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f43f ae50 	beq.w	8006668 <_strtod_l+0x88>
 80069c8:	dd24      	ble.n	8006a14 <_strtod_l+0x434>
 80069ca:	2b16      	cmp	r3, #22
 80069cc:	dc0b      	bgt.n	80069e6 <_strtod_l+0x406>
 80069ce:	496d      	ldr	r1, [pc, #436]	; (8006b84 <_strtod_l+0x5a4>)
 80069d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d8:	4652      	mov	r2, sl
 80069da:	465b      	mov	r3, fp
 80069dc:	f7f9 fe0c 	bl	80005f8 <__aeabi_dmul>
 80069e0:	4682      	mov	sl, r0
 80069e2:	468b      	mov	fp, r1
 80069e4:	e640      	b.n	8006668 <_strtod_l+0x88>
 80069e6:	9a06      	ldr	r2, [sp, #24]
 80069e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80069ec:	4293      	cmp	r3, r2
 80069ee:	db20      	blt.n	8006a32 <_strtod_l+0x452>
 80069f0:	4c64      	ldr	r4, [pc, #400]	; (8006b84 <_strtod_l+0x5a4>)
 80069f2:	f1c5 050f 	rsb	r5, r5, #15
 80069f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80069fa:	4652      	mov	r2, sl
 80069fc:	465b      	mov	r3, fp
 80069fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a02:	f7f9 fdf9 	bl	80005f8 <__aeabi_dmul>
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	1b5d      	subs	r5, r3, r5
 8006a0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a12:	e7e3      	b.n	80069dc <_strtod_l+0x3fc>
 8006a14:	9b06      	ldr	r3, [sp, #24]
 8006a16:	3316      	adds	r3, #22
 8006a18:	db0b      	blt.n	8006a32 <_strtod_l+0x452>
 8006a1a:	9b05      	ldr	r3, [sp, #20]
 8006a1c:	1b9e      	subs	r6, r3, r6
 8006a1e:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <_strtod_l+0x5a4>)
 8006a20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006a24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a28:	4650      	mov	r0, sl
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	f7f9 ff0e 	bl	800084c <__aeabi_ddiv>
 8006a30:	e7d6      	b.n	80069e0 <_strtod_l+0x400>
 8006a32:	9b06      	ldr	r3, [sp, #24]
 8006a34:	eba5 0808 	sub.w	r8, r5, r8
 8006a38:	4498      	add	r8, r3
 8006a3a:	f1b8 0f00 	cmp.w	r8, #0
 8006a3e:	dd74      	ble.n	8006b2a <_strtod_l+0x54a>
 8006a40:	f018 030f 	ands.w	r3, r8, #15
 8006a44:	d00a      	beq.n	8006a5c <_strtod_l+0x47c>
 8006a46:	494f      	ldr	r1, [pc, #316]	; (8006b84 <_strtod_l+0x5a4>)
 8006a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	465b      	mov	r3, fp
 8006a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a54:	f7f9 fdd0 	bl	80005f8 <__aeabi_dmul>
 8006a58:	4682      	mov	sl, r0
 8006a5a:	468b      	mov	fp, r1
 8006a5c:	f038 080f 	bics.w	r8, r8, #15
 8006a60:	d04f      	beq.n	8006b02 <_strtod_l+0x522>
 8006a62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006a66:	dd22      	ble.n	8006aae <_strtod_l+0x4ce>
 8006a68:	2500      	movs	r5, #0
 8006a6a:	462e      	mov	r6, r5
 8006a6c:	9507      	str	r5, [sp, #28]
 8006a6e:	9505      	str	r5, [sp, #20]
 8006a70:	2322      	movs	r3, #34	; 0x22
 8006a72:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006b8c <_strtod_l+0x5ac>
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	f04f 0a00 	mov.w	sl, #0
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f43f adf2 	beq.w	8006668 <_strtod_l+0x88>
 8006a84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a86:	4620      	mov	r0, r4
 8006a88:	f001 fe90 	bl	80087ac <_Bfree>
 8006a8c:	9905      	ldr	r1, [sp, #20]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f001 fe8c 	bl	80087ac <_Bfree>
 8006a94:	4631      	mov	r1, r6
 8006a96:	4620      	mov	r0, r4
 8006a98:	f001 fe88 	bl	80087ac <_Bfree>
 8006a9c:	9907      	ldr	r1, [sp, #28]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 fe84 	bl	80087ac <_Bfree>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f001 fe80 	bl	80087ac <_Bfree>
 8006aac:	e5dc      	b.n	8006668 <_strtod_l+0x88>
 8006aae:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <_strtod_l+0x5a8>)
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006ab8:	4650      	mov	r0, sl
 8006aba:	4659      	mov	r1, fp
 8006abc:	4699      	mov	r9, r3
 8006abe:	f1b8 0f01 	cmp.w	r8, #1
 8006ac2:	dc21      	bgt.n	8006b08 <_strtod_l+0x528>
 8006ac4:	b10b      	cbz	r3, 8006aca <_strtod_l+0x4ea>
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	468b      	mov	fp, r1
 8006aca:	4b2f      	ldr	r3, [pc, #188]	; (8006b88 <_strtod_l+0x5a8>)
 8006acc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006ad0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006adc:	f7f9 fd8c 	bl	80005f8 <__aeabi_dmul>
 8006ae0:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <_strtod_l+0x5ac>)
 8006ae2:	460a      	mov	r2, r1
 8006ae4:	400b      	ands	r3, r1
 8006ae6:	492a      	ldr	r1, [pc, #168]	; (8006b90 <_strtod_l+0x5b0>)
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	4682      	mov	sl, r0
 8006aec:	d8bc      	bhi.n	8006a68 <_strtod_l+0x488>
 8006aee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006af2:	428b      	cmp	r3, r1
 8006af4:	bf86      	itte	hi
 8006af6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006b94 <_strtod_l+0x5b4>
 8006afa:	f04f 3aff 	movhi.w	sl, #4294967295
 8006afe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006b02:	2300      	movs	r3, #0
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	e084      	b.n	8006c12 <_strtod_l+0x632>
 8006b08:	f018 0f01 	tst.w	r8, #1
 8006b0c:	d005      	beq.n	8006b1a <_strtod_l+0x53a>
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f7f9 fd70 	bl	80005f8 <__aeabi_dmul>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	9a04      	ldr	r2, [sp, #16]
 8006b1c:	3208      	adds	r2, #8
 8006b1e:	f109 0901 	add.w	r9, r9, #1
 8006b22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b26:	9204      	str	r2, [sp, #16]
 8006b28:	e7c9      	b.n	8006abe <_strtod_l+0x4de>
 8006b2a:	d0ea      	beq.n	8006b02 <_strtod_l+0x522>
 8006b2c:	f1c8 0800 	rsb	r8, r8, #0
 8006b30:	f018 020f 	ands.w	r2, r8, #15
 8006b34:	d00a      	beq.n	8006b4c <_strtod_l+0x56c>
 8006b36:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <_strtod_l+0x5a4>)
 8006b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	4659      	mov	r1, fp
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f7f9 fe82 	bl	800084c <__aeabi_ddiv>
 8006b48:	4682      	mov	sl, r0
 8006b4a:	468b      	mov	fp, r1
 8006b4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b50:	d0d7      	beq.n	8006b02 <_strtod_l+0x522>
 8006b52:	f1b8 0f1f 	cmp.w	r8, #31
 8006b56:	dd1f      	ble.n	8006b98 <_strtod_l+0x5b8>
 8006b58:	2500      	movs	r5, #0
 8006b5a:	462e      	mov	r6, r5
 8006b5c:	9507      	str	r5, [sp, #28]
 8006b5e:	9505      	str	r5, [sp, #20]
 8006b60:	2322      	movs	r3, #34	; 0x22
 8006b62:	f04f 0a00 	mov.w	sl, #0
 8006b66:	f04f 0b00 	mov.w	fp, #0
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	e786      	b.n	8006a7c <_strtod_l+0x49c>
 8006b6e:	bf00      	nop
 8006b70:	0800a1ad 	.word	0x0800a1ad
 8006b74:	0800a1f0 	.word	0x0800a1f0
 8006b78:	0800a1a5 	.word	0x0800a1a5
 8006b7c:	0800a334 	.word	0x0800a334
 8006b80:	0800a5e0 	.word	0x0800a5e0
 8006b84:	0800a4c0 	.word	0x0800a4c0
 8006b88:	0800a498 	.word	0x0800a498
 8006b8c:	7ff00000 	.word	0x7ff00000
 8006b90:	7ca00000 	.word	0x7ca00000
 8006b94:	7fefffff 	.word	0x7fefffff
 8006b98:	f018 0310 	ands.w	r3, r8, #16
 8006b9c:	bf18      	it	ne
 8006b9e:	236a      	movne	r3, #106	; 0x6a
 8006ba0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006f50 <_strtod_l+0x970>
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	4659      	mov	r1, fp
 8006baa:	2300      	movs	r3, #0
 8006bac:	f018 0f01 	tst.w	r8, #1
 8006bb0:	d004      	beq.n	8006bbc <_strtod_l+0x5dc>
 8006bb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006bc0:	f109 0908 	add.w	r9, r9, #8
 8006bc4:	d1f2      	bne.n	8006bac <_strtod_l+0x5cc>
 8006bc6:	b10b      	cbz	r3, 8006bcc <_strtod_l+0x5ec>
 8006bc8:	4682      	mov	sl, r0
 8006bca:	468b      	mov	fp, r1
 8006bcc:	9b04      	ldr	r3, [sp, #16]
 8006bce:	b1c3      	cbz	r3, 8006c02 <_strtod_l+0x622>
 8006bd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006bd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	4659      	mov	r1, fp
 8006bdc:	dd11      	ble.n	8006c02 <_strtod_l+0x622>
 8006bde:	2b1f      	cmp	r3, #31
 8006be0:	f340 8124 	ble.w	8006e2c <_strtod_l+0x84c>
 8006be4:	2b34      	cmp	r3, #52	; 0x34
 8006be6:	bfde      	ittt	le
 8006be8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006bec:	f04f 33ff 	movle.w	r3, #4294967295
 8006bf0:	fa03 f202 	lslle.w	r2, r3, r2
 8006bf4:	f04f 0a00 	mov.w	sl, #0
 8006bf8:	bfcc      	ite	gt
 8006bfa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006bfe:	ea02 0b01 	andle.w	fp, r2, r1
 8006c02:	2200      	movs	r2, #0
 8006c04:	2300      	movs	r3, #0
 8006c06:	4650      	mov	r0, sl
 8006c08:	4659      	mov	r1, fp
 8006c0a:	f7f9 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d1a2      	bne.n	8006b58 <_strtod_l+0x578>
 8006c12:	9b07      	ldr	r3, [sp, #28]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	9908      	ldr	r1, [sp, #32]
 8006c18:	462b      	mov	r3, r5
 8006c1a:	463a      	mov	r2, r7
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f001 fe2d 	bl	800887c <__s2b>
 8006c22:	9007      	str	r0, [sp, #28]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f43f af1f 	beq.w	8006a68 <_strtod_l+0x488>
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	1b9e      	subs	r6, r3, r6
 8006c2e:	9b06      	ldr	r3, [sp, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfb4      	ite	lt
 8006c34:	4633      	movlt	r3, r6
 8006c36:	2300      	movge	r3, #0
 8006c38:	930c      	str	r3, [sp, #48]	; 0x30
 8006c3a:	9b06      	ldr	r3, [sp, #24]
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c42:	9312      	str	r3, [sp, #72]	; 0x48
 8006c44:	462e      	mov	r6, r5
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	4620      	mov	r0, r4
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	f001 fd6e 	bl	800872c <_Balloc>
 8006c50:	9005      	str	r0, [sp, #20]
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f43f af0c 	beq.w	8006a70 <_strtod_l+0x490>
 8006c58:	9b07      	ldr	r3, [sp, #28]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	3202      	adds	r2, #2
 8006c5e:	f103 010c 	add.w	r1, r3, #12
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	300c      	adds	r0, #12
 8006c66:	f001 fd53 	bl	8008710 <memcpy>
 8006c6a:	ec4b ab10 	vmov	d0, sl, fp
 8006c6e:	aa1a      	add	r2, sp, #104	; 0x68
 8006c70:	a919      	add	r1, sp, #100	; 0x64
 8006c72:	4620      	mov	r0, r4
 8006c74:	f002 f948 	bl	8008f08 <__d2b>
 8006c78:	ec4b ab18 	vmov	d8, sl, fp
 8006c7c:	9018      	str	r0, [sp, #96]	; 0x60
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f aef6 	beq.w	8006a70 <_strtod_l+0x490>
 8006c84:	2101      	movs	r1, #1
 8006c86:	4620      	mov	r0, r4
 8006c88:	f001 fe92 	bl	80089b0 <__i2b>
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f43f aeee 	beq.w	8006a70 <_strtod_l+0x490>
 8006c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c96:	9904      	ldr	r1, [sp, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bfab      	itete	ge
 8006c9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006c9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006ca0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006ca2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006ca6:	bfac      	ite	ge
 8006ca8:	eb03 0902 	addge.w	r9, r3, r2
 8006cac:	1ad7      	sublt	r7, r2, r3
 8006cae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cb0:	eba3 0801 	sub.w	r8, r3, r1
 8006cb4:	4490      	add	r8, r2
 8006cb6:	4ba1      	ldr	r3, [pc, #644]	; (8006f3c <_strtod_l+0x95c>)
 8006cb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cbc:	4598      	cmp	r8, r3
 8006cbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006cc2:	f280 80c7 	bge.w	8006e54 <_strtod_l+0x874>
 8006cc6:	eba3 0308 	sub.w	r3, r3, r8
 8006cca:	2b1f      	cmp	r3, #31
 8006ccc:	eba2 0203 	sub.w	r2, r2, r3
 8006cd0:	f04f 0101 	mov.w	r1, #1
 8006cd4:	f300 80b1 	bgt.w	8006e3a <_strtod_l+0x85a>
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	eb09 0802 	add.w	r8, r9, r2
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	45c1      	cmp	r9, r8
 8006cea:	4417      	add	r7, r2
 8006cec:	441f      	add	r7, r3
 8006cee:	464b      	mov	r3, r9
 8006cf0:	bfa8      	it	ge
 8006cf2:	4643      	movge	r3, r8
 8006cf4:	42bb      	cmp	r3, r7
 8006cf6:	bfa8      	it	ge
 8006cf8:	463b      	movge	r3, r7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfc2      	ittt	gt
 8006cfe:	eba8 0803 	subgt.w	r8, r8, r3
 8006d02:	1aff      	subgt	r7, r7, r3
 8006d04:	eba9 0903 	subgt.w	r9, r9, r3
 8006d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dd17      	ble.n	8006d3e <_strtod_l+0x75e>
 8006d0e:	4631      	mov	r1, r6
 8006d10:	461a      	mov	r2, r3
 8006d12:	4620      	mov	r0, r4
 8006d14:	f001 ff0c 	bl	8008b30 <__pow5mult>
 8006d18:	4606      	mov	r6, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	f43f aea8 	beq.w	8006a70 <_strtod_l+0x490>
 8006d20:	4601      	mov	r1, r0
 8006d22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d24:	4620      	mov	r0, r4
 8006d26:	f001 fe59 	bl	80089dc <__multiply>
 8006d2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f ae9f 	beq.w	8006a70 <_strtod_l+0x490>
 8006d32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d34:	4620      	mov	r0, r4
 8006d36:	f001 fd39 	bl	80087ac <_Bfree>
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3c:	9318      	str	r3, [sp, #96]	; 0x60
 8006d3e:	f1b8 0f00 	cmp.w	r8, #0
 8006d42:	f300 808c 	bgt.w	8006e5e <_strtod_l+0x87e>
 8006d46:	9b06      	ldr	r3, [sp, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dd08      	ble.n	8006d5e <_strtod_l+0x77e>
 8006d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d4e:	9905      	ldr	r1, [sp, #20]
 8006d50:	4620      	mov	r0, r4
 8006d52:	f001 feed 	bl	8008b30 <__pow5mult>
 8006d56:	9005      	str	r0, [sp, #20]
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f43f ae89 	beq.w	8006a70 <_strtod_l+0x490>
 8006d5e:	2f00      	cmp	r7, #0
 8006d60:	dd08      	ble.n	8006d74 <_strtod_l+0x794>
 8006d62:	9905      	ldr	r1, [sp, #20]
 8006d64:	463a      	mov	r2, r7
 8006d66:	4620      	mov	r0, r4
 8006d68:	f001 ff3c 	bl	8008be4 <__lshift>
 8006d6c:	9005      	str	r0, [sp, #20]
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f43f ae7e 	beq.w	8006a70 <_strtod_l+0x490>
 8006d74:	f1b9 0f00 	cmp.w	r9, #0
 8006d78:	dd08      	ble.n	8006d8c <_strtod_l+0x7ac>
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f001 ff30 	bl	8008be4 <__lshift>
 8006d84:	4606      	mov	r6, r0
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f ae72 	beq.w	8006a70 <_strtod_l+0x490>
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d90:	4620      	mov	r0, r4
 8006d92:	f001 ffb3 	bl	8008cfc <__mdiff>
 8006d96:	4605      	mov	r5, r0
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f43f ae69 	beq.w	8006a70 <_strtod_l+0x490>
 8006d9e:	68c3      	ldr	r3, [r0, #12]
 8006da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da2:	2300      	movs	r3, #0
 8006da4:	60c3      	str	r3, [r0, #12]
 8006da6:	4631      	mov	r1, r6
 8006da8:	f001 ff8c 	bl	8008cc4 <__mcmp>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	da60      	bge.n	8006e72 <_strtod_l+0x892>
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	ea53 030a 	orrs.w	r3, r3, sl
 8006db6:	f040 8082 	bne.w	8006ebe <_strtod_l+0x8de>
 8006dba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d17d      	bne.n	8006ebe <_strtod_l+0x8de>
 8006dc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dc6:	0d1b      	lsrs	r3, r3, #20
 8006dc8:	051b      	lsls	r3, r3, #20
 8006dca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006dce:	d976      	bls.n	8006ebe <_strtod_l+0x8de>
 8006dd0:	696b      	ldr	r3, [r5, #20]
 8006dd2:	b913      	cbnz	r3, 8006dda <_strtod_l+0x7fa>
 8006dd4:	692b      	ldr	r3, [r5, #16]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	dd71      	ble.n	8006ebe <_strtod_l+0x8de>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	2201      	movs	r2, #1
 8006dde:	4620      	mov	r0, r4
 8006de0:	f001 ff00 	bl	8008be4 <__lshift>
 8006de4:	4631      	mov	r1, r6
 8006de6:	4605      	mov	r5, r0
 8006de8:	f001 ff6c 	bl	8008cc4 <__mcmp>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	dd66      	ble.n	8006ebe <_strtod_l+0x8de>
 8006df0:	9904      	ldr	r1, [sp, #16]
 8006df2:	4a53      	ldr	r2, [pc, #332]	; (8006f40 <_strtod_l+0x960>)
 8006df4:	465b      	mov	r3, fp
 8006df6:	2900      	cmp	r1, #0
 8006df8:	f000 8081 	beq.w	8006efe <_strtod_l+0x91e>
 8006dfc:	ea02 010b 	and.w	r1, r2, fp
 8006e00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e04:	dc7b      	bgt.n	8006efe <_strtod_l+0x91e>
 8006e06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e0a:	f77f aea9 	ble.w	8006b60 <_strtod_l+0x580>
 8006e0e:	4b4d      	ldr	r3, [pc, #308]	; (8006f44 <_strtod_l+0x964>)
 8006e10:	4650      	mov	r0, sl
 8006e12:	4659      	mov	r1, fp
 8006e14:	2200      	movs	r2, #0
 8006e16:	f7f9 fbef 	bl	80005f8 <__aeabi_dmul>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4303      	orrs	r3, r0
 8006e1e:	bf08      	it	eq
 8006e20:	2322      	moveq	r3, #34	; 0x22
 8006e22:	4682      	mov	sl, r0
 8006e24:	468b      	mov	fp, r1
 8006e26:	bf08      	it	eq
 8006e28:	6023      	streq	r3, [r4, #0]
 8006e2a:	e62b      	b.n	8006a84 <_strtod_l+0x4a4>
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	ea03 0a0a 	and.w	sl, r3, sl
 8006e38:	e6e3      	b.n	8006c02 <_strtod_l+0x622>
 8006e3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006e3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006e42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006e46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006e4a:	fa01 f308 	lsl.w	r3, r1, r8
 8006e4e:	9308      	str	r3, [sp, #32]
 8006e50:	910d      	str	r1, [sp, #52]	; 0x34
 8006e52:	e746      	b.n	8006ce2 <_strtod_l+0x702>
 8006e54:	2300      	movs	r3, #0
 8006e56:	9308      	str	r3, [sp, #32]
 8006e58:	2301      	movs	r3, #1
 8006e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e5c:	e741      	b.n	8006ce2 <_strtod_l+0x702>
 8006e5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e60:	4642      	mov	r2, r8
 8006e62:	4620      	mov	r0, r4
 8006e64:	f001 febe 	bl	8008be4 <__lshift>
 8006e68:	9018      	str	r0, [sp, #96]	; 0x60
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	f47f af6b 	bne.w	8006d46 <_strtod_l+0x766>
 8006e70:	e5fe      	b.n	8006a70 <_strtod_l+0x490>
 8006e72:	465f      	mov	r7, fp
 8006e74:	d16e      	bne.n	8006f54 <_strtod_l+0x974>
 8006e76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e7c:	b342      	cbz	r2, 8006ed0 <_strtod_l+0x8f0>
 8006e7e:	4a32      	ldr	r2, [pc, #200]	; (8006f48 <_strtod_l+0x968>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d128      	bne.n	8006ed6 <_strtod_l+0x8f6>
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	4651      	mov	r1, sl
 8006e88:	b1eb      	cbz	r3, 8006ec6 <_strtod_l+0x8e6>
 8006e8a:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <_strtod_l+0x960>)
 8006e8c:	403b      	ands	r3, r7
 8006e8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	d819      	bhi.n	8006ecc <_strtod_l+0x8ec>
 8006e98:	0d1b      	lsrs	r3, r3, #20
 8006e9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	4299      	cmp	r1, r3
 8006ea4:	d117      	bne.n	8006ed6 <_strtod_l+0x8f6>
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <_strtod_l+0x96c>)
 8006ea8:	429f      	cmp	r7, r3
 8006eaa:	d102      	bne.n	8006eb2 <_strtod_l+0x8d2>
 8006eac:	3101      	adds	r1, #1
 8006eae:	f43f addf 	beq.w	8006a70 <_strtod_l+0x490>
 8006eb2:	4b23      	ldr	r3, [pc, #140]	; (8006f40 <_strtod_l+0x960>)
 8006eb4:	403b      	ands	r3, r7
 8006eb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006eba:	f04f 0a00 	mov.w	sl, #0
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1a4      	bne.n	8006e0e <_strtod_l+0x82e>
 8006ec4:	e5de      	b.n	8006a84 <_strtod_l+0x4a4>
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	e7ea      	b.n	8006ea2 <_strtod_l+0x8c2>
 8006ecc:	4613      	mov	r3, r2
 8006ece:	e7e8      	b.n	8006ea2 <_strtod_l+0x8c2>
 8006ed0:	ea53 030a 	orrs.w	r3, r3, sl
 8006ed4:	d08c      	beq.n	8006df0 <_strtod_l+0x810>
 8006ed6:	9b08      	ldr	r3, [sp, #32]
 8006ed8:	b1db      	cbz	r3, 8006f12 <_strtod_l+0x932>
 8006eda:	423b      	tst	r3, r7
 8006edc:	d0ef      	beq.n	8006ebe <_strtod_l+0x8de>
 8006ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee0:	9a04      	ldr	r2, [sp, #16]
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	b1c3      	cbz	r3, 8006f1a <_strtod_l+0x93a>
 8006ee8:	f7ff fb5e 	bl	80065a8 <sulp>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	ec51 0b18 	vmov	r0, r1, d8
 8006ef4:	f7f9 f9ca 	bl	800028c <__adddf3>
 8006ef8:	4682      	mov	sl, r0
 8006efa:	468b      	mov	fp, r1
 8006efc:	e7df      	b.n	8006ebe <_strtod_l+0x8de>
 8006efe:	4013      	ands	r3, r2
 8006f00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f10:	e7d5      	b.n	8006ebe <_strtod_l+0x8de>
 8006f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f14:	ea13 0f0a 	tst.w	r3, sl
 8006f18:	e7e0      	b.n	8006edc <_strtod_l+0x8fc>
 8006f1a:	f7ff fb45 	bl	80065a8 <sulp>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	ec51 0b18 	vmov	r0, r1, d8
 8006f26:	f7f9 f9af 	bl	8000288 <__aeabi_dsub>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4682      	mov	sl, r0
 8006f30:	468b      	mov	fp, r1
 8006f32:	f7f9 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d0c1      	beq.n	8006ebe <_strtod_l+0x8de>
 8006f3a:	e611      	b.n	8006b60 <_strtod_l+0x580>
 8006f3c:	fffffc02 	.word	0xfffffc02
 8006f40:	7ff00000 	.word	0x7ff00000
 8006f44:	39500000 	.word	0x39500000
 8006f48:	000fffff 	.word	0x000fffff
 8006f4c:	7fefffff 	.word	0x7fefffff
 8006f50:	0800a208 	.word	0x0800a208
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	f002 f832 	bl	8008fc0 <__ratio>
 8006f5c:	ec59 8b10 	vmov	r8, r9, d0
 8006f60:	ee10 0a10 	vmov	r0, s0
 8006f64:	2200      	movs	r2, #0
 8006f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 fdc0 	bl	8000af0 <__aeabi_dcmple>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d07a      	beq.n	800706a <_strtod_l+0xa8a>
 8006f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d04a      	beq.n	8007010 <_strtod_l+0xa30>
 8006f7a:	4b95      	ldr	r3, [pc, #596]	; (80071d0 <_strtod_l+0xbf0>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80071d0 <_strtod_l+0xbf0>
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	4b92      	ldr	r3, [pc, #584]	; (80071d4 <_strtod_l+0xbf4>)
 8006f8c:	403b      	ands	r3, r7
 8006f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f92:	4b91      	ldr	r3, [pc, #580]	; (80071d8 <_strtod_l+0xbf8>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	f040 80b0 	bne.w	80070fa <_strtod_l+0xb1a>
 8006f9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006fa2:	ec4b ab10 	vmov	d0, sl, fp
 8006fa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006faa:	f001 ff31 	bl	8008e10 <__ulp>
 8006fae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fb2:	ec53 2b10 	vmov	r2, r3, d0
 8006fb6:	f7f9 fb1f 	bl	80005f8 <__aeabi_dmul>
 8006fba:	4652      	mov	r2, sl
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	f7f9 f965 	bl	800028c <__adddf3>
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4983      	ldr	r1, [pc, #524]	; (80071d4 <_strtod_l+0xbf4>)
 8006fc6:	4a85      	ldr	r2, [pc, #532]	; (80071dc <_strtod_l+0xbfc>)
 8006fc8:	4019      	ands	r1, r3
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	4682      	mov	sl, r0
 8006fce:	d960      	bls.n	8007092 <_strtod_l+0xab2>
 8006fd0:	ee18 3a90 	vmov	r3, s17
 8006fd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d104      	bne.n	8006fe6 <_strtod_l+0xa06>
 8006fdc:	ee18 3a10 	vmov	r3, s16
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f43f ad45 	beq.w	8006a70 <_strtod_l+0x490>
 8006fe6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80071e8 <_strtod_l+0xc08>
 8006fea:	f04f 3aff 	mov.w	sl, #4294967295
 8006fee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f001 fbdb 	bl	80087ac <_Bfree>
 8006ff6:	9905      	ldr	r1, [sp, #20]
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 fbd7 	bl	80087ac <_Bfree>
 8006ffe:	4631      	mov	r1, r6
 8007000:	4620      	mov	r0, r4
 8007002:	f001 fbd3 	bl	80087ac <_Bfree>
 8007006:	4629      	mov	r1, r5
 8007008:	4620      	mov	r0, r4
 800700a:	f001 fbcf 	bl	80087ac <_Bfree>
 800700e:	e61a      	b.n	8006c46 <_strtod_l+0x666>
 8007010:	f1ba 0f00 	cmp.w	sl, #0
 8007014:	d11b      	bne.n	800704e <_strtod_l+0xa6e>
 8007016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800701a:	b9f3      	cbnz	r3, 800705a <_strtod_l+0xa7a>
 800701c:	4b6c      	ldr	r3, [pc, #432]	; (80071d0 <_strtod_l+0xbf0>)
 800701e:	2200      	movs	r2, #0
 8007020:	4640      	mov	r0, r8
 8007022:	4649      	mov	r1, r9
 8007024:	f7f9 fd5a 	bl	8000adc <__aeabi_dcmplt>
 8007028:	b9d0      	cbnz	r0, 8007060 <_strtod_l+0xa80>
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	4b6c      	ldr	r3, [pc, #432]	; (80071e0 <_strtod_l+0xc00>)
 8007030:	2200      	movs	r2, #0
 8007032:	f7f9 fae1 	bl	80005f8 <__aeabi_dmul>
 8007036:	4680      	mov	r8, r0
 8007038:	4689      	mov	r9, r1
 800703a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800703e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007042:	9315      	str	r3, [sp, #84]	; 0x54
 8007044:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007048:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800704c:	e79d      	b.n	8006f8a <_strtod_l+0x9aa>
 800704e:	f1ba 0f01 	cmp.w	sl, #1
 8007052:	d102      	bne.n	800705a <_strtod_l+0xa7a>
 8007054:	2f00      	cmp	r7, #0
 8007056:	f43f ad83 	beq.w	8006b60 <_strtod_l+0x580>
 800705a:	4b62      	ldr	r3, [pc, #392]	; (80071e4 <_strtod_l+0xc04>)
 800705c:	2200      	movs	r2, #0
 800705e:	e78e      	b.n	8006f7e <_strtod_l+0x99e>
 8007060:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80071e0 <_strtod_l+0xc00>
 8007064:	f04f 0800 	mov.w	r8, #0
 8007068:	e7e7      	b.n	800703a <_strtod_l+0xa5a>
 800706a:	4b5d      	ldr	r3, [pc, #372]	; (80071e0 <_strtod_l+0xc00>)
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	2200      	movs	r2, #0
 8007072:	f7f9 fac1 	bl	80005f8 <__aeabi_dmul>
 8007076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007078:	4680      	mov	r8, r0
 800707a:	4689      	mov	r9, r1
 800707c:	b933      	cbnz	r3, 800708c <_strtod_l+0xaac>
 800707e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007082:	900e      	str	r0, [sp, #56]	; 0x38
 8007084:	930f      	str	r3, [sp, #60]	; 0x3c
 8007086:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800708a:	e7dd      	b.n	8007048 <_strtod_l+0xa68>
 800708c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007090:	e7f9      	b.n	8007086 <_strtod_l+0xaa6>
 8007092:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1a8      	bne.n	8006fee <_strtod_l+0xa0e>
 800709c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a2:	0d1b      	lsrs	r3, r3, #20
 80070a4:	051b      	lsls	r3, r3, #20
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d1a1      	bne.n	8006fee <_strtod_l+0xa0e>
 80070aa:	4640      	mov	r0, r8
 80070ac:	4649      	mov	r1, r9
 80070ae:	f7f9 fe03 	bl	8000cb8 <__aeabi_d2lz>
 80070b2:	f7f9 fa73 	bl	800059c <__aeabi_l2d>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 f8e3 	bl	8000288 <__aeabi_dsub>
 80070c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070c8:	ea43 030a 	orr.w	r3, r3, sl
 80070cc:	4313      	orrs	r3, r2
 80070ce:	4680      	mov	r8, r0
 80070d0:	4689      	mov	r9, r1
 80070d2:	d055      	beq.n	8007180 <_strtod_l+0xba0>
 80070d4:	a336      	add	r3, pc, #216	; (adr r3, 80071b0 <_strtod_l+0xbd0>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 fcff 	bl	8000adc <__aeabi_dcmplt>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f47f acd0 	bne.w	8006a84 <_strtod_l+0x4a4>
 80070e4:	a334      	add	r3, pc, #208	; (adr r3, 80071b8 <_strtod_l+0xbd8>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f43f af7b 	beq.w	8006fee <_strtod_l+0xa0e>
 80070f8:	e4c4      	b.n	8006a84 <_strtod_l+0x4a4>
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	b333      	cbz	r3, 800714c <_strtod_l+0xb6c>
 80070fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007100:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007104:	d822      	bhi.n	800714c <_strtod_l+0xb6c>
 8007106:	a32e      	add	r3, pc, #184	; (adr r3, 80071c0 <_strtod_l+0xbe0>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fcee 	bl	8000af0 <__aeabi_dcmple>
 8007114:	b1a0      	cbz	r0, 8007140 <_strtod_l+0xb60>
 8007116:	4649      	mov	r1, r9
 8007118:	4640      	mov	r0, r8
 800711a:	f7f9 fd45 	bl	8000ba8 <__aeabi_d2uiz>
 800711e:	2801      	cmp	r0, #1
 8007120:	bf38      	it	cc
 8007122:	2001      	movcc	r0, #1
 8007124:	f7f9 f9ee 	bl	8000504 <__aeabi_ui2d>
 8007128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800712a:	4680      	mov	r8, r0
 800712c:	4689      	mov	r9, r1
 800712e:	bb23      	cbnz	r3, 800717a <_strtod_l+0xb9a>
 8007130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007134:	9010      	str	r0, [sp, #64]	; 0x40
 8007136:	9311      	str	r3, [sp, #68]	; 0x44
 8007138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800713c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007144:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	9309      	str	r3, [sp, #36]	; 0x24
 800714c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007150:	eeb0 0a48 	vmov.f32	s0, s16
 8007154:	eef0 0a68 	vmov.f32	s1, s17
 8007158:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800715c:	f001 fe58 	bl	8008e10 <__ulp>
 8007160:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007164:	ec53 2b10 	vmov	r2, r3, d0
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	ec53 2b18 	vmov	r2, r3, d8
 8007170:	f7f9 f88c 	bl	800028c <__adddf3>
 8007174:	4682      	mov	sl, r0
 8007176:	468b      	mov	fp, r1
 8007178:	e78d      	b.n	8007096 <_strtod_l+0xab6>
 800717a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800717e:	e7db      	b.n	8007138 <_strtod_l+0xb58>
 8007180:	a311      	add	r3, pc, #68	; (adr r3, 80071c8 <_strtod_l+0xbe8>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 fca9 	bl	8000adc <__aeabi_dcmplt>
 800718a:	e7b2      	b.n	80070f2 <_strtod_l+0xb12>
 800718c:	2300      	movs	r3, #0
 800718e:	930a      	str	r3, [sp, #40]	; 0x28
 8007190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	f7ff ba6b 	b.w	8006670 <_strtod_l+0x90>
 800719a:	2a65      	cmp	r2, #101	; 0x65
 800719c:	f43f ab5f 	beq.w	800685e <_strtod_l+0x27e>
 80071a0:	2a45      	cmp	r2, #69	; 0x45
 80071a2:	f43f ab5c 	beq.w	800685e <_strtod_l+0x27e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	f7ff bb94 	b.w	80068d4 <_strtod_l+0x2f4>
 80071ac:	f3af 8000 	nop.w
 80071b0:	94a03595 	.word	0x94a03595
 80071b4:	3fdfffff 	.word	0x3fdfffff
 80071b8:	35afe535 	.word	0x35afe535
 80071bc:	3fe00000 	.word	0x3fe00000
 80071c0:	ffc00000 	.word	0xffc00000
 80071c4:	41dfffff 	.word	0x41dfffff
 80071c8:	94a03595 	.word	0x94a03595
 80071cc:	3fcfffff 	.word	0x3fcfffff
 80071d0:	3ff00000 	.word	0x3ff00000
 80071d4:	7ff00000 	.word	0x7ff00000
 80071d8:	7fe00000 	.word	0x7fe00000
 80071dc:	7c9fffff 	.word	0x7c9fffff
 80071e0:	3fe00000 	.word	0x3fe00000
 80071e4:	bff00000 	.word	0xbff00000
 80071e8:	7fefffff 	.word	0x7fefffff

080071ec <_strtod_r>:
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <_strtod_r+0x8>)
 80071ee:	f7ff b9f7 	b.w	80065e0 <_strtod_l>
 80071f2:	bf00      	nop
 80071f4:	200000b8 	.word	0x200000b8

080071f8 <_strtol_l.constprop.0>:
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071fe:	d001      	beq.n	8007204 <_strtol_l.constprop.0+0xc>
 8007200:	2b24      	cmp	r3, #36	; 0x24
 8007202:	d906      	bls.n	8007212 <_strtol_l.constprop.0+0x1a>
 8007204:	f7fe fafe 	bl	8005804 <__errno>
 8007208:	2316      	movs	r3, #22
 800720a:	6003      	str	r3, [r0, #0]
 800720c:	2000      	movs	r0, #0
 800720e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007212:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072f8 <_strtol_l.constprop.0+0x100>
 8007216:	460d      	mov	r5, r1
 8007218:	462e      	mov	r6, r5
 800721a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800721e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007222:	f017 0708 	ands.w	r7, r7, #8
 8007226:	d1f7      	bne.n	8007218 <_strtol_l.constprop.0+0x20>
 8007228:	2c2d      	cmp	r4, #45	; 0x2d
 800722a:	d132      	bne.n	8007292 <_strtol_l.constprop.0+0x9a>
 800722c:	782c      	ldrb	r4, [r5, #0]
 800722e:	2701      	movs	r7, #1
 8007230:	1cb5      	adds	r5, r6, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d05b      	beq.n	80072ee <_strtol_l.constprop.0+0xf6>
 8007236:	2b10      	cmp	r3, #16
 8007238:	d109      	bne.n	800724e <_strtol_l.constprop.0+0x56>
 800723a:	2c30      	cmp	r4, #48	; 0x30
 800723c:	d107      	bne.n	800724e <_strtol_l.constprop.0+0x56>
 800723e:	782c      	ldrb	r4, [r5, #0]
 8007240:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007244:	2c58      	cmp	r4, #88	; 0x58
 8007246:	d14d      	bne.n	80072e4 <_strtol_l.constprop.0+0xec>
 8007248:	786c      	ldrb	r4, [r5, #1]
 800724a:	2310      	movs	r3, #16
 800724c:	3502      	adds	r5, #2
 800724e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007252:	f108 38ff 	add.w	r8, r8, #4294967295
 8007256:	f04f 0c00 	mov.w	ip, #0
 800725a:	fbb8 f9f3 	udiv	r9, r8, r3
 800725e:	4666      	mov	r6, ip
 8007260:	fb03 8a19 	mls	sl, r3, r9, r8
 8007264:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007268:	f1be 0f09 	cmp.w	lr, #9
 800726c:	d816      	bhi.n	800729c <_strtol_l.constprop.0+0xa4>
 800726e:	4674      	mov	r4, lr
 8007270:	42a3      	cmp	r3, r4
 8007272:	dd24      	ble.n	80072be <_strtol_l.constprop.0+0xc6>
 8007274:	f1bc 0f00 	cmp.w	ip, #0
 8007278:	db1e      	blt.n	80072b8 <_strtol_l.constprop.0+0xc0>
 800727a:	45b1      	cmp	r9, r6
 800727c:	d31c      	bcc.n	80072b8 <_strtol_l.constprop.0+0xc0>
 800727e:	d101      	bne.n	8007284 <_strtol_l.constprop.0+0x8c>
 8007280:	45a2      	cmp	sl, r4
 8007282:	db19      	blt.n	80072b8 <_strtol_l.constprop.0+0xc0>
 8007284:	fb06 4603 	mla	r6, r6, r3, r4
 8007288:	f04f 0c01 	mov.w	ip, #1
 800728c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007290:	e7e8      	b.n	8007264 <_strtol_l.constprop.0+0x6c>
 8007292:	2c2b      	cmp	r4, #43	; 0x2b
 8007294:	bf04      	itt	eq
 8007296:	782c      	ldrbeq	r4, [r5, #0]
 8007298:	1cb5      	addeq	r5, r6, #2
 800729a:	e7ca      	b.n	8007232 <_strtol_l.constprop.0+0x3a>
 800729c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072a0:	f1be 0f19 	cmp.w	lr, #25
 80072a4:	d801      	bhi.n	80072aa <_strtol_l.constprop.0+0xb2>
 80072a6:	3c37      	subs	r4, #55	; 0x37
 80072a8:	e7e2      	b.n	8007270 <_strtol_l.constprop.0+0x78>
 80072aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80072ae:	f1be 0f19 	cmp.w	lr, #25
 80072b2:	d804      	bhi.n	80072be <_strtol_l.constprop.0+0xc6>
 80072b4:	3c57      	subs	r4, #87	; 0x57
 80072b6:	e7db      	b.n	8007270 <_strtol_l.constprop.0+0x78>
 80072b8:	f04f 3cff 	mov.w	ip, #4294967295
 80072bc:	e7e6      	b.n	800728c <_strtol_l.constprop.0+0x94>
 80072be:	f1bc 0f00 	cmp.w	ip, #0
 80072c2:	da05      	bge.n	80072d0 <_strtol_l.constprop.0+0xd8>
 80072c4:	2322      	movs	r3, #34	; 0x22
 80072c6:	6003      	str	r3, [r0, #0]
 80072c8:	4646      	mov	r6, r8
 80072ca:	b942      	cbnz	r2, 80072de <_strtol_l.constprop.0+0xe6>
 80072cc:	4630      	mov	r0, r6
 80072ce:	e79e      	b.n	800720e <_strtol_l.constprop.0+0x16>
 80072d0:	b107      	cbz	r7, 80072d4 <_strtol_l.constprop.0+0xdc>
 80072d2:	4276      	negs	r6, r6
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	d0f9      	beq.n	80072cc <_strtol_l.constprop.0+0xd4>
 80072d8:	f1bc 0f00 	cmp.w	ip, #0
 80072dc:	d000      	beq.n	80072e0 <_strtol_l.constprop.0+0xe8>
 80072de:	1e69      	subs	r1, r5, #1
 80072e0:	6011      	str	r1, [r2, #0]
 80072e2:	e7f3      	b.n	80072cc <_strtol_l.constprop.0+0xd4>
 80072e4:	2430      	movs	r4, #48	; 0x30
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1b1      	bne.n	800724e <_strtol_l.constprop.0+0x56>
 80072ea:	2308      	movs	r3, #8
 80072ec:	e7af      	b.n	800724e <_strtol_l.constprop.0+0x56>
 80072ee:	2c30      	cmp	r4, #48	; 0x30
 80072f0:	d0a5      	beq.n	800723e <_strtol_l.constprop.0+0x46>
 80072f2:	230a      	movs	r3, #10
 80072f4:	e7ab      	b.n	800724e <_strtol_l.constprop.0+0x56>
 80072f6:	bf00      	nop
 80072f8:	0800a231 	.word	0x0800a231

080072fc <_strtol_r>:
 80072fc:	f7ff bf7c 	b.w	80071f8 <_strtol_l.constprop.0>

08007300 <quorem>:
 8007300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	6903      	ldr	r3, [r0, #16]
 8007306:	690c      	ldr	r4, [r1, #16]
 8007308:	42a3      	cmp	r3, r4
 800730a:	4607      	mov	r7, r0
 800730c:	f2c0 8081 	blt.w	8007412 <quorem+0x112>
 8007310:	3c01      	subs	r4, #1
 8007312:	f101 0814 	add.w	r8, r1, #20
 8007316:	f100 0514 	add.w	r5, r0, #20
 800731a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007324:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007328:	3301      	adds	r3, #1
 800732a:	429a      	cmp	r2, r3
 800732c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007330:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007334:	fbb2 f6f3 	udiv	r6, r2, r3
 8007338:	d331      	bcc.n	800739e <quorem+0x9e>
 800733a:	f04f 0e00 	mov.w	lr, #0
 800733e:	4640      	mov	r0, r8
 8007340:	46ac      	mov	ip, r5
 8007342:	46f2      	mov	sl, lr
 8007344:	f850 2b04 	ldr.w	r2, [r0], #4
 8007348:	b293      	uxth	r3, r2
 800734a:	fb06 e303 	mla	r3, r6, r3, lr
 800734e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007352:	b29b      	uxth	r3, r3
 8007354:	ebaa 0303 	sub.w	r3, sl, r3
 8007358:	f8dc a000 	ldr.w	sl, [ip]
 800735c:	0c12      	lsrs	r2, r2, #16
 800735e:	fa13 f38a 	uxtah	r3, r3, sl
 8007362:	fb06 e202 	mla	r2, r6, r2, lr
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	9b00      	ldr	r3, [sp, #0]
 800736a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800736e:	b292      	uxth	r2, r2
 8007370:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007374:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007378:	f8bd 3000 	ldrh.w	r3, [sp]
 800737c:	4581      	cmp	r9, r0
 800737e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007382:	f84c 3b04 	str.w	r3, [ip], #4
 8007386:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800738a:	d2db      	bcs.n	8007344 <quorem+0x44>
 800738c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007390:	b92b      	cbnz	r3, 800739e <quorem+0x9e>
 8007392:	9b01      	ldr	r3, [sp, #4]
 8007394:	3b04      	subs	r3, #4
 8007396:	429d      	cmp	r5, r3
 8007398:	461a      	mov	r2, r3
 800739a:	d32e      	bcc.n	80073fa <quorem+0xfa>
 800739c:	613c      	str	r4, [r7, #16]
 800739e:	4638      	mov	r0, r7
 80073a0:	f001 fc90 	bl	8008cc4 <__mcmp>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	db24      	blt.n	80073f2 <quorem+0xf2>
 80073a8:	3601      	adds	r6, #1
 80073aa:	4628      	mov	r0, r5
 80073ac:	f04f 0c00 	mov.w	ip, #0
 80073b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80073b4:	f8d0 e000 	ldr.w	lr, [r0]
 80073b8:	b293      	uxth	r3, r2
 80073ba:	ebac 0303 	sub.w	r3, ip, r3
 80073be:	0c12      	lsrs	r2, r2, #16
 80073c0:	fa13 f38e 	uxtah	r3, r3, lr
 80073c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073d2:	45c1      	cmp	r9, r8
 80073d4:	f840 3b04 	str.w	r3, [r0], #4
 80073d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073dc:	d2e8      	bcs.n	80073b0 <quorem+0xb0>
 80073de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073e6:	b922      	cbnz	r2, 80073f2 <quorem+0xf2>
 80073e8:	3b04      	subs	r3, #4
 80073ea:	429d      	cmp	r5, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	d30a      	bcc.n	8007406 <quorem+0x106>
 80073f0:	613c      	str	r4, [r7, #16]
 80073f2:	4630      	mov	r0, r6
 80073f4:	b003      	add	sp, #12
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	6812      	ldr	r2, [r2, #0]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	2a00      	cmp	r2, #0
 8007400:	d1cc      	bne.n	800739c <quorem+0x9c>
 8007402:	3c01      	subs	r4, #1
 8007404:	e7c7      	b.n	8007396 <quorem+0x96>
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	3b04      	subs	r3, #4
 800740a:	2a00      	cmp	r2, #0
 800740c:	d1f0      	bne.n	80073f0 <quorem+0xf0>
 800740e:	3c01      	subs	r4, #1
 8007410:	e7eb      	b.n	80073ea <quorem+0xea>
 8007412:	2000      	movs	r0, #0
 8007414:	e7ee      	b.n	80073f4 <quorem+0xf4>
	...

08007418 <_dtoa_r>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	ed2d 8b04 	vpush	{d8-d9}
 8007420:	ec57 6b10 	vmov	r6, r7, d0
 8007424:	b093      	sub	sp, #76	; 0x4c
 8007426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007428:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800742c:	9106      	str	r1, [sp, #24]
 800742e:	ee10 aa10 	vmov	sl, s0
 8007432:	4604      	mov	r4, r0
 8007434:	9209      	str	r2, [sp, #36]	; 0x24
 8007436:	930c      	str	r3, [sp, #48]	; 0x30
 8007438:	46bb      	mov	fp, r7
 800743a:	b975      	cbnz	r5, 800745a <_dtoa_r+0x42>
 800743c:	2010      	movs	r0, #16
 800743e:	f001 f94d 	bl	80086dc <malloc>
 8007442:	4602      	mov	r2, r0
 8007444:	6260      	str	r0, [r4, #36]	; 0x24
 8007446:	b920      	cbnz	r0, 8007452 <_dtoa_r+0x3a>
 8007448:	4ba7      	ldr	r3, [pc, #668]	; (80076e8 <_dtoa_r+0x2d0>)
 800744a:	21ea      	movs	r1, #234	; 0xea
 800744c:	48a7      	ldr	r0, [pc, #668]	; (80076ec <_dtoa_r+0x2d4>)
 800744e:	f002 f8bd 	bl	80095cc <__assert_func>
 8007452:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007456:	6005      	str	r5, [r0, #0]
 8007458:	60c5      	str	r5, [r0, #12]
 800745a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	b151      	cbz	r1, 8007476 <_dtoa_r+0x5e>
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	604a      	str	r2, [r1, #4]
 8007464:	2301      	movs	r3, #1
 8007466:	4093      	lsls	r3, r2
 8007468:	608b      	str	r3, [r1, #8]
 800746a:	4620      	mov	r0, r4
 800746c:	f001 f99e 	bl	80087ac <_Bfree>
 8007470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	1e3b      	subs	r3, r7, #0
 8007478:	bfaa      	itet	ge
 800747a:	2300      	movge	r3, #0
 800747c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007480:	f8c8 3000 	strge.w	r3, [r8]
 8007484:	4b9a      	ldr	r3, [pc, #616]	; (80076f0 <_dtoa_r+0x2d8>)
 8007486:	bfbc      	itt	lt
 8007488:	2201      	movlt	r2, #1
 800748a:	f8c8 2000 	strlt.w	r2, [r8]
 800748e:	ea33 030b 	bics.w	r3, r3, fp
 8007492:	d11b      	bne.n	80074cc <_dtoa_r+0xb4>
 8007494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007496:	f242 730f 	movw	r3, #9999	; 0x270f
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074a0:	4333      	orrs	r3, r6
 80074a2:	f000 8592 	beq.w	8007fca <_dtoa_r+0xbb2>
 80074a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a8:	b963      	cbnz	r3, 80074c4 <_dtoa_r+0xac>
 80074aa:	4b92      	ldr	r3, [pc, #584]	; (80076f4 <_dtoa_r+0x2dc>)
 80074ac:	e022      	b.n	80074f4 <_dtoa_r+0xdc>
 80074ae:	4b92      	ldr	r3, [pc, #584]	; (80076f8 <_dtoa_r+0x2e0>)
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	3308      	adds	r3, #8
 80074b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	9801      	ldr	r0, [sp, #4]
 80074ba:	b013      	add	sp, #76	; 0x4c
 80074bc:	ecbd 8b04 	vpop	{d8-d9}
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	4b8b      	ldr	r3, [pc, #556]	; (80076f4 <_dtoa_r+0x2dc>)
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	3303      	adds	r3, #3
 80074ca:	e7f3      	b.n	80074b4 <_dtoa_r+0x9c>
 80074cc:	2200      	movs	r2, #0
 80074ce:	2300      	movs	r3, #0
 80074d0:	4650      	mov	r0, sl
 80074d2:	4659      	mov	r1, fp
 80074d4:	f7f9 faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d8:	ec4b ab19 	vmov	d9, sl, fp
 80074dc:	4680      	mov	r8, r0
 80074de:	b158      	cbz	r0, 80074f8 <_dtoa_r+0xe0>
 80074e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074e2:	2301      	movs	r3, #1
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 856b 	beq.w	8007fc4 <_dtoa_r+0xbac>
 80074ee:	4883      	ldr	r0, [pc, #524]	; (80076fc <_dtoa_r+0x2e4>)
 80074f0:	6018      	str	r0, [r3, #0]
 80074f2:	1e43      	subs	r3, r0, #1
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	e7df      	b.n	80074b8 <_dtoa_r+0xa0>
 80074f8:	ec4b ab10 	vmov	d0, sl, fp
 80074fc:	aa10      	add	r2, sp, #64	; 0x40
 80074fe:	a911      	add	r1, sp, #68	; 0x44
 8007500:	4620      	mov	r0, r4
 8007502:	f001 fd01 	bl	8008f08 <__d2b>
 8007506:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800750a:	ee08 0a10 	vmov	s16, r0
 800750e:	2d00      	cmp	r5, #0
 8007510:	f000 8084 	beq.w	800761c <_dtoa_r+0x204>
 8007514:	ee19 3a90 	vmov	r3, s19
 8007518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800751c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007520:	4656      	mov	r6, sl
 8007522:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800752a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800752e:	4b74      	ldr	r3, [pc, #464]	; (8007700 <_dtoa_r+0x2e8>)
 8007530:	2200      	movs	r2, #0
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f8 fea7 	bl	8000288 <__aeabi_dsub>
 800753a:	a365      	add	r3, pc, #404	; (adr r3, 80076d0 <_dtoa_r+0x2b8>)
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f7f9 f85a 	bl	80005f8 <__aeabi_dmul>
 8007544:	a364      	add	r3, pc, #400	; (adr r3, 80076d8 <_dtoa_r+0x2c0>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f7f8 fe9f 	bl	800028c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	4628      	mov	r0, r5
 8007552:	460f      	mov	r7, r1
 8007554:	f7f8 ffe6 	bl	8000524 <__aeabi_i2d>
 8007558:	a361      	add	r3, pc, #388	; (adr r3, 80076e0 <_dtoa_r+0x2c8>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f9 f84b 	bl	80005f8 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f8 fe8f 	bl	800028c <__adddf3>
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	f7f9 faf1 	bl	8000b58 <__aeabi_d2iz>
 8007576:	2200      	movs	r2, #0
 8007578:	9000      	str	r0, [sp, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	4630      	mov	r0, r6
 800757e:	4639      	mov	r1, r7
 8007580:	f7f9 faac 	bl	8000adc <__aeabi_dcmplt>
 8007584:	b150      	cbz	r0, 800759c <_dtoa_r+0x184>
 8007586:	9800      	ldr	r0, [sp, #0]
 8007588:	f7f8 ffcc 	bl	8000524 <__aeabi_i2d>
 800758c:	4632      	mov	r2, r6
 800758e:	463b      	mov	r3, r7
 8007590:	f7f9 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007594:	b910      	cbnz	r0, 800759c <_dtoa_r+0x184>
 8007596:	9b00      	ldr	r3, [sp, #0]
 8007598:	3b01      	subs	r3, #1
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	2b16      	cmp	r3, #22
 80075a0:	d85a      	bhi.n	8007658 <_dtoa_r+0x240>
 80075a2:	9a00      	ldr	r2, [sp, #0]
 80075a4:	4b57      	ldr	r3, [pc, #348]	; (8007704 <_dtoa_r+0x2ec>)
 80075a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	ec51 0b19 	vmov	r0, r1, d9
 80075b2:	f7f9 fa93 	bl	8000adc <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d050      	beq.n	800765c <_dtoa_r+0x244>
 80075ba:	9b00      	ldr	r3, [sp, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	2300      	movs	r3, #0
 80075c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075c6:	1b5d      	subs	r5, r3, r5
 80075c8:	1e6b      	subs	r3, r5, #1
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	bf45      	ittet	mi
 80075ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80075d2:	9304      	strmi	r3, [sp, #16]
 80075d4:	2300      	movpl	r3, #0
 80075d6:	2300      	movmi	r3, #0
 80075d8:	bf4c      	ite	mi
 80075da:	9305      	strmi	r3, [sp, #20]
 80075dc:	9304      	strpl	r3, [sp, #16]
 80075de:	9b00      	ldr	r3, [sp, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db3d      	blt.n	8007660 <_dtoa_r+0x248>
 80075e4:	9b05      	ldr	r3, [sp, #20]
 80075e6:	9a00      	ldr	r2, [sp, #0]
 80075e8:	920a      	str	r2, [sp, #40]	; 0x28
 80075ea:	4413      	add	r3, r2
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	2300      	movs	r3, #0
 80075f0:	9307      	str	r3, [sp, #28]
 80075f2:	9b06      	ldr	r3, [sp, #24]
 80075f4:	2b09      	cmp	r3, #9
 80075f6:	f200 8089 	bhi.w	800770c <_dtoa_r+0x2f4>
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	bfc4      	itt	gt
 80075fe:	3b04      	subgt	r3, #4
 8007600:	9306      	strgt	r3, [sp, #24]
 8007602:	9b06      	ldr	r3, [sp, #24]
 8007604:	f1a3 0302 	sub.w	r3, r3, #2
 8007608:	bfcc      	ite	gt
 800760a:	2500      	movgt	r5, #0
 800760c:	2501      	movle	r5, #1
 800760e:	2b03      	cmp	r3, #3
 8007610:	f200 8087 	bhi.w	8007722 <_dtoa_r+0x30a>
 8007614:	e8df f003 	tbb	[pc, r3]
 8007618:	59383a2d 	.word	0x59383a2d
 800761c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007620:	441d      	add	r5, r3
 8007622:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007626:	2b20      	cmp	r3, #32
 8007628:	bfc1      	itttt	gt
 800762a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800762e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007632:	fa0b f303 	lslgt.w	r3, fp, r3
 8007636:	fa26 f000 	lsrgt.w	r0, r6, r0
 800763a:	bfda      	itte	le
 800763c:	f1c3 0320 	rsble	r3, r3, #32
 8007640:	fa06 f003 	lslle.w	r0, r6, r3
 8007644:	4318      	orrgt	r0, r3
 8007646:	f7f8 ff5d 	bl	8000504 <__aeabi_ui2d>
 800764a:	2301      	movs	r3, #1
 800764c:	4606      	mov	r6, r0
 800764e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007652:	3d01      	subs	r5, #1
 8007654:	930e      	str	r3, [sp, #56]	; 0x38
 8007656:	e76a      	b.n	800752e <_dtoa_r+0x116>
 8007658:	2301      	movs	r3, #1
 800765a:	e7b2      	b.n	80075c2 <_dtoa_r+0x1aa>
 800765c:	900b      	str	r0, [sp, #44]	; 0x2c
 800765e:	e7b1      	b.n	80075c4 <_dtoa_r+0x1ac>
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	9a00      	ldr	r2, [sp, #0]
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	9304      	str	r3, [sp, #16]
 8007668:	4253      	negs	r3, r2
 800766a:	9307      	str	r3, [sp, #28]
 800766c:	2300      	movs	r3, #0
 800766e:	930a      	str	r3, [sp, #40]	; 0x28
 8007670:	e7bf      	b.n	80075f2 <_dtoa_r+0x1da>
 8007672:	2300      	movs	r3, #0
 8007674:	9308      	str	r3, [sp, #32]
 8007676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	dc55      	bgt.n	8007728 <_dtoa_r+0x310>
 800767c:	2301      	movs	r3, #1
 800767e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007682:	461a      	mov	r2, r3
 8007684:	9209      	str	r2, [sp, #36]	; 0x24
 8007686:	e00c      	b.n	80076a2 <_dtoa_r+0x28a>
 8007688:	2301      	movs	r3, #1
 800768a:	e7f3      	b.n	8007674 <_dtoa_r+0x25c>
 800768c:	2300      	movs	r3, #0
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	9308      	str	r3, [sp, #32]
 8007692:	9b00      	ldr	r3, [sp, #0]
 8007694:	4413      	add	r3, r2
 8007696:	9302      	str	r3, [sp, #8]
 8007698:	3301      	adds	r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	bfb8      	it	lt
 80076a0:	2301      	movlt	r3, #1
 80076a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076a4:	2200      	movs	r2, #0
 80076a6:	6042      	str	r2, [r0, #4]
 80076a8:	2204      	movs	r2, #4
 80076aa:	f102 0614 	add.w	r6, r2, #20
 80076ae:	429e      	cmp	r6, r3
 80076b0:	6841      	ldr	r1, [r0, #4]
 80076b2:	d93d      	bls.n	8007730 <_dtoa_r+0x318>
 80076b4:	4620      	mov	r0, r4
 80076b6:	f001 f839 	bl	800872c <_Balloc>
 80076ba:	9001      	str	r0, [sp, #4]
 80076bc:	2800      	cmp	r0, #0
 80076be:	d13b      	bne.n	8007738 <_dtoa_r+0x320>
 80076c0:	4b11      	ldr	r3, [pc, #68]	; (8007708 <_dtoa_r+0x2f0>)
 80076c2:	4602      	mov	r2, r0
 80076c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076c8:	e6c0      	b.n	800744c <_dtoa_r+0x34>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e7df      	b.n	800768e <_dtoa_r+0x276>
 80076ce:	bf00      	nop
 80076d0:	636f4361 	.word	0x636f4361
 80076d4:	3fd287a7 	.word	0x3fd287a7
 80076d8:	8b60c8b3 	.word	0x8b60c8b3
 80076dc:	3fc68a28 	.word	0x3fc68a28
 80076e0:	509f79fb 	.word	0x509f79fb
 80076e4:	3fd34413 	.word	0x3fd34413
 80076e8:	0800a33e 	.word	0x0800a33e
 80076ec:	0800a355 	.word	0x0800a355
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	0800a33a 	.word	0x0800a33a
 80076f8:	0800a331 	.word	0x0800a331
 80076fc:	0800a1b1 	.word	0x0800a1b1
 8007700:	3ff80000 	.word	0x3ff80000
 8007704:	0800a4c0 	.word	0x0800a4c0
 8007708:	0800a3b0 	.word	0x0800a3b0
 800770c:	2501      	movs	r5, #1
 800770e:	2300      	movs	r3, #0
 8007710:	9306      	str	r3, [sp, #24]
 8007712:	9508      	str	r5, [sp, #32]
 8007714:	f04f 33ff 	mov.w	r3, #4294967295
 8007718:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	2312      	movs	r3, #18
 8007720:	e7b0      	b.n	8007684 <_dtoa_r+0x26c>
 8007722:	2301      	movs	r3, #1
 8007724:	9308      	str	r3, [sp, #32]
 8007726:	e7f5      	b.n	8007714 <_dtoa_r+0x2fc>
 8007728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800772e:	e7b8      	b.n	80076a2 <_dtoa_r+0x28a>
 8007730:	3101      	adds	r1, #1
 8007732:	6041      	str	r1, [r0, #4]
 8007734:	0052      	lsls	r2, r2, #1
 8007736:	e7b8      	b.n	80076aa <_dtoa_r+0x292>
 8007738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800773a:	9a01      	ldr	r2, [sp, #4]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	2b0e      	cmp	r3, #14
 8007742:	f200 809d 	bhi.w	8007880 <_dtoa_r+0x468>
 8007746:	2d00      	cmp	r5, #0
 8007748:	f000 809a 	beq.w	8007880 <_dtoa_r+0x468>
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	dd32      	ble.n	80077b8 <_dtoa_r+0x3a0>
 8007752:	4ab7      	ldr	r2, [pc, #732]	; (8007a30 <_dtoa_r+0x618>)
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800775c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007760:	9b00      	ldr	r3, [sp, #0]
 8007762:	05d8      	lsls	r0, r3, #23
 8007764:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007768:	d516      	bpl.n	8007798 <_dtoa_r+0x380>
 800776a:	4bb2      	ldr	r3, [pc, #712]	; (8007a34 <_dtoa_r+0x61c>)
 800776c:	ec51 0b19 	vmov	r0, r1, d9
 8007770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007774:	f7f9 f86a 	bl	800084c <__aeabi_ddiv>
 8007778:	f007 070f 	and.w	r7, r7, #15
 800777c:	4682      	mov	sl, r0
 800777e:	468b      	mov	fp, r1
 8007780:	2503      	movs	r5, #3
 8007782:	4eac      	ldr	r6, [pc, #688]	; (8007a34 <_dtoa_r+0x61c>)
 8007784:	b957      	cbnz	r7, 800779c <_dtoa_r+0x384>
 8007786:	4642      	mov	r2, r8
 8007788:	464b      	mov	r3, r9
 800778a:	4650      	mov	r0, sl
 800778c:	4659      	mov	r1, fp
 800778e:	f7f9 f85d 	bl	800084c <__aeabi_ddiv>
 8007792:	4682      	mov	sl, r0
 8007794:	468b      	mov	fp, r1
 8007796:	e028      	b.n	80077ea <_dtoa_r+0x3d2>
 8007798:	2502      	movs	r5, #2
 800779a:	e7f2      	b.n	8007782 <_dtoa_r+0x36a>
 800779c:	07f9      	lsls	r1, r7, #31
 800779e:	d508      	bpl.n	80077b2 <_dtoa_r+0x39a>
 80077a0:	4640      	mov	r0, r8
 80077a2:	4649      	mov	r1, r9
 80077a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077a8:	f7f8 ff26 	bl	80005f8 <__aeabi_dmul>
 80077ac:	3501      	adds	r5, #1
 80077ae:	4680      	mov	r8, r0
 80077b0:	4689      	mov	r9, r1
 80077b2:	107f      	asrs	r7, r7, #1
 80077b4:	3608      	adds	r6, #8
 80077b6:	e7e5      	b.n	8007784 <_dtoa_r+0x36c>
 80077b8:	f000 809b 	beq.w	80078f2 <_dtoa_r+0x4da>
 80077bc:	9b00      	ldr	r3, [sp, #0]
 80077be:	4f9d      	ldr	r7, [pc, #628]	; (8007a34 <_dtoa_r+0x61c>)
 80077c0:	425e      	negs	r6, r3
 80077c2:	4b9b      	ldr	r3, [pc, #620]	; (8007a30 <_dtoa_r+0x618>)
 80077c4:	f006 020f 	and.w	r2, r6, #15
 80077c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	ec51 0b19 	vmov	r0, r1, d9
 80077d4:	f7f8 ff10 	bl	80005f8 <__aeabi_dmul>
 80077d8:	1136      	asrs	r6, r6, #4
 80077da:	4682      	mov	sl, r0
 80077dc:	468b      	mov	fp, r1
 80077de:	2300      	movs	r3, #0
 80077e0:	2502      	movs	r5, #2
 80077e2:	2e00      	cmp	r6, #0
 80077e4:	d17a      	bne.n	80078dc <_dtoa_r+0x4c4>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1d3      	bne.n	8007792 <_dtoa_r+0x37a>
 80077ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8082 	beq.w	80078f6 <_dtoa_r+0x4de>
 80077f2:	4b91      	ldr	r3, [pc, #580]	; (8007a38 <_dtoa_r+0x620>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	4650      	mov	r0, sl
 80077f8:	4659      	mov	r1, fp
 80077fa:	f7f9 f96f 	bl	8000adc <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d079      	beq.n	80078f6 <_dtoa_r+0x4de>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d076      	beq.n	80078f6 <_dtoa_r+0x4de>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd36      	ble.n	800787c <_dtoa_r+0x464>
 800780e:	9b00      	ldr	r3, [sp, #0]
 8007810:	4650      	mov	r0, sl
 8007812:	4659      	mov	r1, fp
 8007814:	1e5f      	subs	r7, r3, #1
 8007816:	2200      	movs	r2, #0
 8007818:	4b88      	ldr	r3, [pc, #544]	; (8007a3c <_dtoa_r+0x624>)
 800781a:	f7f8 feed 	bl	80005f8 <__aeabi_dmul>
 800781e:	9e02      	ldr	r6, [sp, #8]
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	3501      	adds	r5, #1
 8007826:	4628      	mov	r0, r5
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	4652      	mov	r2, sl
 800782e:	465b      	mov	r3, fp
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	4b82      	ldr	r3, [pc, #520]	; (8007a40 <_dtoa_r+0x628>)
 8007836:	2200      	movs	r2, #0
 8007838:	f7f8 fd28 	bl	800028c <__adddf3>
 800783c:	46d0      	mov	r8, sl
 800783e:	46d9      	mov	r9, fp
 8007840:	4682      	mov	sl, r0
 8007842:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007846:	2e00      	cmp	r6, #0
 8007848:	d158      	bne.n	80078fc <_dtoa_r+0x4e4>
 800784a:	4b7e      	ldr	r3, [pc, #504]	; (8007a44 <_dtoa_r+0x62c>)
 800784c:	2200      	movs	r2, #0
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f7f8 fd19 	bl	8000288 <__aeabi_dsub>
 8007856:	4652      	mov	r2, sl
 8007858:	465b      	mov	r3, fp
 800785a:	4680      	mov	r8, r0
 800785c:	4689      	mov	r9, r1
 800785e:	f7f9 f95b 	bl	8000b18 <__aeabi_dcmpgt>
 8007862:	2800      	cmp	r0, #0
 8007864:	f040 8295 	bne.w	8007d92 <_dtoa_r+0x97a>
 8007868:	4652      	mov	r2, sl
 800786a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f9 f933 	bl	8000adc <__aeabi_dcmplt>
 8007876:	2800      	cmp	r0, #0
 8007878:	f040 8289 	bne.w	8007d8e <_dtoa_r+0x976>
 800787c:	ec5b ab19 	vmov	sl, fp, d9
 8007880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007882:	2b00      	cmp	r3, #0
 8007884:	f2c0 8148 	blt.w	8007b18 <_dtoa_r+0x700>
 8007888:	9a00      	ldr	r2, [sp, #0]
 800788a:	2a0e      	cmp	r2, #14
 800788c:	f300 8144 	bgt.w	8007b18 <_dtoa_r+0x700>
 8007890:	4b67      	ldr	r3, [pc, #412]	; (8007a30 <_dtoa_r+0x618>)
 8007892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007896:	e9d3 8900 	ldrd	r8, r9, [r3]
 800789a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	f280 80d5 	bge.w	8007a4c <_dtoa_r+0x634>
 80078a2:	9b03      	ldr	r3, [sp, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f300 80d1 	bgt.w	8007a4c <_dtoa_r+0x634>
 80078aa:	f040 826f 	bne.w	8007d8c <_dtoa_r+0x974>
 80078ae:	4b65      	ldr	r3, [pc, #404]	; (8007a44 <_dtoa_r+0x62c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	4640      	mov	r0, r8
 80078b4:	4649      	mov	r1, r9
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	4652      	mov	r2, sl
 80078bc:	465b      	mov	r3, fp
 80078be:	f7f9 f921 	bl	8000b04 <__aeabi_dcmpge>
 80078c2:	9e03      	ldr	r6, [sp, #12]
 80078c4:	4637      	mov	r7, r6
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f040 8245 	bne.w	8007d56 <_dtoa_r+0x93e>
 80078cc:	9d01      	ldr	r5, [sp, #4]
 80078ce:	2331      	movs	r3, #49	; 0x31
 80078d0:	f805 3b01 	strb.w	r3, [r5], #1
 80078d4:	9b00      	ldr	r3, [sp, #0]
 80078d6:	3301      	adds	r3, #1
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	e240      	b.n	8007d5e <_dtoa_r+0x946>
 80078dc:	07f2      	lsls	r2, r6, #31
 80078de:	d505      	bpl.n	80078ec <_dtoa_r+0x4d4>
 80078e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e4:	f7f8 fe88 	bl	80005f8 <__aeabi_dmul>
 80078e8:	3501      	adds	r5, #1
 80078ea:	2301      	movs	r3, #1
 80078ec:	1076      	asrs	r6, r6, #1
 80078ee:	3708      	adds	r7, #8
 80078f0:	e777      	b.n	80077e2 <_dtoa_r+0x3ca>
 80078f2:	2502      	movs	r5, #2
 80078f4:	e779      	b.n	80077ea <_dtoa_r+0x3d2>
 80078f6:	9f00      	ldr	r7, [sp, #0]
 80078f8:	9e03      	ldr	r6, [sp, #12]
 80078fa:	e794      	b.n	8007826 <_dtoa_r+0x40e>
 80078fc:	9901      	ldr	r1, [sp, #4]
 80078fe:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <_dtoa_r+0x618>)
 8007900:	4431      	add	r1, r6
 8007902:	910d      	str	r1, [sp, #52]	; 0x34
 8007904:	9908      	ldr	r1, [sp, #32]
 8007906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800790a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800790e:	2900      	cmp	r1, #0
 8007910:	d043      	beq.n	800799a <_dtoa_r+0x582>
 8007912:	494d      	ldr	r1, [pc, #308]	; (8007a48 <_dtoa_r+0x630>)
 8007914:	2000      	movs	r0, #0
 8007916:	f7f8 ff99 	bl	800084c <__aeabi_ddiv>
 800791a:	4652      	mov	r2, sl
 800791c:	465b      	mov	r3, fp
 800791e:	f7f8 fcb3 	bl	8000288 <__aeabi_dsub>
 8007922:	9d01      	ldr	r5, [sp, #4]
 8007924:	4682      	mov	sl, r0
 8007926:	468b      	mov	fp, r1
 8007928:	4649      	mov	r1, r9
 800792a:	4640      	mov	r0, r8
 800792c:	f7f9 f914 	bl	8000b58 <__aeabi_d2iz>
 8007930:	4606      	mov	r6, r0
 8007932:	f7f8 fdf7 	bl	8000524 <__aeabi_i2d>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	f7f8 fca3 	bl	8000288 <__aeabi_dsub>
 8007942:	3630      	adds	r6, #48	; 0x30
 8007944:	f805 6b01 	strb.w	r6, [r5], #1
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	f7f9 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8007954:	2800      	cmp	r0, #0
 8007956:	d163      	bne.n	8007a20 <_dtoa_r+0x608>
 8007958:	4642      	mov	r2, r8
 800795a:	464b      	mov	r3, r9
 800795c:	4936      	ldr	r1, [pc, #216]	; (8007a38 <_dtoa_r+0x620>)
 800795e:	2000      	movs	r0, #0
 8007960:	f7f8 fc92 	bl	8000288 <__aeabi_dsub>
 8007964:	4652      	mov	r2, sl
 8007966:	465b      	mov	r3, fp
 8007968:	f7f9 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800796c:	2800      	cmp	r0, #0
 800796e:	f040 80b5 	bne.w	8007adc <_dtoa_r+0x6c4>
 8007972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007974:	429d      	cmp	r5, r3
 8007976:	d081      	beq.n	800787c <_dtoa_r+0x464>
 8007978:	4b30      	ldr	r3, [pc, #192]	; (8007a3c <_dtoa_r+0x624>)
 800797a:	2200      	movs	r2, #0
 800797c:	4650      	mov	r0, sl
 800797e:	4659      	mov	r1, fp
 8007980:	f7f8 fe3a 	bl	80005f8 <__aeabi_dmul>
 8007984:	4b2d      	ldr	r3, [pc, #180]	; (8007a3c <_dtoa_r+0x624>)
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	2200      	movs	r2, #0
 8007990:	f7f8 fe32 	bl	80005f8 <__aeabi_dmul>
 8007994:	4680      	mov	r8, r0
 8007996:	4689      	mov	r9, r1
 8007998:	e7c6      	b.n	8007928 <_dtoa_r+0x510>
 800799a:	4650      	mov	r0, sl
 800799c:	4659      	mov	r1, fp
 800799e:	f7f8 fe2b 	bl	80005f8 <__aeabi_dmul>
 80079a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a4:	9d01      	ldr	r5, [sp, #4]
 80079a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a8:	4682      	mov	sl, r0
 80079aa:	468b      	mov	fp, r1
 80079ac:	4649      	mov	r1, r9
 80079ae:	4640      	mov	r0, r8
 80079b0:	f7f9 f8d2 	bl	8000b58 <__aeabi_d2iz>
 80079b4:	4606      	mov	r6, r0
 80079b6:	f7f8 fdb5 	bl	8000524 <__aeabi_i2d>
 80079ba:	3630      	adds	r6, #48	; 0x30
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f8 fc60 	bl	8000288 <__aeabi_dsub>
 80079c8:	f805 6b01 	strb.w	r6, [r5], #1
 80079cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ce:	429d      	cmp	r5, r3
 80079d0:	4680      	mov	r8, r0
 80079d2:	4689      	mov	r9, r1
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	d124      	bne.n	8007a24 <_dtoa_r+0x60c>
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <_dtoa_r+0x630>)
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	f7f8 fc54 	bl	800028c <__adddf3>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f9 f894 	bl	8000b18 <__aeabi_dcmpgt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d173      	bne.n	8007adc <_dtoa_r+0x6c4>
 80079f4:	4652      	mov	r2, sl
 80079f6:	465b      	mov	r3, fp
 80079f8:	4913      	ldr	r1, [pc, #76]	; (8007a48 <_dtoa_r+0x630>)
 80079fa:	2000      	movs	r0, #0
 80079fc:	f7f8 fc44 	bl	8000288 <__aeabi_dsub>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4640      	mov	r0, r8
 8007a06:	4649      	mov	r1, r9
 8007a08:	f7f9 f868 	bl	8000adc <__aeabi_dcmplt>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f43f af35 	beq.w	800787c <_dtoa_r+0x464>
 8007a12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a14:	1e6b      	subs	r3, r5, #1
 8007a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a1c:	2b30      	cmp	r3, #48	; 0x30
 8007a1e:	d0f8      	beq.n	8007a12 <_dtoa_r+0x5fa>
 8007a20:	9700      	str	r7, [sp, #0]
 8007a22:	e049      	b.n	8007ab8 <_dtoa_r+0x6a0>
 8007a24:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <_dtoa_r+0x624>)
 8007a26:	f7f8 fde7 	bl	80005f8 <__aeabi_dmul>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	4689      	mov	r9, r1
 8007a2e:	e7bd      	b.n	80079ac <_dtoa_r+0x594>
 8007a30:	0800a4c0 	.word	0x0800a4c0
 8007a34:	0800a498 	.word	0x0800a498
 8007a38:	3ff00000 	.word	0x3ff00000
 8007a3c:	40240000 	.word	0x40240000
 8007a40:	401c0000 	.word	0x401c0000
 8007a44:	40140000 	.word	0x40140000
 8007a48:	3fe00000 	.word	0x3fe00000
 8007a4c:	9d01      	ldr	r5, [sp, #4]
 8007a4e:	4656      	mov	r6, sl
 8007a50:	465f      	mov	r7, fp
 8007a52:	4642      	mov	r2, r8
 8007a54:	464b      	mov	r3, r9
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7f8 fef7 	bl	800084c <__aeabi_ddiv>
 8007a5e:	f7f9 f87b 	bl	8000b58 <__aeabi_d2iz>
 8007a62:	4682      	mov	sl, r0
 8007a64:	f7f8 fd5e 	bl	8000524 <__aeabi_i2d>
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	f7f8 fdc4 	bl	80005f8 <__aeabi_dmul>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a7c:	f7f8 fc04 	bl	8000288 <__aeabi_dsub>
 8007a80:	f805 6b01 	strb.w	r6, [r5], #1
 8007a84:	9e01      	ldr	r6, [sp, #4]
 8007a86:	9f03      	ldr	r7, [sp, #12]
 8007a88:	1bae      	subs	r6, r5, r6
 8007a8a:	42b7      	cmp	r7, r6
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	d135      	bne.n	8007afe <_dtoa_r+0x6e6>
 8007a92:	f7f8 fbfb 	bl	800028c <__adddf3>
 8007a96:	4642      	mov	r2, r8
 8007a98:	464b      	mov	r3, r9
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	f7f9 f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8007aa2:	b9d0      	cbnz	r0, 8007ada <_dtoa_r+0x6c2>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f9 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ab0:	b110      	cbz	r0, 8007ab8 <_dtoa_r+0x6a0>
 8007ab2:	f01a 0f01 	tst.w	sl, #1
 8007ab6:	d110      	bne.n	8007ada <_dtoa_r+0x6c2>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	ee18 1a10 	vmov	r1, s16
 8007abe:	f000 fe75 	bl	80087ac <_Bfree>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9800      	ldr	r0, [sp, #0]
 8007ac6:	702b      	strb	r3, [r5, #0]
 8007ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aca:	3001      	adds	r0, #1
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f43f acf1 	beq.w	80074b8 <_dtoa_r+0xa0>
 8007ad6:	601d      	str	r5, [r3, #0]
 8007ad8:	e4ee      	b.n	80074b8 <_dtoa_r+0xa0>
 8007ada:	9f00      	ldr	r7, [sp, #0]
 8007adc:	462b      	mov	r3, r5
 8007ade:	461d      	mov	r5, r3
 8007ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ae4:	2a39      	cmp	r2, #57	; 0x39
 8007ae6:	d106      	bne.n	8007af6 <_dtoa_r+0x6de>
 8007ae8:	9a01      	ldr	r2, [sp, #4]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d1f7      	bne.n	8007ade <_dtoa_r+0x6c6>
 8007aee:	9901      	ldr	r1, [sp, #4]
 8007af0:	2230      	movs	r2, #48	; 0x30
 8007af2:	3701      	adds	r7, #1
 8007af4:	700a      	strb	r2, [r1, #0]
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	3201      	adds	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	e790      	b.n	8007a20 <_dtoa_r+0x608>
 8007afe:	4ba6      	ldr	r3, [pc, #664]	; (8007d98 <_dtoa_r+0x980>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	f7f8 fd79 	bl	80005f8 <__aeabi_dmul>
 8007b06:	2200      	movs	r2, #0
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	f7f8 ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d09d      	beq.n	8007a52 <_dtoa_r+0x63a>
 8007b16:	e7cf      	b.n	8007ab8 <_dtoa_r+0x6a0>
 8007b18:	9a08      	ldr	r2, [sp, #32]
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	f000 80d7 	beq.w	8007cce <_dtoa_r+0x8b6>
 8007b20:	9a06      	ldr	r2, [sp, #24]
 8007b22:	2a01      	cmp	r2, #1
 8007b24:	f300 80ba 	bgt.w	8007c9c <_dtoa_r+0x884>
 8007b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	f000 80b2 	beq.w	8007c94 <_dtoa_r+0x87c>
 8007b30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b34:	9e07      	ldr	r6, [sp, #28]
 8007b36:	9d04      	ldr	r5, [sp, #16]
 8007b38:	9a04      	ldr	r2, [sp, #16]
 8007b3a:	441a      	add	r2, r3
 8007b3c:	9204      	str	r2, [sp, #16]
 8007b3e:	9a05      	ldr	r2, [sp, #20]
 8007b40:	2101      	movs	r1, #1
 8007b42:	441a      	add	r2, r3
 8007b44:	4620      	mov	r0, r4
 8007b46:	9205      	str	r2, [sp, #20]
 8007b48:	f000 ff32 	bl	80089b0 <__i2b>
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	dd0c      	ble.n	8007b6c <_dtoa_r+0x754>
 8007b52:	9b05      	ldr	r3, [sp, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd09      	ble.n	8007b6c <_dtoa_r+0x754>
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	bfa8      	it	ge
 8007b5e:	462b      	movge	r3, r5
 8007b60:	1ad2      	subs	r2, r2, r3
 8007b62:	9204      	str	r2, [sp, #16]
 8007b64:	9a05      	ldr	r2, [sp, #20]
 8007b66:	1aed      	subs	r5, r5, r3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	b31b      	cbz	r3, 8007bb8 <_dtoa_r+0x7a0>
 8007b70:	9b08      	ldr	r3, [sp, #32]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80af 	beq.w	8007cd6 <_dtoa_r+0x8be>
 8007b78:	2e00      	cmp	r6, #0
 8007b7a:	dd13      	ble.n	8007ba4 <_dtoa_r+0x78c>
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 ffd5 	bl	8008b30 <__pow5mult>
 8007b86:	ee18 2a10 	vmov	r2, s16
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 ff24 	bl	80089dc <__multiply>
 8007b94:	ee18 1a10 	vmov	r1, s16
 8007b98:	4680      	mov	r8, r0
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fe06 	bl	80087ac <_Bfree>
 8007ba0:	ee08 8a10 	vmov	s16, r8
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	1b9a      	subs	r2, r3, r6
 8007ba8:	d006      	beq.n	8007bb8 <_dtoa_r+0x7a0>
 8007baa:	ee18 1a10 	vmov	r1, s16
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 ffbe 	bl	8008b30 <__pow5mult>
 8007bb4:	ee08 0a10 	vmov	s16, r0
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fef8 	bl	80089b0 <__i2b>
 8007bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	f340 8088 	ble.w	8007cda <_dtoa_r+0x8c2>
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4601      	mov	r1, r0
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 ffae 	bl	8008b30 <__pow5mult>
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	4606      	mov	r6, r0
 8007bda:	f340 8081 	ble.w	8007ce0 <_dtoa_r+0x8c8>
 8007bde:	f04f 0800 	mov.w	r8, #0
 8007be2:	6933      	ldr	r3, [r6, #16]
 8007be4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007be8:	6918      	ldr	r0, [r3, #16]
 8007bea:	f000 fe91 	bl	8008910 <__hi0bits>
 8007bee:	f1c0 0020 	rsb	r0, r0, #32
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	4418      	add	r0, r3
 8007bf6:	f010 001f 	ands.w	r0, r0, #31
 8007bfa:	f000 8092 	beq.w	8007d22 <_dtoa_r+0x90a>
 8007bfe:	f1c0 0320 	rsb	r3, r0, #32
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	f340 808a 	ble.w	8007d1c <_dtoa_r+0x904>
 8007c08:	f1c0 001c 	rsb	r0, r0, #28
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	4403      	add	r3, r0
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	4403      	add	r3, r0
 8007c16:	4405      	add	r5, r0
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dd07      	ble.n	8007c30 <_dtoa_r+0x818>
 8007c20:	ee18 1a10 	vmov	r1, s16
 8007c24:	461a      	mov	r2, r3
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 ffdc 	bl	8008be4 <__lshift>
 8007c2c:	ee08 0a10 	vmov	s16, r0
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd05      	ble.n	8007c42 <_dtoa_r+0x82a>
 8007c36:	4631      	mov	r1, r6
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 ffd2 	bl	8008be4 <__lshift>
 8007c40:	4606      	mov	r6, r0
 8007c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d06e      	beq.n	8007d26 <_dtoa_r+0x90e>
 8007c48:	ee18 0a10 	vmov	r0, s16
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	f001 f839 	bl	8008cc4 <__mcmp>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	da67      	bge.n	8007d26 <_dtoa_r+0x90e>
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	220a      	movs	r2, #10
 8007c62:	2300      	movs	r3, #0
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fdc3 	bl	80087f0 <__multadd>
 8007c6a:	9b08      	ldr	r3, [sp, #32]
 8007c6c:	ee08 0a10 	vmov	s16, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 81b1 	beq.w	8007fd8 <_dtoa_r+0xbc0>
 8007c76:	2300      	movs	r3, #0
 8007c78:	4639      	mov	r1, r7
 8007c7a:	220a      	movs	r2, #10
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fdb7 	bl	80087f0 <__multadd>
 8007c82:	9b02      	ldr	r3, [sp, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	4607      	mov	r7, r0
 8007c88:	f300 808e 	bgt.w	8007da8 <_dtoa_r+0x990>
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	dc51      	bgt.n	8007d36 <_dtoa_r+0x91e>
 8007c92:	e089      	b.n	8007da8 <_dtoa_r+0x990>
 8007c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c9a:	e74b      	b.n	8007b34 <_dtoa_r+0x71c>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	1e5e      	subs	r6, r3, #1
 8007ca0:	9b07      	ldr	r3, [sp, #28]
 8007ca2:	42b3      	cmp	r3, r6
 8007ca4:	bfbf      	itttt	lt
 8007ca6:	9b07      	ldrlt	r3, [sp, #28]
 8007ca8:	9607      	strlt	r6, [sp, #28]
 8007caa:	1af2      	sublt	r2, r6, r3
 8007cac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cae:	bfb6      	itet	lt
 8007cb0:	189b      	addlt	r3, r3, r2
 8007cb2:	1b9e      	subge	r6, r3, r6
 8007cb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	bfb8      	it	lt
 8007cba:	2600      	movlt	r6, #0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bfb7      	itett	lt
 8007cc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007cc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007cc8:	1a9d      	sublt	r5, r3, r2
 8007cca:	2300      	movlt	r3, #0
 8007ccc:	e734      	b.n	8007b38 <_dtoa_r+0x720>
 8007cce:	9e07      	ldr	r6, [sp, #28]
 8007cd0:	9d04      	ldr	r5, [sp, #16]
 8007cd2:	9f08      	ldr	r7, [sp, #32]
 8007cd4:	e73b      	b.n	8007b4e <_dtoa_r+0x736>
 8007cd6:	9a07      	ldr	r2, [sp, #28]
 8007cd8:	e767      	b.n	8007baa <_dtoa_r+0x792>
 8007cda:	9b06      	ldr	r3, [sp, #24]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	dc18      	bgt.n	8007d12 <_dtoa_r+0x8fa>
 8007ce0:	f1ba 0f00 	cmp.w	sl, #0
 8007ce4:	d115      	bne.n	8007d12 <_dtoa_r+0x8fa>
 8007ce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cea:	b993      	cbnz	r3, 8007d12 <_dtoa_r+0x8fa>
 8007cec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cf0:	0d1b      	lsrs	r3, r3, #20
 8007cf2:	051b      	lsls	r3, r3, #20
 8007cf4:	b183      	cbz	r3, 8007d18 <_dtoa_r+0x900>
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	9b05      	ldr	r3, [sp, #20]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	9305      	str	r3, [sp, #20]
 8007d02:	f04f 0801 	mov.w	r8, #1
 8007d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f47f af6a 	bne.w	8007be2 <_dtoa_r+0x7ca>
 8007d0e:	2001      	movs	r0, #1
 8007d10:	e76f      	b.n	8007bf2 <_dtoa_r+0x7da>
 8007d12:	f04f 0800 	mov.w	r8, #0
 8007d16:	e7f6      	b.n	8007d06 <_dtoa_r+0x8ee>
 8007d18:	4698      	mov	r8, r3
 8007d1a:	e7f4      	b.n	8007d06 <_dtoa_r+0x8ee>
 8007d1c:	f43f af7d 	beq.w	8007c1a <_dtoa_r+0x802>
 8007d20:	4618      	mov	r0, r3
 8007d22:	301c      	adds	r0, #28
 8007d24:	e772      	b.n	8007c0c <_dtoa_r+0x7f4>
 8007d26:	9b03      	ldr	r3, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	dc37      	bgt.n	8007d9c <_dtoa_r+0x984>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	dd34      	ble.n	8007d9c <_dtoa_r+0x984>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	b96b      	cbnz	r3, 8007d56 <_dtoa_r+0x93e>
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	2205      	movs	r2, #5
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fd56 	bl	80087f0 <__multadd>
 8007d44:	4601      	mov	r1, r0
 8007d46:	4606      	mov	r6, r0
 8007d48:	ee18 0a10 	vmov	r0, s16
 8007d4c:	f000 ffba 	bl	8008cc4 <__mcmp>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f73f adbb 	bgt.w	80078cc <_dtoa_r+0x4b4>
 8007d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d58:	9d01      	ldr	r5, [sp, #4]
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	4631      	mov	r1, r6
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 fd21 	bl	80087ac <_Bfree>
 8007d6a:	2f00      	cmp	r7, #0
 8007d6c:	f43f aea4 	beq.w	8007ab8 <_dtoa_r+0x6a0>
 8007d70:	f1b8 0f00 	cmp.w	r8, #0
 8007d74:	d005      	beq.n	8007d82 <_dtoa_r+0x96a>
 8007d76:	45b8      	cmp	r8, r7
 8007d78:	d003      	beq.n	8007d82 <_dtoa_r+0x96a>
 8007d7a:	4641      	mov	r1, r8
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 fd15 	bl	80087ac <_Bfree>
 8007d82:	4639      	mov	r1, r7
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 fd11 	bl	80087ac <_Bfree>
 8007d8a:	e695      	b.n	8007ab8 <_dtoa_r+0x6a0>
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	4637      	mov	r7, r6
 8007d90:	e7e1      	b.n	8007d56 <_dtoa_r+0x93e>
 8007d92:	9700      	str	r7, [sp, #0]
 8007d94:	4637      	mov	r7, r6
 8007d96:	e599      	b.n	80078cc <_dtoa_r+0x4b4>
 8007d98:	40240000 	.word	0x40240000
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 80ca 	beq.w	8007f38 <_dtoa_r+0xb20>
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	9302      	str	r3, [sp, #8]
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	dd05      	ble.n	8007db8 <_dtoa_r+0x9a0>
 8007dac:	4639      	mov	r1, r7
 8007dae:	462a      	mov	r2, r5
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 ff17 	bl	8008be4 <__lshift>
 8007db6:	4607      	mov	r7, r0
 8007db8:	f1b8 0f00 	cmp.w	r8, #0
 8007dbc:	d05b      	beq.n	8007e76 <_dtoa_r+0xa5e>
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fcb3 	bl	800872c <_Balloc>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	b928      	cbnz	r0, 8007dd6 <_dtoa_r+0x9be>
 8007dca:	4b87      	ldr	r3, [pc, #540]	; (8007fe8 <_dtoa_r+0xbd0>)
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007dd2:	f7ff bb3b 	b.w	800744c <_dtoa_r+0x34>
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	3202      	adds	r2, #2
 8007dda:	0092      	lsls	r2, r2, #2
 8007ddc:	f107 010c 	add.w	r1, r7, #12
 8007de0:	300c      	adds	r0, #12
 8007de2:	f000 fc95 	bl	8008710 <memcpy>
 8007de6:	2201      	movs	r2, #1
 8007de8:	4629      	mov	r1, r5
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 fefa 	bl	8008be4 <__lshift>
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	f103 0901 	add.w	r9, r3, #1
 8007df6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	9305      	str	r3, [sp, #20]
 8007dfe:	f00a 0301 	and.w	r3, sl, #1
 8007e02:	46b8      	mov	r8, r7
 8007e04:	9304      	str	r3, [sp, #16]
 8007e06:	4607      	mov	r7, r0
 8007e08:	4631      	mov	r1, r6
 8007e0a:	ee18 0a10 	vmov	r0, s16
 8007e0e:	f7ff fa77 	bl	8007300 <quorem>
 8007e12:	4641      	mov	r1, r8
 8007e14:	9002      	str	r0, [sp, #8]
 8007e16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e1a:	ee18 0a10 	vmov	r0, s16
 8007e1e:	f000 ff51 	bl	8008cc4 <__mcmp>
 8007e22:	463a      	mov	r2, r7
 8007e24:	9003      	str	r0, [sp, #12]
 8007e26:	4631      	mov	r1, r6
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 ff67 	bl	8008cfc <__mdiff>
 8007e2e:	68c2      	ldr	r2, [r0, #12]
 8007e30:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e34:	4605      	mov	r5, r0
 8007e36:	bb02      	cbnz	r2, 8007e7a <_dtoa_r+0xa62>
 8007e38:	4601      	mov	r1, r0
 8007e3a:	ee18 0a10 	vmov	r0, s16
 8007e3e:	f000 ff41 	bl	8008cc4 <__mcmp>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4629      	mov	r1, r5
 8007e46:	4620      	mov	r0, r4
 8007e48:	9207      	str	r2, [sp, #28]
 8007e4a:	f000 fcaf 	bl	80087ac <_Bfree>
 8007e4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e52:	ea43 0102 	orr.w	r1, r3, r2
 8007e56:	9b04      	ldr	r3, [sp, #16]
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	464d      	mov	r5, r9
 8007e5c:	d10f      	bne.n	8007e7e <_dtoa_r+0xa66>
 8007e5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e62:	d02a      	beq.n	8007eba <_dtoa_r+0xaa2>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd02      	ble.n	8007e70 <_dtoa_r+0xa58>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e70:	f88b a000 	strb.w	sl, [fp]
 8007e74:	e775      	b.n	8007d62 <_dtoa_r+0x94a>
 8007e76:	4638      	mov	r0, r7
 8007e78:	e7ba      	b.n	8007df0 <_dtoa_r+0x9d8>
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	e7e2      	b.n	8007e44 <_dtoa_r+0xa2c>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	db04      	blt.n	8007e8e <_dtoa_r+0xa76>
 8007e84:	9906      	ldr	r1, [sp, #24]
 8007e86:	430b      	orrs	r3, r1
 8007e88:	9904      	ldr	r1, [sp, #16]
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	d122      	bne.n	8007ed4 <_dtoa_r+0xabc>
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	ddee      	ble.n	8007e70 <_dtoa_r+0xa58>
 8007e92:	ee18 1a10 	vmov	r1, s16
 8007e96:	2201      	movs	r2, #1
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 fea3 	bl	8008be4 <__lshift>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	ee08 0a10 	vmov	s16, r0
 8007ea4:	f000 ff0e 	bl	8008cc4 <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	dc03      	bgt.n	8007eb4 <_dtoa_r+0xa9c>
 8007eac:	d1e0      	bne.n	8007e70 <_dtoa_r+0xa58>
 8007eae:	f01a 0f01 	tst.w	sl, #1
 8007eb2:	d0dd      	beq.n	8007e70 <_dtoa_r+0xa58>
 8007eb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007eb8:	d1d7      	bne.n	8007e6a <_dtoa_r+0xa52>
 8007eba:	2339      	movs	r3, #57	; 0x39
 8007ebc:	f88b 3000 	strb.w	r3, [fp]
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	461d      	mov	r5, r3
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eca:	2a39      	cmp	r2, #57	; 0x39
 8007ecc:	d071      	beq.n	8007fb2 <_dtoa_r+0xb9a>
 8007ece:	3201      	adds	r2, #1
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	e746      	b.n	8007d62 <_dtoa_r+0x94a>
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	dd07      	ble.n	8007ee8 <_dtoa_r+0xad0>
 8007ed8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007edc:	d0ed      	beq.n	8007eba <_dtoa_r+0xaa2>
 8007ede:	f10a 0301 	add.w	r3, sl, #1
 8007ee2:	f88b 3000 	strb.w	r3, [fp]
 8007ee6:	e73c      	b.n	8007d62 <_dtoa_r+0x94a>
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007eee:	4599      	cmp	r9, r3
 8007ef0:	d047      	beq.n	8007f82 <_dtoa_r+0xb6a>
 8007ef2:	ee18 1a10 	vmov	r1, s16
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	220a      	movs	r2, #10
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 fc78 	bl	80087f0 <__multadd>
 8007f00:	45b8      	cmp	r8, r7
 8007f02:	ee08 0a10 	vmov	s16, r0
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	f04f 020a 	mov.w	r2, #10
 8007f0e:	4641      	mov	r1, r8
 8007f10:	4620      	mov	r0, r4
 8007f12:	d106      	bne.n	8007f22 <_dtoa_r+0xb0a>
 8007f14:	f000 fc6c 	bl	80087f0 <__multadd>
 8007f18:	4680      	mov	r8, r0
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	f109 0901 	add.w	r9, r9, #1
 8007f20:	e772      	b.n	8007e08 <_dtoa_r+0x9f0>
 8007f22:	f000 fc65 	bl	80087f0 <__multadd>
 8007f26:	4639      	mov	r1, r7
 8007f28:	4680      	mov	r8, r0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fc5e 	bl	80087f0 <__multadd>
 8007f34:	4607      	mov	r7, r0
 8007f36:	e7f1      	b.n	8007f1c <_dtoa_r+0xb04>
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	9d01      	ldr	r5, [sp, #4]
 8007f3e:	ee18 0a10 	vmov	r0, s16
 8007f42:	4631      	mov	r1, r6
 8007f44:	f7ff f9dc 	bl	8007300 <quorem>
 8007f48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f4c:	9b01      	ldr	r3, [sp, #4]
 8007f4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007f52:	1aea      	subs	r2, r5, r3
 8007f54:	9b02      	ldr	r3, [sp, #8]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	dd09      	ble.n	8007f6e <_dtoa_r+0xb56>
 8007f5a:	ee18 1a10 	vmov	r1, s16
 8007f5e:	2300      	movs	r3, #0
 8007f60:	220a      	movs	r2, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 fc44 	bl	80087f0 <__multadd>
 8007f68:	ee08 0a10 	vmov	s16, r0
 8007f6c:	e7e7      	b.n	8007f3e <_dtoa_r+0xb26>
 8007f6e:	9b02      	ldr	r3, [sp, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfc8      	it	gt
 8007f74:	461d      	movgt	r5, r3
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	bfd8      	it	le
 8007f7a:	2501      	movle	r5, #1
 8007f7c:	441d      	add	r5, r3
 8007f7e:	f04f 0800 	mov.w	r8, #0
 8007f82:	ee18 1a10 	vmov	r1, s16
 8007f86:	2201      	movs	r2, #1
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fe2b 	bl	8008be4 <__lshift>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	ee08 0a10 	vmov	s16, r0
 8007f94:	f000 fe96 	bl	8008cc4 <__mcmp>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	dc91      	bgt.n	8007ec0 <_dtoa_r+0xaa8>
 8007f9c:	d102      	bne.n	8007fa4 <_dtoa_r+0xb8c>
 8007f9e:	f01a 0f01 	tst.w	sl, #1
 8007fa2:	d18d      	bne.n	8007ec0 <_dtoa_r+0xaa8>
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	461d      	mov	r5, r3
 8007fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fac:	2a30      	cmp	r2, #48	; 0x30
 8007fae:	d0fa      	beq.n	8007fa6 <_dtoa_r+0xb8e>
 8007fb0:	e6d7      	b.n	8007d62 <_dtoa_r+0x94a>
 8007fb2:	9a01      	ldr	r2, [sp, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d184      	bne.n	8007ec2 <_dtoa_r+0xaaa>
 8007fb8:	9b00      	ldr	r3, [sp, #0]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2331      	movs	r3, #49	; 0x31
 8007fc0:	7013      	strb	r3, [r2, #0]
 8007fc2:	e6ce      	b.n	8007d62 <_dtoa_r+0x94a>
 8007fc4:	4b09      	ldr	r3, [pc, #36]	; (8007fec <_dtoa_r+0xbd4>)
 8007fc6:	f7ff ba95 	b.w	80074f4 <_dtoa_r+0xdc>
 8007fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f47f aa6e 	bne.w	80074ae <_dtoa_r+0x96>
 8007fd2:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <_dtoa_r+0xbd8>)
 8007fd4:	f7ff ba8e 	b.w	80074f4 <_dtoa_r+0xdc>
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dcae      	bgt.n	8007f3c <_dtoa_r+0xb24>
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	f73f aea8 	bgt.w	8007d36 <_dtoa_r+0x91e>
 8007fe6:	e7a9      	b.n	8007f3c <_dtoa_r+0xb24>
 8007fe8:	0800a3b0 	.word	0x0800a3b0
 8007fec:	0800a1b0 	.word	0x0800a1b0
 8007ff0:	0800a331 	.word	0x0800a331

08007ff4 <rshift>:
 8007ff4:	6903      	ldr	r3, [r0, #16]
 8007ff6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ffe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008002:	f100 0414 	add.w	r4, r0, #20
 8008006:	dd45      	ble.n	8008094 <rshift+0xa0>
 8008008:	f011 011f 	ands.w	r1, r1, #31
 800800c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008010:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008014:	d10c      	bne.n	8008030 <rshift+0x3c>
 8008016:	f100 0710 	add.w	r7, r0, #16
 800801a:	4629      	mov	r1, r5
 800801c:	42b1      	cmp	r1, r6
 800801e:	d334      	bcc.n	800808a <rshift+0x96>
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	1eea      	subs	r2, r5, #3
 8008026:	4296      	cmp	r6, r2
 8008028:	bf38      	it	cc
 800802a:	2300      	movcc	r3, #0
 800802c:	4423      	add	r3, r4
 800802e:	e015      	b.n	800805c <rshift+0x68>
 8008030:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008034:	f1c1 0820 	rsb	r8, r1, #32
 8008038:	40cf      	lsrs	r7, r1
 800803a:	f105 0e04 	add.w	lr, r5, #4
 800803e:	46a1      	mov	r9, r4
 8008040:	4576      	cmp	r6, lr
 8008042:	46f4      	mov	ip, lr
 8008044:	d815      	bhi.n	8008072 <rshift+0x7e>
 8008046:	1a9a      	subs	r2, r3, r2
 8008048:	0092      	lsls	r2, r2, #2
 800804a:	3a04      	subs	r2, #4
 800804c:	3501      	adds	r5, #1
 800804e:	42ae      	cmp	r6, r5
 8008050:	bf38      	it	cc
 8008052:	2200      	movcc	r2, #0
 8008054:	18a3      	adds	r3, r4, r2
 8008056:	50a7      	str	r7, [r4, r2]
 8008058:	b107      	cbz	r7, 800805c <rshift+0x68>
 800805a:	3304      	adds	r3, #4
 800805c:	1b1a      	subs	r2, r3, r4
 800805e:	42a3      	cmp	r3, r4
 8008060:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008064:	bf08      	it	eq
 8008066:	2300      	moveq	r3, #0
 8008068:	6102      	str	r2, [r0, #16]
 800806a:	bf08      	it	eq
 800806c:	6143      	streq	r3, [r0, #20]
 800806e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008072:	f8dc c000 	ldr.w	ip, [ip]
 8008076:	fa0c fc08 	lsl.w	ip, ip, r8
 800807a:	ea4c 0707 	orr.w	r7, ip, r7
 800807e:	f849 7b04 	str.w	r7, [r9], #4
 8008082:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008086:	40cf      	lsrs	r7, r1
 8008088:	e7da      	b.n	8008040 <rshift+0x4c>
 800808a:	f851 cb04 	ldr.w	ip, [r1], #4
 800808e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008092:	e7c3      	b.n	800801c <rshift+0x28>
 8008094:	4623      	mov	r3, r4
 8008096:	e7e1      	b.n	800805c <rshift+0x68>

08008098 <__hexdig_fun>:
 8008098:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800809c:	2b09      	cmp	r3, #9
 800809e:	d802      	bhi.n	80080a6 <__hexdig_fun+0xe>
 80080a0:	3820      	subs	r0, #32
 80080a2:	b2c0      	uxtb	r0, r0
 80080a4:	4770      	bx	lr
 80080a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d801      	bhi.n	80080b2 <__hexdig_fun+0x1a>
 80080ae:	3847      	subs	r0, #71	; 0x47
 80080b0:	e7f7      	b.n	80080a2 <__hexdig_fun+0xa>
 80080b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d801      	bhi.n	80080be <__hexdig_fun+0x26>
 80080ba:	3827      	subs	r0, #39	; 0x27
 80080bc:	e7f1      	b.n	80080a2 <__hexdig_fun+0xa>
 80080be:	2000      	movs	r0, #0
 80080c0:	4770      	bx	lr
	...

080080c4 <__gethex>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	ed2d 8b02 	vpush	{d8}
 80080cc:	b089      	sub	sp, #36	; 0x24
 80080ce:	ee08 0a10 	vmov	s16, r0
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	4bb4      	ldr	r3, [pc, #720]	; (80083a8 <__gethex+0x2e4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	4618      	mov	r0, r3
 80080dc:	468b      	mov	fp, r1
 80080de:	4690      	mov	r8, r2
 80080e0:	f7f8 f876 	bl	80001d0 <strlen>
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	f8db 2000 	ldr.w	r2, [fp]
 80080ea:	4403      	add	r3, r0
 80080ec:	4682      	mov	sl, r0
 80080ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	1c93      	adds	r3, r2, #2
 80080f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80080fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80080fe:	32fe      	adds	r2, #254	; 0xfe
 8008100:	18d1      	adds	r1, r2, r3
 8008102:	461f      	mov	r7, r3
 8008104:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008108:	9100      	str	r1, [sp, #0]
 800810a:	2830      	cmp	r0, #48	; 0x30
 800810c:	d0f8      	beq.n	8008100 <__gethex+0x3c>
 800810e:	f7ff ffc3 	bl	8008098 <__hexdig_fun>
 8008112:	4604      	mov	r4, r0
 8008114:	2800      	cmp	r0, #0
 8008116:	d13a      	bne.n	800818e <__gethex+0xca>
 8008118:	9901      	ldr	r1, [sp, #4]
 800811a:	4652      	mov	r2, sl
 800811c:	4638      	mov	r0, r7
 800811e:	f001 fa33 	bl	8009588 <strncmp>
 8008122:	4605      	mov	r5, r0
 8008124:	2800      	cmp	r0, #0
 8008126:	d168      	bne.n	80081fa <__gethex+0x136>
 8008128:	f817 000a 	ldrb.w	r0, [r7, sl]
 800812c:	eb07 060a 	add.w	r6, r7, sl
 8008130:	f7ff ffb2 	bl	8008098 <__hexdig_fun>
 8008134:	2800      	cmp	r0, #0
 8008136:	d062      	beq.n	80081fe <__gethex+0x13a>
 8008138:	4633      	mov	r3, r6
 800813a:	7818      	ldrb	r0, [r3, #0]
 800813c:	2830      	cmp	r0, #48	; 0x30
 800813e:	461f      	mov	r7, r3
 8008140:	f103 0301 	add.w	r3, r3, #1
 8008144:	d0f9      	beq.n	800813a <__gethex+0x76>
 8008146:	f7ff ffa7 	bl	8008098 <__hexdig_fun>
 800814a:	2301      	movs	r3, #1
 800814c:	fab0 f480 	clz	r4, r0
 8008150:	0964      	lsrs	r4, r4, #5
 8008152:	4635      	mov	r5, r6
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	463a      	mov	r2, r7
 8008158:	4616      	mov	r6, r2
 800815a:	3201      	adds	r2, #1
 800815c:	7830      	ldrb	r0, [r6, #0]
 800815e:	f7ff ff9b 	bl	8008098 <__hexdig_fun>
 8008162:	2800      	cmp	r0, #0
 8008164:	d1f8      	bne.n	8008158 <__gethex+0x94>
 8008166:	9901      	ldr	r1, [sp, #4]
 8008168:	4652      	mov	r2, sl
 800816a:	4630      	mov	r0, r6
 800816c:	f001 fa0c 	bl	8009588 <strncmp>
 8008170:	b980      	cbnz	r0, 8008194 <__gethex+0xd0>
 8008172:	b94d      	cbnz	r5, 8008188 <__gethex+0xc4>
 8008174:	eb06 050a 	add.w	r5, r6, sl
 8008178:	462a      	mov	r2, r5
 800817a:	4616      	mov	r6, r2
 800817c:	3201      	adds	r2, #1
 800817e:	7830      	ldrb	r0, [r6, #0]
 8008180:	f7ff ff8a 	bl	8008098 <__hexdig_fun>
 8008184:	2800      	cmp	r0, #0
 8008186:	d1f8      	bne.n	800817a <__gethex+0xb6>
 8008188:	1bad      	subs	r5, r5, r6
 800818a:	00ad      	lsls	r5, r5, #2
 800818c:	e004      	b.n	8008198 <__gethex+0xd4>
 800818e:	2400      	movs	r4, #0
 8008190:	4625      	mov	r5, r4
 8008192:	e7e0      	b.n	8008156 <__gethex+0x92>
 8008194:	2d00      	cmp	r5, #0
 8008196:	d1f7      	bne.n	8008188 <__gethex+0xc4>
 8008198:	7833      	ldrb	r3, [r6, #0]
 800819a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800819e:	2b50      	cmp	r3, #80	; 0x50
 80081a0:	d13b      	bne.n	800821a <__gethex+0x156>
 80081a2:	7873      	ldrb	r3, [r6, #1]
 80081a4:	2b2b      	cmp	r3, #43	; 0x2b
 80081a6:	d02c      	beq.n	8008202 <__gethex+0x13e>
 80081a8:	2b2d      	cmp	r3, #45	; 0x2d
 80081aa:	d02e      	beq.n	800820a <__gethex+0x146>
 80081ac:	1c71      	adds	r1, r6, #1
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	7808      	ldrb	r0, [r1, #0]
 80081b4:	f7ff ff70 	bl	8008098 <__hexdig_fun>
 80081b8:	1e43      	subs	r3, r0, #1
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b18      	cmp	r3, #24
 80081be:	d82c      	bhi.n	800821a <__gethex+0x156>
 80081c0:	f1a0 0210 	sub.w	r2, r0, #16
 80081c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081c8:	f7ff ff66 	bl	8008098 <__hexdig_fun>
 80081cc:	1e43      	subs	r3, r0, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b18      	cmp	r3, #24
 80081d2:	d91d      	bls.n	8008210 <__gethex+0x14c>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	d000      	beq.n	80081dc <__gethex+0x118>
 80081da:	4252      	negs	r2, r2
 80081dc:	4415      	add	r5, r2
 80081de:	f8cb 1000 	str.w	r1, [fp]
 80081e2:	b1e4      	cbz	r4, 800821e <__gethex+0x15a>
 80081e4:	9b00      	ldr	r3, [sp, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bf14      	ite	ne
 80081ea:	2700      	movne	r7, #0
 80081ec:	2706      	moveq	r7, #6
 80081ee:	4638      	mov	r0, r7
 80081f0:	b009      	add	sp, #36	; 0x24
 80081f2:	ecbd 8b02 	vpop	{d8}
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	463e      	mov	r6, r7
 80081fc:	4625      	mov	r5, r4
 80081fe:	2401      	movs	r4, #1
 8008200:	e7ca      	b.n	8008198 <__gethex+0xd4>
 8008202:	f04f 0900 	mov.w	r9, #0
 8008206:	1cb1      	adds	r1, r6, #2
 8008208:	e7d3      	b.n	80081b2 <__gethex+0xee>
 800820a:	f04f 0901 	mov.w	r9, #1
 800820e:	e7fa      	b.n	8008206 <__gethex+0x142>
 8008210:	230a      	movs	r3, #10
 8008212:	fb03 0202 	mla	r2, r3, r2, r0
 8008216:	3a10      	subs	r2, #16
 8008218:	e7d4      	b.n	80081c4 <__gethex+0x100>
 800821a:	4631      	mov	r1, r6
 800821c:	e7df      	b.n	80081de <__gethex+0x11a>
 800821e:	1bf3      	subs	r3, r6, r7
 8008220:	3b01      	subs	r3, #1
 8008222:	4621      	mov	r1, r4
 8008224:	2b07      	cmp	r3, #7
 8008226:	dc0b      	bgt.n	8008240 <__gethex+0x17c>
 8008228:	ee18 0a10 	vmov	r0, s16
 800822c:	f000 fa7e 	bl	800872c <_Balloc>
 8008230:	4604      	mov	r4, r0
 8008232:	b940      	cbnz	r0, 8008246 <__gethex+0x182>
 8008234:	4b5d      	ldr	r3, [pc, #372]	; (80083ac <__gethex+0x2e8>)
 8008236:	4602      	mov	r2, r0
 8008238:	21de      	movs	r1, #222	; 0xde
 800823a:	485d      	ldr	r0, [pc, #372]	; (80083b0 <__gethex+0x2ec>)
 800823c:	f001 f9c6 	bl	80095cc <__assert_func>
 8008240:	3101      	adds	r1, #1
 8008242:	105b      	asrs	r3, r3, #1
 8008244:	e7ee      	b.n	8008224 <__gethex+0x160>
 8008246:	f100 0914 	add.w	r9, r0, #20
 800824a:	f04f 0b00 	mov.w	fp, #0
 800824e:	f1ca 0301 	rsb	r3, sl, #1
 8008252:	f8cd 9008 	str.w	r9, [sp, #8]
 8008256:	f8cd b000 	str.w	fp, [sp]
 800825a:	9306      	str	r3, [sp, #24]
 800825c:	42b7      	cmp	r7, r6
 800825e:	d340      	bcc.n	80082e2 <__gethex+0x21e>
 8008260:	9802      	ldr	r0, [sp, #8]
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	f840 3b04 	str.w	r3, [r0], #4
 8008268:	eba0 0009 	sub.w	r0, r0, r9
 800826c:	1080      	asrs	r0, r0, #2
 800826e:	0146      	lsls	r6, r0, #5
 8008270:	6120      	str	r0, [r4, #16]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fb4c 	bl	8008910 <__hi0bits>
 8008278:	1a30      	subs	r0, r6, r0
 800827a:	f8d8 6000 	ldr.w	r6, [r8]
 800827e:	42b0      	cmp	r0, r6
 8008280:	dd63      	ble.n	800834a <__gethex+0x286>
 8008282:	1b87      	subs	r7, r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fef0 	bl	800906c <__any_on>
 800828c:	4682      	mov	sl, r0
 800828e:	b1a8      	cbz	r0, 80082bc <__gethex+0x1f8>
 8008290:	1e7b      	subs	r3, r7, #1
 8008292:	1159      	asrs	r1, r3, #5
 8008294:	f003 021f 	and.w	r2, r3, #31
 8008298:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800829c:	f04f 0a01 	mov.w	sl, #1
 80082a0:	fa0a f202 	lsl.w	r2, sl, r2
 80082a4:	420a      	tst	r2, r1
 80082a6:	d009      	beq.n	80082bc <__gethex+0x1f8>
 80082a8:	4553      	cmp	r3, sl
 80082aa:	dd05      	ble.n	80082b8 <__gethex+0x1f4>
 80082ac:	1eb9      	subs	r1, r7, #2
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 fedc 	bl	800906c <__any_on>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d145      	bne.n	8008344 <__gethex+0x280>
 80082b8:	f04f 0a02 	mov.w	sl, #2
 80082bc:	4639      	mov	r1, r7
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff fe98 	bl	8007ff4 <rshift>
 80082c4:	443d      	add	r5, r7
 80082c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082ca:	42ab      	cmp	r3, r5
 80082cc:	da4c      	bge.n	8008368 <__gethex+0x2a4>
 80082ce:	ee18 0a10 	vmov	r0, s16
 80082d2:	4621      	mov	r1, r4
 80082d4:	f000 fa6a 	bl	80087ac <_Bfree>
 80082d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082da:	2300      	movs	r3, #0
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	27a3      	movs	r7, #163	; 0xa3
 80082e0:	e785      	b.n	80081ee <__gethex+0x12a>
 80082e2:	1e73      	subs	r3, r6, #1
 80082e4:	9a05      	ldr	r2, [sp, #20]
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d019      	beq.n	8008324 <__gethex+0x260>
 80082f0:	f1bb 0f20 	cmp.w	fp, #32
 80082f4:	d107      	bne.n	8008306 <__gethex+0x242>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	9a00      	ldr	r2, [sp, #0]
 80082fa:	f843 2b04 	str.w	r2, [r3], #4
 80082fe:	9302      	str	r3, [sp, #8]
 8008300:	2300      	movs	r3, #0
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	469b      	mov	fp, r3
 8008306:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800830a:	f7ff fec5 	bl	8008098 <__hexdig_fun>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	f000 000f 	and.w	r0, r0, #15
 8008314:	fa00 f00b 	lsl.w	r0, r0, fp
 8008318:	4303      	orrs	r3, r0
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	f10b 0b04 	add.w	fp, fp, #4
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	e00d      	b.n	8008340 <__gethex+0x27c>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	9a06      	ldr	r2, [sp, #24]
 8008328:	4413      	add	r3, r2
 800832a:	42bb      	cmp	r3, r7
 800832c:	d3e0      	bcc.n	80082f0 <__gethex+0x22c>
 800832e:	4618      	mov	r0, r3
 8008330:	9901      	ldr	r1, [sp, #4]
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	4652      	mov	r2, sl
 8008336:	f001 f927 	bl	8009588 <strncmp>
 800833a:	9b07      	ldr	r3, [sp, #28]
 800833c:	2800      	cmp	r0, #0
 800833e:	d1d7      	bne.n	80082f0 <__gethex+0x22c>
 8008340:	461e      	mov	r6, r3
 8008342:	e78b      	b.n	800825c <__gethex+0x198>
 8008344:	f04f 0a03 	mov.w	sl, #3
 8008348:	e7b8      	b.n	80082bc <__gethex+0x1f8>
 800834a:	da0a      	bge.n	8008362 <__gethex+0x29e>
 800834c:	1a37      	subs	r7, r6, r0
 800834e:	4621      	mov	r1, r4
 8008350:	ee18 0a10 	vmov	r0, s16
 8008354:	463a      	mov	r2, r7
 8008356:	f000 fc45 	bl	8008be4 <__lshift>
 800835a:	1bed      	subs	r5, r5, r7
 800835c:	4604      	mov	r4, r0
 800835e:	f100 0914 	add.w	r9, r0, #20
 8008362:	f04f 0a00 	mov.w	sl, #0
 8008366:	e7ae      	b.n	80082c6 <__gethex+0x202>
 8008368:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800836c:	42a8      	cmp	r0, r5
 800836e:	dd72      	ble.n	8008456 <__gethex+0x392>
 8008370:	1b45      	subs	r5, r0, r5
 8008372:	42ae      	cmp	r6, r5
 8008374:	dc36      	bgt.n	80083e4 <__gethex+0x320>
 8008376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d02a      	beq.n	80083d4 <__gethex+0x310>
 800837e:	2b03      	cmp	r3, #3
 8008380:	d02c      	beq.n	80083dc <__gethex+0x318>
 8008382:	2b01      	cmp	r3, #1
 8008384:	d11c      	bne.n	80083c0 <__gethex+0x2fc>
 8008386:	42ae      	cmp	r6, r5
 8008388:	d11a      	bne.n	80083c0 <__gethex+0x2fc>
 800838a:	2e01      	cmp	r6, #1
 800838c:	d112      	bne.n	80083b4 <__gethex+0x2f0>
 800838e:	9a04      	ldr	r2, [sp, #16]
 8008390:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	2301      	movs	r3, #1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	f8c9 3000 	str.w	r3, [r9]
 800839e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083a0:	2762      	movs	r7, #98	; 0x62
 80083a2:	601c      	str	r4, [r3, #0]
 80083a4:	e723      	b.n	80081ee <__gethex+0x12a>
 80083a6:	bf00      	nop
 80083a8:	0800a428 	.word	0x0800a428
 80083ac:	0800a3b0 	.word	0x0800a3b0
 80083b0:	0800a3c1 	.word	0x0800a3c1
 80083b4:	1e71      	subs	r1, r6, #1
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 fe58 	bl	800906c <__any_on>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d1e6      	bne.n	800838e <__gethex+0x2ca>
 80083c0:	ee18 0a10 	vmov	r0, s16
 80083c4:	4621      	mov	r1, r4
 80083c6:	f000 f9f1 	bl	80087ac <_Bfree>
 80083ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083cc:	2300      	movs	r3, #0
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	2750      	movs	r7, #80	; 0x50
 80083d2:	e70c      	b.n	80081ee <__gethex+0x12a>
 80083d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f2      	bne.n	80083c0 <__gethex+0x2fc>
 80083da:	e7d8      	b.n	800838e <__gethex+0x2ca>
 80083dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1d5      	bne.n	800838e <__gethex+0x2ca>
 80083e2:	e7ed      	b.n	80083c0 <__gethex+0x2fc>
 80083e4:	1e6f      	subs	r7, r5, #1
 80083e6:	f1ba 0f00 	cmp.w	sl, #0
 80083ea:	d131      	bne.n	8008450 <__gethex+0x38c>
 80083ec:	b127      	cbz	r7, 80083f8 <__gethex+0x334>
 80083ee:	4639      	mov	r1, r7
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 fe3b 	bl	800906c <__any_on>
 80083f6:	4682      	mov	sl, r0
 80083f8:	117b      	asrs	r3, r7, #5
 80083fa:	2101      	movs	r1, #1
 80083fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008400:	f007 071f 	and.w	r7, r7, #31
 8008404:	fa01 f707 	lsl.w	r7, r1, r7
 8008408:	421f      	tst	r7, r3
 800840a:	4629      	mov	r1, r5
 800840c:	4620      	mov	r0, r4
 800840e:	bf18      	it	ne
 8008410:	f04a 0a02 	orrne.w	sl, sl, #2
 8008414:	1b76      	subs	r6, r6, r5
 8008416:	f7ff fded 	bl	8007ff4 <rshift>
 800841a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800841e:	2702      	movs	r7, #2
 8008420:	f1ba 0f00 	cmp.w	sl, #0
 8008424:	d048      	beq.n	80084b8 <__gethex+0x3f4>
 8008426:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800842a:	2b02      	cmp	r3, #2
 800842c:	d015      	beq.n	800845a <__gethex+0x396>
 800842e:	2b03      	cmp	r3, #3
 8008430:	d017      	beq.n	8008462 <__gethex+0x39e>
 8008432:	2b01      	cmp	r3, #1
 8008434:	d109      	bne.n	800844a <__gethex+0x386>
 8008436:	f01a 0f02 	tst.w	sl, #2
 800843a:	d006      	beq.n	800844a <__gethex+0x386>
 800843c:	f8d9 0000 	ldr.w	r0, [r9]
 8008440:	ea4a 0a00 	orr.w	sl, sl, r0
 8008444:	f01a 0f01 	tst.w	sl, #1
 8008448:	d10e      	bne.n	8008468 <__gethex+0x3a4>
 800844a:	f047 0710 	orr.w	r7, r7, #16
 800844e:	e033      	b.n	80084b8 <__gethex+0x3f4>
 8008450:	f04f 0a01 	mov.w	sl, #1
 8008454:	e7d0      	b.n	80083f8 <__gethex+0x334>
 8008456:	2701      	movs	r7, #1
 8008458:	e7e2      	b.n	8008420 <__gethex+0x35c>
 800845a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845c:	f1c3 0301 	rsb	r3, r3, #1
 8008460:	9315      	str	r3, [sp, #84]	; 0x54
 8008462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0f0      	beq.n	800844a <__gethex+0x386>
 8008468:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800846c:	f104 0314 	add.w	r3, r4, #20
 8008470:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008474:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008478:	f04f 0c00 	mov.w	ip, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008482:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008486:	d01c      	beq.n	80084c2 <__gethex+0x3fe>
 8008488:	3201      	adds	r2, #1
 800848a:	6002      	str	r2, [r0, #0]
 800848c:	2f02      	cmp	r7, #2
 800848e:	f104 0314 	add.w	r3, r4, #20
 8008492:	d13f      	bne.n	8008514 <__gethex+0x450>
 8008494:	f8d8 2000 	ldr.w	r2, [r8]
 8008498:	3a01      	subs	r2, #1
 800849a:	42b2      	cmp	r2, r6
 800849c:	d10a      	bne.n	80084b4 <__gethex+0x3f0>
 800849e:	1171      	asrs	r1, r6, #5
 80084a0:	2201      	movs	r2, #1
 80084a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084a6:	f006 061f 	and.w	r6, r6, #31
 80084aa:	fa02 f606 	lsl.w	r6, r2, r6
 80084ae:	421e      	tst	r6, r3
 80084b0:	bf18      	it	ne
 80084b2:	4617      	movne	r7, r2
 80084b4:	f047 0720 	orr.w	r7, r7, #32
 80084b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084ba:	601c      	str	r4, [r3, #0]
 80084bc:	9b04      	ldr	r3, [sp, #16]
 80084be:	601d      	str	r5, [r3, #0]
 80084c0:	e695      	b.n	80081ee <__gethex+0x12a>
 80084c2:	4299      	cmp	r1, r3
 80084c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80084c8:	d8d8      	bhi.n	800847c <__gethex+0x3b8>
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	459b      	cmp	fp, r3
 80084ce:	db19      	blt.n	8008504 <__gethex+0x440>
 80084d0:	6861      	ldr	r1, [r4, #4]
 80084d2:	ee18 0a10 	vmov	r0, s16
 80084d6:	3101      	adds	r1, #1
 80084d8:	f000 f928 	bl	800872c <_Balloc>
 80084dc:	4681      	mov	r9, r0
 80084de:	b918      	cbnz	r0, 80084e8 <__gethex+0x424>
 80084e0:	4b1a      	ldr	r3, [pc, #104]	; (800854c <__gethex+0x488>)
 80084e2:	4602      	mov	r2, r0
 80084e4:	2184      	movs	r1, #132	; 0x84
 80084e6:	e6a8      	b.n	800823a <__gethex+0x176>
 80084e8:	6922      	ldr	r2, [r4, #16]
 80084ea:	3202      	adds	r2, #2
 80084ec:	f104 010c 	add.w	r1, r4, #12
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	300c      	adds	r0, #12
 80084f4:	f000 f90c 	bl	8008710 <memcpy>
 80084f8:	4621      	mov	r1, r4
 80084fa:	ee18 0a10 	vmov	r0, s16
 80084fe:	f000 f955 	bl	80087ac <_Bfree>
 8008502:	464c      	mov	r4, r9
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800850c:	6122      	str	r2, [r4, #16]
 800850e:	2201      	movs	r2, #1
 8008510:	615a      	str	r2, [r3, #20]
 8008512:	e7bb      	b.n	800848c <__gethex+0x3c8>
 8008514:	6922      	ldr	r2, [r4, #16]
 8008516:	455a      	cmp	r2, fp
 8008518:	dd0b      	ble.n	8008532 <__gethex+0x46e>
 800851a:	2101      	movs	r1, #1
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff fd69 	bl	8007ff4 <rshift>
 8008522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008526:	3501      	adds	r5, #1
 8008528:	42ab      	cmp	r3, r5
 800852a:	f6ff aed0 	blt.w	80082ce <__gethex+0x20a>
 800852e:	2701      	movs	r7, #1
 8008530:	e7c0      	b.n	80084b4 <__gethex+0x3f0>
 8008532:	f016 061f 	ands.w	r6, r6, #31
 8008536:	d0fa      	beq.n	800852e <__gethex+0x46a>
 8008538:	4453      	add	r3, sl
 800853a:	f1c6 0620 	rsb	r6, r6, #32
 800853e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008542:	f000 f9e5 	bl	8008910 <__hi0bits>
 8008546:	42b0      	cmp	r0, r6
 8008548:	dbe7      	blt.n	800851a <__gethex+0x456>
 800854a:	e7f0      	b.n	800852e <__gethex+0x46a>
 800854c:	0800a3b0 	.word	0x0800a3b0

08008550 <L_shift>:
 8008550:	f1c2 0208 	rsb	r2, r2, #8
 8008554:	0092      	lsls	r2, r2, #2
 8008556:	b570      	push	{r4, r5, r6, lr}
 8008558:	f1c2 0620 	rsb	r6, r2, #32
 800855c:	6843      	ldr	r3, [r0, #4]
 800855e:	6804      	ldr	r4, [r0, #0]
 8008560:	fa03 f506 	lsl.w	r5, r3, r6
 8008564:	432c      	orrs	r4, r5
 8008566:	40d3      	lsrs	r3, r2
 8008568:	6004      	str	r4, [r0, #0]
 800856a:	f840 3f04 	str.w	r3, [r0, #4]!
 800856e:	4288      	cmp	r0, r1
 8008570:	d3f4      	bcc.n	800855c <L_shift+0xc>
 8008572:	bd70      	pop	{r4, r5, r6, pc}

08008574 <__match>:
 8008574:	b530      	push	{r4, r5, lr}
 8008576:	6803      	ldr	r3, [r0, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857e:	b914      	cbnz	r4, 8008586 <__match+0x12>
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	2001      	movs	r0, #1
 8008584:	bd30      	pop	{r4, r5, pc}
 8008586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800858a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800858e:	2d19      	cmp	r5, #25
 8008590:	bf98      	it	ls
 8008592:	3220      	addls	r2, #32
 8008594:	42a2      	cmp	r2, r4
 8008596:	d0f0      	beq.n	800857a <__match+0x6>
 8008598:	2000      	movs	r0, #0
 800859a:	e7f3      	b.n	8008584 <__match+0x10>

0800859c <__hexnan>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	680b      	ldr	r3, [r1, #0]
 80085a2:	115e      	asrs	r6, r3, #5
 80085a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085a8:	f013 031f 	ands.w	r3, r3, #31
 80085ac:	b087      	sub	sp, #28
 80085ae:	bf18      	it	ne
 80085b0:	3604      	addne	r6, #4
 80085b2:	2500      	movs	r5, #0
 80085b4:	1f37      	subs	r7, r6, #4
 80085b6:	4690      	mov	r8, r2
 80085b8:	6802      	ldr	r2, [r0, #0]
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	4682      	mov	sl, r0
 80085be:	f846 5c04 	str.w	r5, [r6, #-4]
 80085c2:	46b9      	mov	r9, r7
 80085c4:	463c      	mov	r4, r7
 80085c6:	9502      	str	r5, [sp, #8]
 80085c8:	46ab      	mov	fp, r5
 80085ca:	7851      	ldrb	r1, [r2, #1]
 80085cc:	1c53      	adds	r3, r2, #1
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	b341      	cbz	r1, 8008624 <__hexnan+0x88>
 80085d2:	4608      	mov	r0, r1
 80085d4:	9205      	str	r2, [sp, #20]
 80085d6:	9104      	str	r1, [sp, #16]
 80085d8:	f7ff fd5e 	bl	8008098 <__hexdig_fun>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d14f      	bne.n	8008680 <__hexnan+0xe4>
 80085e0:	9904      	ldr	r1, [sp, #16]
 80085e2:	9a05      	ldr	r2, [sp, #20]
 80085e4:	2920      	cmp	r1, #32
 80085e6:	d818      	bhi.n	800861a <__hexnan+0x7e>
 80085e8:	9b02      	ldr	r3, [sp, #8]
 80085ea:	459b      	cmp	fp, r3
 80085ec:	dd13      	ble.n	8008616 <__hexnan+0x7a>
 80085ee:	454c      	cmp	r4, r9
 80085f0:	d206      	bcs.n	8008600 <__hexnan+0x64>
 80085f2:	2d07      	cmp	r5, #7
 80085f4:	dc04      	bgt.n	8008600 <__hexnan+0x64>
 80085f6:	462a      	mov	r2, r5
 80085f8:	4649      	mov	r1, r9
 80085fa:	4620      	mov	r0, r4
 80085fc:	f7ff ffa8 	bl	8008550 <L_shift>
 8008600:	4544      	cmp	r4, r8
 8008602:	d950      	bls.n	80086a6 <__hexnan+0x10a>
 8008604:	2300      	movs	r3, #0
 8008606:	f1a4 0904 	sub.w	r9, r4, #4
 800860a:	f844 3c04 	str.w	r3, [r4, #-4]
 800860e:	f8cd b008 	str.w	fp, [sp, #8]
 8008612:	464c      	mov	r4, r9
 8008614:	461d      	mov	r5, r3
 8008616:	9a03      	ldr	r2, [sp, #12]
 8008618:	e7d7      	b.n	80085ca <__hexnan+0x2e>
 800861a:	2929      	cmp	r1, #41	; 0x29
 800861c:	d156      	bne.n	80086cc <__hexnan+0x130>
 800861e:	3202      	adds	r2, #2
 8008620:	f8ca 2000 	str.w	r2, [sl]
 8008624:	f1bb 0f00 	cmp.w	fp, #0
 8008628:	d050      	beq.n	80086cc <__hexnan+0x130>
 800862a:	454c      	cmp	r4, r9
 800862c:	d206      	bcs.n	800863c <__hexnan+0xa0>
 800862e:	2d07      	cmp	r5, #7
 8008630:	dc04      	bgt.n	800863c <__hexnan+0xa0>
 8008632:	462a      	mov	r2, r5
 8008634:	4649      	mov	r1, r9
 8008636:	4620      	mov	r0, r4
 8008638:	f7ff ff8a 	bl	8008550 <L_shift>
 800863c:	4544      	cmp	r4, r8
 800863e:	d934      	bls.n	80086aa <__hexnan+0x10e>
 8008640:	f1a8 0204 	sub.w	r2, r8, #4
 8008644:	4623      	mov	r3, r4
 8008646:	f853 1b04 	ldr.w	r1, [r3], #4
 800864a:	f842 1f04 	str.w	r1, [r2, #4]!
 800864e:	429f      	cmp	r7, r3
 8008650:	d2f9      	bcs.n	8008646 <__hexnan+0xaa>
 8008652:	1b3b      	subs	r3, r7, r4
 8008654:	f023 0303 	bic.w	r3, r3, #3
 8008658:	3304      	adds	r3, #4
 800865a:	3401      	adds	r4, #1
 800865c:	3e03      	subs	r6, #3
 800865e:	42b4      	cmp	r4, r6
 8008660:	bf88      	it	hi
 8008662:	2304      	movhi	r3, #4
 8008664:	4443      	add	r3, r8
 8008666:	2200      	movs	r2, #0
 8008668:	f843 2b04 	str.w	r2, [r3], #4
 800866c:	429f      	cmp	r7, r3
 800866e:	d2fb      	bcs.n	8008668 <__hexnan+0xcc>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	b91b      	cbnz	r3, 800867c <__hexnan+0xe0>
 8008674:	4547      	cmp	r7, r8
 8008676:	d127      	bne.n	80086c8 <__hexnan+0x12c>
 8008678:	2301      	movs	r3, #1
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	2005      	movs	r0, #5
 800867e:	e026      	b.n	80086ce <__hexnan+0x132>
 8008680:	3501      	adds	r5, #1
 8008682:	2d08      	cmp	r5, #8
 8008684:	f10b 0b01 	add.w	fp, fp, #1
 8008688:	dd06      	ble.n	8008698 <__hexnan+0xfc>
 800868a:	4544      	cmp	r4, r8
 800868c:	d9c3      	bls.n	8008616 <__hexnan+0x7a>
 800868e:	2300      	movs	r3, #0
 8008690:	f844 3c04 	str.w	r3, [r4, #-4]
 8008694:	2501      	movs	r5, #1
 8008696:	3c04      	subs	r4, #4
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	f000 000f 	and.w	r0, r0, #15
 800869e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	e7b7      	b.n	8008616 <__hexnan+0x7a>
 80086a6:	2508      	movs	r5, #8
 80086a8:	e7b5      	b.n	8008616 <__hexnan+0x7a>
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0df      	beq.n	8008670 <__hexnan+0xd4>
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295
 80086b4:	f1c3 0320 	rsb	r3, r3, #32
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086c0:	401a      	ands	r2, r3
 80086c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80086c6:	e7d3      	b.n	8008670 <__hexnan+0xd4>
 80086c8:	3f04      	subs	r7, #4
 80086ca:	e7d1      	b.n	8008670 <__hexnan+0xd4>
 80086cc:	2004      	movs	r0, #4
 80086ce:	b007      	add	sp, #28
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086d4 <_localeconv_r>:
 80086d4:	4800      	ldr	r0, [pc, #0]	; (80086d8 <_localeconv_r+0x4>)
 80086d6:	4770      	bx	lr
 80086d8:	200001a8 	.word	0x200001a8

080086dc <malloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <malloc+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 bd67 	b.w	80091b4 <_malloc_r>
 80086e6:	bf00      	nop
 80086e8:	20000050 	.word	0x20000050

080086ec <__ascii_mbtowc>:
 80086ec:	b082      	sub	sp, #8
 80086ee:	b901      	cbnz	r1, 80086f2 <__ascii_mbtowc+0x6>
 80086f0:	a901      	add	r1, sp, #4
 80086f2:	b142      	cbz	r2, 8008706 <__ascii_mbtowc+0x1a>
 80086f4:	b14b      	cbz	r3, 800870a <__ascii_mbtowc+0x1e>
 80086f6:	7813      	ldrb	r3, [r2, #0]
 80086f8:	600b      	str	r3, [r1, #0]
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	1e10      	subs	r0, r2, #0
 80086fe:	bf18      	it	ne
 8008700:	2001      	movne	r0, #1
 8008702:	b002      	add	sp, #8
 8008704:	4770      	bx	lr
 8008706:	4610      	mov	r0, r2
 8008708:	e7fb      	b.n	8008702 <__ascii_mbtowc+0x16>
 800870a:	f06f 0001 	mvn.w	r0, #1
 800870e:	e7f8      	b.n	8008702 <__ascii_mbtowc+0x16>

08008710 <memcpy>:
 8008710:	440a      	add	r2, r1
 8008712:	4291      	cmp	r1, r2
 8008714:	f100 33ff 	add.w	r3, r0, #4294967295
 8008718:	d100      	bne.n	800871c <memcpy+0xc>
 800871a:	4770      	bx	lr
 800871c:	b510      	push	{r4, lr}
 800871e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008726:	4291      	cmp	r1, r2
 8008728:	d1f9      	bne.n	800871e <memcpy+0xe>
 800872a:	bd10      	pop	{r4, pc}

0800872c <_Balloc>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	b976      	cbnz	r6, 8008754 <_Balloc+0x28>
 8008736:	2010      	movs	r0, #16
 8008738:	f7ff ffd0 	bl	80086dc <malloc>
 800873c:	4602      	mov	r2, r0
 800873e:	6260      	str	r0, [r4, #36]	; 0x24
 8008740:	b920      	cbnz	r0, 800874c <_Balloc+0x20>
 8008742:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <_Balloc+0x78>)
 8008744:	4818      	ldr	r0, [pc, #96]	; (80087a8 <_Balloc+0x7c>)
 8008746:	2166      	movs	r1, #102	; 0x66
 8008748:	f000 ff40 	bl	80095cc <__assert_func>
 800874c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008750:	6006      	str	r6, [r0, #0]
 8008752:	60c6      	str	r6, [r0, #12]
 8008754:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008756:	68f3      	ldr	r3, [r6, #12]
 8008758:	b183      	cbz	r3, 800877c <_Balloc+0x50>
 800875a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008762:	b9b8      	cbnz	r0, 8008794 <_Balloc+0x68>
 8008764:	2101      	movs	r1, #1
 8008766:	fa01 f605 	lsl.w	r6, r1, r5
 800876a:	1d72      	adds	r2, r6, #5
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fc9d 	bl	80090ae <_calloc_r>
 8008774:	b160      	cbz	r0, 8008790 <_Balloc+0x64>
 8008776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800877a:	e00e      	b.n	800879a <_Balloc+0x6e>
 800877c:	2221      	movs	r2, #33	; 0x21
 800877e:	2104      	movs	r1, #4
 8008780:	4620      	mov	r0, r4
 8008782:	f000 fc94 	bl	80090ae <_calloc_r>
 8008786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008788:	60f0      	str	r0, [r6, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e4      	bne.n	800875a <_Balloc+0x2e>
 8008790:	2000      	movs	r0, #0
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	6802      	ldr	r2, [r0, #0]
 8008796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800879a:	2300      	movs	r3, #0
 800879c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a0:	e7f7      	b.n	8008792 <_Balloc+0x66>
 80087a2:	bf00      	nop
 80087a4:	0800a33e 	.word	0x0800a33e
 80087a8:	0800a43c 	.word	0x0800a43c

080087ac <_Bfree>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b0:	4605      	mov	r5, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	b976      	cbnz	r6, 80087d4 <_Bfree+0x28>
 80087b6:	2010      	movs	r0, #16
 80087b8:	f7ff ff90 	bl	80086dc <malloc>
 80087bc:	4602      	mov	r2, r0
 80087be:	6268      	str	r0, [r5, #36]	; 0x24
 80087c0:	b920      	cbnz	r0, 80087cc <_Bfree+0x20>
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <_Bfree+0x3c>)
 80087c4:	4809      	ldr	r0, [pc, #36]	; (80087ec <_Bfree+0x40>)
 80087c6:	218a      	movs	r1, #138	; 0x8a
 80087c8:	f000 ff00 	bl	80095cc <__assert_func>
 80087cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d0:	6006      	str	r6, [r0, #0]
 80087d2:	60c6      	str	r6, [r0, #12]
 80087d4:	b13c      	cbz	r4, 80087e6 <_Bfree+0x3a>
 80087d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087d8:	6862      	ldr	r2, [r4, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087e0:	6021      	str	r1, [r4, #0]
 80087e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	0800a33e 	.word	0x0800a33e
 80087ec:	0800a43c 	.word	0x0800a43c

080087f0 <__multadd>:
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	690d      	ldr	r5, [r1, #16]
 80087f6:	4607      	mov	r7, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	461e      	mov	r6, r3
 80087fc:	f101 0c14 	add.w	ip, r1, #20
 8008800:	2000      	movs	r0, #0
 8008802:	f8dc 3000 	ldr.w	r3, [ip]
 8008806:	b299      	uxth	r1, r3
 8008808:	fb02 6101 	mla	r1, r2, r1, r6
 800880c:	0c1e      	lsrs	r6, r3, #16
 800880e:	0c0b      	lsrs	r3, r1, #16
 8008810:	fb02 3306 	mla	r3, r2, r6, r3
 8008814:	b289      	uxth	r1, r1
 8008816:	3001      	adds	r0, #1
 8008818:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800881c:	4285      	cmp	r5, r0
 800881e:	f84c 1b04 	str.w	r1, [ip], #4
 8008822:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008826:	dcec      	bgt.n	8008802 <__multadd+0x12>
 8008828:	b30e      	cbz	r6, 800886e <__multadd+0x7e>
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	42ab      	cmp	r3, r5
 800882e:	dc19      	bgt.n	8008864 <__multadd+0x74>
 8008830:	6861      	ldr	r1, [r4, #4]
 8008832:	4638      	mov	r0, r7
 8008834:	3101      	adds	r1, #1
 8008836:	f7ff ff79 	bl	800872c <_Balloc>
 800883a:	4680      	mov	r8, r0
 800883c:	b928      	cbnz	r0, 800884a <__multadd+0x5a>
 800883e:	4602      	mov	r2, r0
 8008840:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <__multadd+0x84>)
 8008842:	480d      	ldr	r0, [pc, #52]	; (8008878 <__multadd+0x88>)
 8008844:	21b5      	movs	r1, #181	; 0xb5
 8008846:	f000 fec1 	bl	80095cc <__assert_func>
 800884a:	6922      	ldr	r2, [r4, #16]
 800884c:	3202      	adds	r2, #2
 800884e:	f104 010c 	add.w	r1, r4, #12
 8008852:	0092      	lsls	r2, r2, #2
 8008854:	300c      	adds	r0, #12
 8008856:	f7ff ff5b 	bl	8008710 <memcpy>
 800885a:	4621      	mov	r1, r4
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff ffa5 	bl	80087ac <_Bfree>
 8008862:	4644      	mov	r4, r8
 8008864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008868:	3501      	adds	r5, #1
 800886a:	615e      	str	r6, [r3, #20]
 800886c:	6125      	str	r5, [r4, #16]
 800886e:	4620      	mov	r0, r4
 8008870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008874:	0800a3b0 	.word	0x0800a3b0
 8008878:	0800a43c 	.word	0x0800a43c

0800887c <__s2b>:
 800887c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	4615      	mov	r5, r2
 8008884:	461f      	mov	r7, r3
 8008886:	2209      	movs	r2, #9
 8008888:	3308      	adds	r3, #8
 800888a:	4606      	mov	r6, r0
 800888c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008890:	2100      	movs	r1, #0
 8008892:	2201      	movs	r2, #1
 8008894:	429a      	cmp	r2, r3
 8008896:	db09      	blt.n	80088ac <__s2b+0x30>
 8008898:	4630      	mov	r0, r6
 800889a:	f7ff ff47 	bl	800872c <_Balloc>
 800889e:	b940      	cbnz	r0, 80088b2 <__s2b+0x36>
 80088a0:	4602      	mov	r2, r0
 80088a2:	4b19      	ldr	r3, [pc, #100]	; (8008908 <__s2b+0x8c>)
 80088a4:	4819      	ldr	r0, [pc, #100]	; (800890c <__s2b+0x90>)
 80088a6:	21ce      	movs	r1, #206	; 0xce
 80088a8:	f000 fe90 	bl	80095cc <__assert_func>
 80088ac:	0052      	lsls	r2, r2, #1
 80088ae:	3101      	adds	r1, #1
 80088b0:	e7f0      	b.n	8008894 <__s2b+0x18>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	6143      	str	r3, [r0, #20]
 80088b6:	2d09      	cmp	r5, #9
 80088b8:	f04f 0301 	mov.w	r3, #1
 80088bc:	6103      	str	r3, [r0, #16]
 80088be:	dd16      	ble.n	80088ee <__s2b+0x72>
 80088c0:	f104 0909 	add.w	r9, r4, #9
 80088c4:	46c8      	mov	r8, r9
 80088c6:	442c      	add	r4, r5
 80088c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088cc:	4601      	mov	r1, r0
 80088ce:	3b30      	subs	r3, #48	; 0x30
 80088d0:	220a      	movs	r2, #10
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7ff ff8c 	bl	80087f0 <__multadd>
 80088d8:	45a0      	cmp	r8, r4
 80088da:	d1f5      	bne.n	80088c8 <__s2b+0x4c>
 80088dc:	f1a5 0408 	sub.w	r4, r5, #8
 80088e0:	444c      	add	r4, r9
 80088e2:	1b2d      	subs	r5, r5, r4
 80088e4:	1963      	adds	r3, r4, r5
 80088e6:	42bb      	cmp	r3, r7
 80088e8:	db04      	blt.n	80088f4 <__s2b+0x78>
 80088ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ee:	340a      	adds	r4, #10
 80088f0:	2509      	movs	r5, #9
 80088f2:	e7f6      	b.n	80088e2 <__s2b+0x66>
 80088f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088f8:	4601      	mov	r1, r0
 80088fa:	3b30      	subs	r3, #48	; 0x30
 80088fc:	220a      	movs	r2, #10
 80088fe:	4630      	mov	r0, r6
 8008900:	f7ff ff76 	bl	80087f0 <__multadd>
 8008904:	e7ee      	b.n	80088e4 <__s2b+0x68>
 8008906:	bf00      	nop
 8008908:	0800a3b0 	.word	0x0800a3b0
 800890c:	0800a43c 	.word	0x0800a43c

08008910 <__hi0bits>:
 8008910:	0c03      	lsrs	r3, r0, #16
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	b9d3      	cbnz	r3, 800894c <__hi0bits+0x3c>
 8008916:	0400      	lsls	r0, r0, #16
 8008918:	2310      	movs	r3, #16
 800891a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800891e:	bf04      	itt	eq
 8008920:	0200      	lsleq	r0, r0, #8
 8008922:	3308      	addeq	r3, #8
 8008924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008928:	bf04      	itt	eq
 800892a:	0100      	lsleq	r0, r0, #4
 800892c:	3304      	addeq	r3, #4
 800892e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008932:	bf04      	itt	eq
 8008934:	0080      	lsleq	r0, r0, #2
 8008936:	3302      	addeq	r3, #2
 8008938:	2800      	cmp	r0, #0
 800893a:	db05      	blt.n	8008948 <__hi0bits+0x38>
 800893c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008940:	f103 0301 	add.w	r3, r3, #1
 8008944:	bf08      	it	eq
 8008946:	2320      	moveq	r3, #32
 8008948:	4618      	mov	r0, r3
 800894a:	4770      	bx	lr
 800894c:	2300      	movs	r3, #0
 800894e:	e7e4      	b.n	800891a <__hi0bits+0xa>

08008950 <__lo0bits>:
 8008950:	6803      	ldr	r3, [r0, #0]
 8008952:	f013 0207 	ands.w	r2, r3, #7
 8008956:	4601      	mov	r1, r0
 8008958:	d00b      	beq.n	8008972 <__lo0bits+0x22>
 800895a:	07da      	lsls	r2, r3, #31
 800895c:	d423      	bmi.n	80089a6 <__lo0bits+0x56>
 800895e:	0798      	lsls	r0, r3, #30
 8008960:	bf49      	itett	mi
 8008962:	085b      	lsrmi	r3, r3, #1
 8008964:	089b      	lsrpl	r3, r3, #2
 8008966:	2001      	movmi	r0, #1
 8008968:	600b      	strmi	r3, [r1, #0]
 800896a:	bf5c      	itt	pl
 800896c:	600b      	strpl	r3, [r1, #0]
 800896e:	2002      	movpl	r0, #2
 8008970:	4770      	bx	lr
 8008972:	b298      	uxth	r0, r3
 8008974:	b9a8      	cbnz	r0, 80089a2 <__lo0bits+0x52>
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	2010      	movs	r0, #16
 800897a:	b2da      	uxtb	r2, r3
 800897c:	b90a      	cbnz	r2, 8008982 <__lo0bits+0x32>
 800897e:	3008      	adds	r0, #8
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	071a      	lsls	r2, r3, #28
 8008984:	bf04      	itt	eq
 8008986:	091b      	lsreq	r3, r3, #4
 8008988:	3004      	addeq	r0, #4
 800898a:	079a      	lsls	r2, r3, #30
 800898c:	bf04      	itt	eq
 800898e:	089b      	lsreq	r3, r3, #2
 8008990:	3002      	addeq	r0, #2
 8008992:	07da      	lsls	r2, r3, #31
 8008994:	d403      	bmi.n	800899e <__lo0bits+0x4e>
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	f100 0001 	add.w	r0, r0, #1
 800899c:	d005      	beq.n	80089aa <__lo0bits+0x5a>
 800899e:	600b      	str	r3, [r1, #0]
 80089a0:	4770      	bx	lr
 80089a2:	4610      	mov	r0, r2
 80089a4:	e7e9      	b.n	800897a <__lo0bits+0x2a>
 80089a6:	2000      	movs	r0, #0
 80089a8:	4770      	bx	lr
 80089aa:	2020      	movs	r0, #32
 80089ac:	4770      	bx	lr
	...

080089b0 <__i2b>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7ff feb9 	bl	800872c <_Balloc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__i2b+0x1a>
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <__i2b+0x24>)
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <__i2b+0x28>)
 80089c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089c6:	f000 fe01 	bl	80095cc <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	6144      	str	r4, [r0, #20]
 80089ce:	6103      	str	r3, [r0, #16]
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop
 80089d4:	0800a3b0 	.word	0x0800a3b0
 80089d8:	0800a43c 	.word	0x0800a43c

080089dc <__multiply>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4691      	mov	r9, r2
 80089e2:	690a      	ldr	r2, [r1, #16]
 80089e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	bfb8      	it	lt
 80089ec:	460b      	movlt	r3, r1
 80089ee:	460c      	mov	r4, r1
 80089f0:	bfbc      	itt	lt
 80089f2:	464c      	movlt	r4, r9
 80089f4:	4699      	movlt	r9, r3
 80089f6:	6927      	ldr	r7, [r4, #16]
 80089f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089fc:	68a3      	ldr	r3, [r4, #8]
 80089fe:	6861      	ldr	r1, [r4, #4]
 8008a00:	eb07 060a 	add.w	r6, r7, sl
 8008a04:	42b3      	cmp	r3, r6
 8008a06:	b085      	sub	sp, #20
 8008a08:	bfb8      	it	lt
 8008a0a:	3101      	addlt	r1, #1
 8008a0c:	f7ff fe8e 	bl	800872c <_Balloc>
 8008a10:	b930      	cbnz	r0, 8008a20 <__multiply+0x44>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b44      	ldr	r3, [pc, #272]	; (8008b28 <__multiply+0x14c>)
 8008a16:	4845      	ldr	r0, [pc, #276]	; (8008b2c <__multiply+0x150>)
 8008a18:	f240 115d 	movw	r1, #349	; 0x15d
 8008a1c:	f000 fdd6 	bl	80095cc <__assert_func>
 8008a20:	f100 0514 	add.w	r5, r0, #20
 8008a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a28:	462b      	mov	r3, r5
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	d321      	bcc.n	8008a74 <__multiply+0x98>
 8008a30:	f104 0314 	add.w	r3, r4, #20
 8008a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a38:	f109 0314 	add.w	r3, r9, #20
 8008a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	1b3a      	subs	r2, r7, r4
 8008a44:	3a15      	subs	r2, #21
 8008a46:	f022 0203 	bic.w	r2, r2, #3
 8008a4a:	3204      	adds	r2, #4
 8008a4c:	f104 0115 	add.w	r1, r4, #21
 8008a50:	428f      	cmp	r7, r1
 8008a52:	bf38      	it	cc
 8008a54:	2204      	movcc	r2, #4
 8008a56:	9201      	str	r2, [sp, #4]
 8008a58:	9a02      	ldr	r2, [sp, #8]
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d80c      	bhi.n	8008a7a <__multiply+0x9e>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd03      	ble.n	8008a6c <__multiply+0x90>
 8008a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d05a      	beq.n	8008b22 <__multiply+0x146>
 8008a6c:	6106      	str	r6, [r0, #16]
 8008a6e:	b005      	add	sp, #20
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	f843 2b04 	str.w	r2, [r3], #4
 8008a78:	e7d8      	b.n	8008a2c <__multiply+0x50>
 8008a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a7e:	f1ba 0f00 	cmp.w	sl, #0
 8008a82:	d024      	beq.n	8008ace <__multiply+0xf2>
 8008a84:	f104 0e14 	add.w	lr, r4, #20
 8008a88:	46a9      	mov	r9, r5
 8008a8a:	f04f 0c00 	mov.w	ip, #0
 8008a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a92:	f8d9 1000 	ldr.w	r1, [r9]
 8008a96:	fa1f fb82 	uxth.w	fp, r2
 8008a9a:	b289      	uxth	r1, r1
 8008a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa8:	4461      	add	r1, ip
 8008aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ab6:	b289      	uxth	r1, r1
 8008ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008abc:	4577      	cmp	r7, lr
 8008abe:	f849 1b04 	str.w	r1, [r9], #4
 8008ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ac6:	d8e2      	bhi.n	8008a8e <__multiply+0xb2>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	f845 c002 	str.w	ip, [r5, r2]
 8008ace:	9a03      	ldr	r2, [sp, #12]
 8008ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	f1b9 0f00 	cmp.w	r9, #0
 8008ada:	d020      	beq.n	8008b1e <__multiply+0x142>
 8008adc:	6829      	ldr	r1, [r5, #0]
 8008ade:	f104 0c14 	add.w	ip, r4, #20
 8008ae2:	46ae      	mov	lr, r5
 8008ae4:	f04f 0a00 	mov.w	sl, #0
 8008ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8008aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008af0:	fb09 220b 	mla	r2, r9, fp, r2
 8008af4:	4492      	add	sl, r2
 8008af6:	b289      	uxth	r1, r1
 8008af8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008afc:	f84e 1b04 	str.w	r1, [lr], #4
 8008b00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b04:	f8be 1000 	ldrh.w	r1, [lr]
 8008b08:	0c12      	lsrs	r2, r2, #16
 8008b0a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b12:	4567      	cmp	r7, ip
 8008b14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b18:	d8e6      	bhi.n	8008ae8 <__multiply+0x10c>
 8008b1a:	9a01      	ldr	r2, [sp, #4]
 8008b1c:	50a9      	str	r1, [r5, r2]
 8008b1e:	3504      	adds	r5, #4
 8008b20:	e79a      	b.n	8008a58 <__multiply+0x7c>
 8008b22:	3e01      	subs	r6, #1
 8008b24:	e79c      	b.n	8008a60 <__multiply+0x84>
 8008b26:	bf00      	nop
 8008b28:	0800a3b0 	.word	0x0800a3b0
 8008b2c:	0800a43c 	.word	0x0800a43c

08008b30 <__pow5mult>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4615      	mov	r5, r2
 8008b36:	f012 0203 	ands.w	r2, r2, #3
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	d007      	beq.n	8008b50 <__pow5mult+0x20>
 8008b40:	4c25      	ldr	r4, [pc, #148]	; (8008bd8 <__pow5mult+0xa8>)
 8008b42:	3a01      	subs	r2, #1
 8008b44:	2300      	movs	r3, #0
 8008b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b4a:	f7ff fe51 	bl	80087f0 <__multadd>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	10ad      	asrs	r5, r5, #2
 8008b52:	d03d      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008b54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b56:	b97c      	cbnz	r4, 8008b78 <__pow5mult+0x48>
 8008b58:	2010      	movs	r0, #16
 8008b5a:	f7ff fdbf 	bl	80086dc <malloc>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6270      	str	r0, [r6, #36]	; 0x24
 8008b62:	b928      	cbnz	r0, 8008b70 <__pow5mult+0x40>
 8008b64:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <__pow5mult+0xac>)
 8008b66:	481e      	ldr	r0, [pc, #120]	; (8008be0 <__pow5mult+0xb0>)
 8008b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b6c:	f000 fd2e 	bl	80095cc <__assert_func>
 8008b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b74:	6004      	str	r4, [r0, #0]
 8008b76:	60c4      	str	r4, [r0, #12]
 8008b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b80:	b94c      	cbnz	r4, 8008b96 <__pow5mult+0x66>
 8008b82:	f240 2171 	movw	r1, #625	; 0x271
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ff12 	bl	80089b0 <__i2b>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b92:	4604      	mov	r4, r0
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	07eb      	lsls	r3, r5, #31
 8008b9c:	d50a      	bpl.n	8008bb4 <__pow5mult+0x84>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff1a 	bl	80089dc <__multiply>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4680      	mov	r8, r0
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fdfd 	bl	80087ac <_Bfree>
 8008bb2:	4647      	mov	r7, r8
 8008bb4:	106d      	asrs	r5, r5, #1
 8008bb6:	d00b      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	b938      	cbnz	r0, 8008bcc <__pow5mult+0x9c>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ff0b 	bl	80089dc <__multiply>
 8008bc6:	6020      	str	r0, [r4, #0]
 8008bc8:	f8c0 9000 	str.w	r9, [r0]
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e7e4      	b.n	8008b9a <__pow5mult+0x6a>
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd6:	bf00      	nop
 8008bd8:	0800a588 	.word	0x0800a588
 8008bdc:	0800a33e 	.word	0x0800a33e
 8008be0:	0800a43c 	.word	0x0800a43c

08008be4 <__lshift>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	6849      	ldr	r1, [r1, #4]
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	4691      	mov	r9, r2
 8008bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bfc:	f108 0601 	add.w	r6, r8, #1
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	db0b      	blt.n	8008c1c <__lshift+0x38>
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff fd91 	bl	800872c <_Balloc>
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b948      	cbnz	r0, 8008c22 <__lshift+0x3e>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <__lshift+0xd8>)
 8008c12:	482b      	ldr	r0, [pc, #172]	; (8008cc0 <__lshift+0xdc>)
 8008c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c18:	f000 fcd8 	bl	80095cc <__assert_func>
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	e7ee      	b.n	8008c00 <__lshift+0x1c>
 8008c22:	2300      	movs	r3, #0
 8008c24:	f100 0114 	add.w	r1, r0, #20
 8008c28:	f100 0210 	add.w	r2, r0, #16
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4553      	cmp	r3, sl
 8008c30:	db37      	blt.n	8008ca2 <__lshift+0xbe>
 8008c32:	6920      	ldr	r0, [r4, #16]
 8008c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c38:	f104 0314 	add.w	r3, r4, #20
 8008c3c:	f019 091f 	ands.w	r9, r9, #31
 8008c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c48:	d02f      	beq.n	8008caa <__lshift+0xc6>
 8008c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c4e:	468a      	mov	sl, r1
 8008c50:	f04f 0c00 	mov.w	ip, #0
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	fa02 f209 	lsl.w	r2, r2, r9
 8008c5a:	ea42 020c 	orr.w	r2, r2, ip
 8008c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c66:	4298      	cmp	r0, r3
 8008c68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c6c:	d8f2      	bhi.n	8008c54 <__lshift+0x70>
 8008c6e:	1b03      	subs	r3, r0, r4
 8008c70:	3b15      	subs	r3, #21
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	3304      	adds	r3, #4
 8008c78:	f104 0215 	add.w	r2, r4, #21
 8008c7c:	4290      	cmp	r0, r2
 8008c7e:	bf38      	it	cc
 8008c80:	2304      	movcc	r3, #4
 8008c82:	f841 c003 	str.w	ip, [r1, r3]
 8008c86:	f1bc 0f00 	cmp.w	ip, #0
 8008c8a:	d001      	beq.n	8008c90 <__lshift+0xac>
 8008c8c:	f108 0602 	add.w	r6, r8, #2
 8008c90:	3e01      	subs	r6, #1
 8008c92:	4638      	mov	r0, r7
 8008c94:	612e      	str	r6, [r5, #16]
 8008c96:	4621      	mov	r1, r4
 8008c98:	f7ff fd88 	bl	80087ac <_Bfree>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	e7c1      	b.n	8008c2e <__lshift+0x4a>
 8008caa:	3904      	subs	r1, #4
 8008cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cb4:	4298      	cmp	r0, r3
 8008cb6:	d8f9      	bhi.n	8008cac <__lshift+0xc8>
 8008cb8:	e7ea      	b.n	8008c90 <__lshift+0xac>
 8008cba:	bf00      	nop
 8008cbc:	0800a3b0 	.word	0x0800a3b0
 8008cc0:	0800a43c 	.word	0x0800a43c

08008cc4 <__mcmp>:
 8008cc4:	b530      	push	{r4, r5, lr}
 8008cc6:	6902      	ldr	r2, [r0, #16]
 8008cc8:	690c      	ldr	r4, [r1, #16]
 8008cca:	1b12      	subs	r2, r2, r4
 8008ccc:	d10e      	bne.n	8008cec <__mcmp+0x28>
 8008cce:	f100 0314 	add.w	r3, r0, #20
 8008cd2:	3114      	adds	r1, #20
 8008cd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ce0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ce4:	42a5      	cmp	r5, r4
 8008ce6:	d003      	beq.n	8008cf0 <__mcmp+0x2c>
 8008ce8:	d305      	bcc.n	8008cf6 <__mcmp+0x32>
 8008cea:	2201      	movs	r2, #1
 8008cec:	4610      	mov	r0, r2
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	4283      	cmp	r3, r0
 8008cf2:	d3f3      	bcc.n	8008cdc <__mcmp+0x18>
 8008cf4:	e7fa      	b.n	8008cec <__mcmp+0x28>
 8008cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfa:	e7f7      	b.n	8008cec <__mcmp+0x28>

08008cfc <__mdiff>:
 8008cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	460c      	mov	r4, r1
 8008d02:	4606      	mov	r6, r0
 8008d04:	4611      	mov	r1, r2
 8008d06:	4620      	mov	r0, r4
 8008d08:	4690      	mov	r8, r2
 8008d0a:	f7ff ffdb 	bl	8008cc4 <__mcmp>
 8008d0e:	1e05      	subs	r5, r0, #0
 8008d10:	d110      	bne.n	8008d34 <__mdiff+0x38>
 8008d12:	4629      	mov	r1, r5
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff fd09 	bl	800872c <_Balloc>
 8008d1a:	b930      	cbnz	r0, 8008d2a <__mdiff+0x2e>
 8008d1c:	4b3a      	ldr	r3, [pc, #232]	; (8008e08 <__mdiff+0x10c>)
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f240 2132 	movw	r1, #562	; 0x232
 8008d24:	4839      	ldr	r0, [pc, #228]	; (8008e0c <__mdiff+0x110>)
 8008d26:	f000 fc51 	bl	80095cc <__assert_func>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d34:	bfa4      	itt	ge
 8008d36:	4643      	movge	r3, r8
 8008d38:	46a0      	movge	r8, r4
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d40:	bfa6      	itte	ge
 8008d42:	461c      	movge	r4, r3
 8008d44:	2500      	movge	r5, #0
 8008d46:	2501      	movlt	r5, #1
 8008d48:	f7ff fcf0 	bl	800872c <_Balloc>
 8008d4c:	b920      	cbnz	r0, 8008d58 <__mdiff+0x5c>
 8008d4e:	4b2e      	ldr	r3, [pc, #184]	; (8008e08 <__mdiff+0x10c>)
 8008d50:	4602      	mov	r2, r0
 8008d52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d56:	e7e5      	b.n	8008d24 <__mdiff+0x28>
 8008d58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d5c:	6926      	ldr	r6, [r4, #16]
 8008d5e:	60c5      	str	r5, [r0, #12]
 8008d60:	f104 0914 	add.w	r9, r4, #20
 8008d64:	f108 0514 	add.w	r5, r8, #20
 8008d68:	f100 0e14 	add.w	lr, r0, #20
 8008d6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d74:	f108 0210 	add.w	r2, r8, #16
 8008d78:	46f2      	mov	sl, lr
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d84:	fa1f f883 	uxth.w	r8, r3
 8008d88:	fa11 f18b 	uxtah	r1, r1, fp
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	eba1 0808 	sub.w	r8, r1, r8
 8008d92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d9a:	fa1f f888 	uxth.w	r8, r8
 8008d9e:	1419      	asrs	r1, r3, #16
 8008da0:	454e      	cmp	r6, r9
 8008da2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008da6:	f84a 3b04 	str.w	r3, [sl], #4
 8008daa:	d8e7      	bhi.n	8008d7c <__mdiff+0x80>
 8008dac:	1b33      	subs	r3, r6, r4
 8008dae:	3b15      	subs	r3, #21
 8008db0:	f023 0303 	bic.w	r3, r3, #3
 8008db4:	3304      	adds	r3, #4
 8008db6:	3415      	adds	r4, #21
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	bf38      	it	cc
 8008dbc:	2304      	movcc	r3, #4
 8008dbe:	441d      	add	r5, r3
 8008dc0:	4473      	add	r3, lr
 8008dc2:	469e      	mov	lr, r3
 8008dc4:	462e      	mov	r6, r5
 8008dc6:	4566      	cmp	r6, ip
 8008dc8:	d30e      	bcc.n	8008de8 <__mdiff+0xec>
 8008dca:	f10c 0203 	add.w	r2, ip, #3
 8008dce:	1b52      	subs	r2, r2, r5
 8008dd0:	f022 0203 	bic.w	r2, r2, #3
 8008dd4:	3d03      	subs	r5, #3
 8008dd6:	45ac      	cmp	ip, r5
 8008dd8:	bf38      	it	cc
 8008dda:	2200      	movcc	r2, #0
 8008ddc:	441a      	add	r2, r3
 8008dde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008de2:	b17b      	cbz	r3, 8008e04 <__mdiff+0x108>
 8008de4:	6107      	str	r7, [r0, #16]
 8008de6:	e7a3      	b.n	8008d30 <__mdiff+0x34>
 8008de8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dec:	fa11 f288 	uxtah	r2, r1, r8
 8008df0:	1414      	asrs	r4, r2, #16
 8008df2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008df6:	b292      	uxth	r2, r2
 8008df8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dfc:	f84e 2b04 	str.w	r2, [lr], #4
 8008e00:	1421      	asrs	r1, r4, #16
 8008e02:	e7e0      	b.n	8008dc6 <__mdiff+0xca>
 8008e04:	3f01      	subs	r7, #1
 8008e06:	e7ea      	b.n	8008dde <__mdiff+0xe2>
 8008e08:	0800a3b0 	.word	0x0800a3b0
 8008e0c:	0800a43c 	.word	0x0800a43c

08008e10 <__ulp>:
 8008e10:	b082      	sub	sp, #8
 8008e12:	ed8d 0b00 	vstr	d0, [sp]
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	4912      	ldr	r1, [pc, #72]	; (8008e64 <__ulp+0x54>)
 8008e1a:	4019      	ands	r1, r3
 8008e1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e20:	2900      	cmp	r1, #0
 8008e22:	dd05      	ble.n	8008e30 <__ulp+0x20>
 8008e24:	2200      	movs	r2, #0
 8008e26:	460b      	mov	r3, r1
 8008e28:	ec43 2b10 	vmov	d0, r2, r3
 8008e2c:	b002      	add	sp, #8
 8008e2e:	4770      	bx	lr
 8008e30:	4249      	negs	r1, r1
 8008e32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	da04      	bge.n	8008e4e <__ulp+0x3e>
 8008e44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e48:	fa41 f300 	asr.w	r3, r1, r0
 8008e4c:	e7ec      	b.n	8008e28 <__ulp+0x18>
 8008e4e:	f1a0 0114 	sub.w	r1, r0, #20
 8008e52:	291e      	cmp	r1, #30
 8008e54:	bfda      	itte	le
 8008e56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008e5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008e5e:	2101      	movgt	r1, #1
 8008e60:	460a      	mov	r2, r1
 8008e62:	e7e1      	b.n	8008e28 <__ulp+0x18>
 8008e64:	7ff00000 	.word	0x7ff00000

08008e68 <__b2d>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	6905      	ldr	r5, [r0, #16]
 8008e6c:	f100 0714 	add.w	r7, r0, #20
 8008e70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e74:	1f2e      	subs	r6, r5, #4
 8008e76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff fd48 	bl	8008910 <__hi0bits>
 8008e80:	f1c0 0320 	rsb	r3, r0, #32
 8008e84:	280a      	cmp	r0, #10
 8008e86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f04 <__b2d+0x9c>
 8008e8a:	600b      	str	r3, [r1, #0]
 8008e8c:	dc14      	bgt.n	8008eb8 <__b2d+0x50>
 8008e8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008e92:	fa24 f10e 	lsr.w	r1, r4, lr
 8008e96:	42b7      	cmp	r7, r6
 8008e98:	ea41 030c 	orr.w	r3, r1, ip
 8008e9c:	bf34      	ite	cc
 8008e9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ea2:	2100      	movcs	r1, #0
 8008ea4:	3015      	adds	r0, #21
 8008ea6:	fa04 f000 	lsl.w	r0, r4, r0
 8008eaa:	fa21 f10e 	lsr.w	r1, r1, lr
 8008eae:	ea40 0201 	orr.w	r2, r0, r1
 8008eb2:	ec43 2b10 	vmov	d0, r2, r3
 8008eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb8:	42b7      	cmp	r7, r6
 8008eba:	bf3a      	itte	cc
 8008ebc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ec0:	f1a5 0608 	subcc.w	r6, r5, #8
 8008ec4:	2100      	movcs	r1, #0
 8008ec6:	380b      	subs	r0, #11
 8008ec8:	d017      	beq.n	8008efa <__b2d+0x92>
 8008eca:	f1c0 0c20 	rsb	ip, r0, #32
 8008ece:	fa04 f500 	lsl.w	r5, r4, r0
 8008ed2:	42be      	cmp	r6, r7
 8008ed4:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ed8:	ea45 0504 	orr.w	r5, r5, r4
 8008edc:	bf8c      	ite	hi
 8008ede:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008ee2:	2400      	movls	r4, #0
 8008ee4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008ee8:	fa01 f000 	lsl.w	r0, r1, r0
 8008eec:	fa24 f40c 	lsr.w	r4, r4, ip
 8008ef0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ef4:	ea40 0204 	orr.w	r2, r0, r4
 8008ef8:	e7db      	b.n	8008eb2 <__b2d+0x4a>
 8008efa:	ea44 030c 	orr.w	r3, r4, ip
 8008efe:	460a      	mov	r2, r1
 8008f00:	e7d7      	b.n	8008eb2 <__b2d+0x4a>
 8008f02:	bf00      	nop
 8008f04:	3ff00000 	.word	0x3ff00000

08008f08 <__d2b>:
 8008f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	4689      	mov	r9, r1
 8008f0e:	2101      	movs	r1, #1
 8008f10:	ec57 6b10 	vmov	r6, r7, d0
 8008f14:	4690      	mov	r8, r2
 8008f16:	f7ff fc09 	bl	800872c <_Balloc>
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	b930      	cbnz	r0, 8008f2c <__d2b+0x24>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b25      	ldr	r3, [pc, #148]	; (8008fb8 <__d2b+0xb0>)
 8008f22:	4826      	ldr	r0, [pc, #152]	; (8008fbc <__d2b+0xb4>)
 8008f24:	f240 310a 	movw	r1, #778	; 0x30a
 8008f28:	f000 fb50 	bl	80095cc <__assert_func>
 8008f2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f34:	bb35      	cbnz	r5, 8008f84 <__d2b+0x7c>
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	d028      	beq.n	8008f8e <__d2b+0x86>
 8008f3c:	4668      	mov	r0, sp
 8008f3e:	9600      	str	r6, [sp, #0]
 8008f40:	f7ff fd06 	bl	8008950 <__lo0bits>
 8008f44:	9900      	ldr	r1, [sp, #0]
 8008f46:	b300      	cbz	r0, 8008f8a <__d2b+0x82>
 8008f48:	9a01      	ldr	r2, [sp, #4]
 8008f4a:	f1c0 0320 	rsb	r3, r0, #32
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	430b      	orrs	r3, r1
 8008f54:	40c2      	lsrs	r2, r0
 8008f56:	6163      	str	r3, [r4, #20]
 8008f58:	9201      	str	r2, [sp, #4]
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	61a3      	str	r3, [r4, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bf14      	ite	ne
 8008f62:	2202      	movne	r2, #2
 8008f64:	2201      	moveq	r2, #1
 8008f66:	6122      	str	r2, [r4, #16]
 8008f68:	b1d5      	cbz	r5, 8008fa0 <__d2b+0x98>
 8008f6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f6e:	4405      	add	r5, r0
 8008f70:	f8c9 5000 	str.w	r5, [r9]
 8008f74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f78:	f8c8 0000 	str.w	r0, [r8]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	b003      	add	sp, #12
 8008f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f88:	e7d5      	b.n	8008f36 <__d2b+0x2e>
 8008f8a:	6161      	str	r1, [r4, #20]
 8008f8c:	e7e5      	b.n	8008f5a <__d2b+0x52>
 8008f8e:	a801      	add	r0, sp, #4
 8008f90:	f7ff fcde 	bl	8008950 <__lo0bits>
 8008f94:	9b01      	ldr	r3, [sp, #4]
 8008f96:	6163      	str	r3, [r4, #20]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	6122      	str	r2, [r4, #16]
 8008f9c:	3020      	adds	r0, #32
 8008f9e:	e7e3      	b.n	8008f68 <__d2b+0x60>
 8008fa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fa8:	f8c9 0000 	str.w	r0, [r9]
 8008fac:	6918      	ldr	r0, [r3, #16]
 8008fae:	f7ff fcaf 	bl	8008910 <__hi0bits>
 8008fb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fb6:	e7df      	b.n	8008f78 <__d2b+0x70>
 8008fb8:	0800a3b0 	.word	0x0800a3b0
 8008fbc:	0800a43c 	.word	0x0800a43c

08008fc0 <__ratio>:
 8008fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	4688      	mov	r8, r1
 8008fc6:	4669      	mov	r1, sp
 8008fc8:	4681      	mov	r9, r0
 8008fca:	f7ff ff4d 	bl	8008e68 <__b2d>
 8008fce:	a901      	add	r1, sp, #4
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	ec55 4b10 	vmov	r4, r5, d0
 8008fd6:	f7ff ff47 	bl	8008e68 <__b2d>
 8008fda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fe2:	eba3 0c02 	sub.w	ip, r3, r2
 8008fe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ff0:	ec51 0b10 	vmov	r0, r1, d0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bfd6      	itet	le
 8008ff8:	460a      	movle	r2, r1
 8008ffa:	462a      	movgt	r2, r5
 8008ffc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009000:	468b      	mov	fp, r1
 8009002:	462f      	mov	r7, r5
 8009004:	bfd4      	ite	le
 8009006:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800900a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800900e:	4620      	mov	r0, r4
 8009010:	ee10 2a10 	vmov	r2, s0
 8009014:	465b      	mov	r3, fp
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 fc18 	bl	800084c <__aeabi_ddiv>
 800901c:	ec41 0b10 	vmov	d0, r0, r1
 8009020:	b003      	add	sp, #12
 8009022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009026 <__copybits>:
 8009026:	3901      	subs	r1, #1
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	1149      	asrs	r1, r1, #5
 800902c:	6914      	ldr	r4, [r2, #16]
 800902e:	3101      	adds	r1, #1
 8009030:	f102 0314 	add.w	r3, r2, #20
 8009034:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009038:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800903c:	1f05      	subs	r5, r0, #4
 800903e:	42a3      	cmp	r3, r4
 8009040:	d30c      	bcc.n	800905c <__copybits+0x36>
 8009042:	1aa3      	subs	r3, r4, r2
 8009044:	3b11      	subs	r3, #17
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	3211      	adds	r2, #17
 800904c:	42a2      	cmp	r2, r4
 800904e:	bf88      	it	hi
 8009050:	2300      	movhi	r3, #0
 8009052:	4418      	add	r0, r3
 8009054:	2300      	movs	r3, #0
 8009056:	4288      	cmp	r0, r1
 8009058:	d305      	bcc.n	8009066 <__copybits+0x40>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009060:	f845 6f04 	str.w	r6, [r5, #4]!
 8009064:	e7eb      	b.n	800903e <__copybits+0x18>
 8009066:	f840 3b04 	str.w	r3, [r0], #4
 800906a:	e7f4      	b.n	8009056 <__copybits+0x30>

0800906c <__any_on>:
 800906c:	f100 0214 	add.w	r2, r0, #20
 8009070:	6900      	ldr	r0, [r0, #16]
 8009072:	114b      	asrs	r3, r1, #5
 8009074:	4298      	cmp	r0, r3
 8009076:	b510      	push	{r4, lr}
 8009078:	db11      	blt.n	800909e <__any_on+0x32>
 800907a:	dd0a      	ble.n	8009092 <__any_on+0x26>
 800907c:	f011 011f 	ands.w	r1, r1, #31
 8009080:	d007      	beq.n	8009092 <__any_on+0x26>
 8009082:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009086:	fa24 f001 	lsr.w	r0, r4, r1
 800908a:	fa00 f101 	lsl.w	r1, r0, r1
 800908e:	428c      	cmp	r4, r1
 8009090:	d10b      	bne.n	80090aa <__any_on+0x3e>
 8009092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009096:	4293      	cmp	r3, r2
 8009098:	d803      	bhi.n	80090a2 <__any_on+0x36>
 800909a:	2000      	movs	r0, #0
 800909c:	bd10      	pop	{r4, pc}
 800909e:	4603      	mov	r3, r0
 80090a0:	e7f7      	b.n	8009092 <__any_on+0x26>
 80090a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d0f5      	beq.n	8009096 <__any_on+0x2a>
 80090aa:	2001      	movs	r0, #1
 80090ac:	e7f6      	b.n	800909c <__any_on+0x30>

080090ae <_calloc_r>:
 80090ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090b0:	fba1 2402 	umull	r2, r4, r1, r2
 80090b4:	b94c      	cbnz	r4, 80090ca <_calloc_r+0x1c>
 80090b6:	4611      	mov	r1, r2
 80090b8:	9201      	str	r2, [sp, #4]
 80090ba:	f000 f87b 	bl	80091b4 <_malloc_r>
 80090be:	9a01      	ldr	r2, [sp, #4]
 80090c0:	4605      	mov	r5, r0
 80090c2:	b930      	cbnz	r0, 80090d2 <_calloc_r+0x24>
 80090c4:	4628      	mov	r0, r5
 80090c6:	b003      	add	sp, #12
 80090c8:	bd30      	pop	{r4, r5, pc}
 80090ca:	220c      	movs	r2, #12
 80090cc:	6002      	str	r2, [r0, #0]
 80090ce:	2500      	movs	r5, #0
 80090d0:	e7f8      	b.n	80090c4 <_calloc_r+0x16>
 80090d2:	4621      	mov	r1, r4
 80090d4:	f7fc fbc0 	bl	8005858 <memset>
 80090d8:	e7f4      	b.n	80090c4 <_calloc_r+0x16>
	...

080090dc <_free_r>:
 80090dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090de:	2900      	cmp	r1, #0
 80090e0:	d044      	beq.n	800916c <_free_r+0x90>
 80090e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e6:	9001      	str	r0, [sp, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f1a1 0404 	sub.w	r4, r1, #4
 80090ee:	bfb8      	it	lt
 80090f0:	18e4      	addlt	r4, r4, r3
 80090f2:	f000 fab5 	bl	8009660 <__malloc_lock>
 80090f6:	4a1e      	ldr	r2, [pc, #120]	; (8009170 <_free_r+0x94>)
 80090f8:	9801      	ldr	r0, [sp, #4]
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	b933      	cbnz	r3, 800910c <_free_r+0x30>
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	6014      	str	r4, [r2, #0]
 8009102:	b003      	add	sp, #12
 8009104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009108:	f000 bab0 	b.w	800966c <__malloc_unlock>
 800910c:	42a3      	cmp	r3, r4
 800910e:	d908      	bls.n	8009122 <_free_r+0x46>
 8009110:	6825      	ldr	r5, [r4, #0]
 8009112:	1961      	adds	r1, r4, r5
 8009114:	428b      	cmp	r3, r1
 8009116:	bf01      	itttt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	1949      	addeq	r1, r1, r5
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	e7ed      	b.n	80090fe <_free_r+0x22>
 8009122:	461a      	mov	r2, r3
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	b10b      	cbz	r3, 800912c <_free_r+0x50>
 8009128:	42a3      	cmp	r3, r4
 800912a:	d9fa      	bls.n	8009122 <_free_r+0x46>
 800912c:	6811      	ldr	r1, [r2, #0]
 800912e:	1855      	adds	r5, r2, r1
 8009130:	42a5      	cmp	r5, r4
 8009132:	d10b      	bne.n	800914c <_free_r+0x70>
 8009134:	6824      	ldr	r4, [r4, #0]
 8009136:	4421      	add	r1, r4
 8009138:	1854      	adds	r4, r2, r1
 800913a:	42a3      	cmp	r3, r4
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	d1e0      	bne.n	8009102 <_free_r+0x26>
 8009140:	681c      	ldr	r4, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	6053      	str	r3, [r2, #4]
 8009146:	4421      	add	r1, r4
 8009148:	6011      	str	r1, [r2, #0]
 800914a:	e7da      	b.n	8009102 <_free_r+0x26>
 800914c:	d902      	bls.n	8009154 <_free_r+0x78>
 800914e:	230c      	movs	r3, #12
 8009150:	6003      	str	r3, [r0, #0]
 8009152:	e7d6      	b.n	8009102 <_free_r+0x26>
 8009154:	6825      	ldr	r5, [r4, #0]
 8009156:	1961      	adds	r1, r4, r5
 8009158:	428b      	cmp	r3, r1
 800915a:	bf04      	itt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	bf04      	itt	eq
 8009164:	1949      	addeq	r1, r1, r5
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	6054      	str	r4, [r2, #4]
 800916a:	e7ca      	b.n	8009102 <_free_r+0x26>
 800916c:	b003      	add	sp, #12
 800916e:	bd30      	pop	{r4, r5, pc}
 8009170:	20000514 	.word	0x20000514

08009174 <sbrk_aligned>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	4e0e      	ldr	r6, [pc, #56]	; (80091b0 <sbrk_aligned+0x3c>)
 8009178:	460c      	mov	r4, r1
 800917a:	6831      	ldr	r1, [r6, #0]
 800917c:	4605      	mov	r5, r0
 800917e:	b911      	cbnz	r1, 8009186 <sbrk_aligned+0x12>
 8009180:	f000 f9f2 	bl	8009568 <_sbrk_r>
 8009184:	6030      	str	r0, [r6, #0]
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 f9ed 	bl	8009568 <_sbrk_r>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d00a      	beq.n	80091a8 <sbrk_aligned+0x34>
 8009192:	1cc4      	adds	r4, r0, #3
 8009194:	f024 0403 	bic.w	r4, r4, #3
 8009198:	42a0      	cmp	r0, r4
 800919a:	d007      	beq.n	80091ac <sbrk_aligned+0x38>
 800919c:	1a21      	subs	r1, r4, r0
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 f9e2 	bl	8009568 <_sbrk_r>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d101      	bne.n	80091ac <sbrk_aligned+0x38>
 80091a8:	f04f 34ff 	mov.w	r4, #4294967295
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	20000518 	.word	0x20000518

080091b4 <_malloc_r>:
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	1ccd      	adds	r5, r1, #3
 80091ba:	f025 0503 	bic.w	r5, r5, #3
 80091be:	3508      	adds	r5, #8
 80091c0:	2d0c      	cmp	r5, #12
 80091c2:	bf38      	it	cc
 80091c4:	250c      	movcc	r5, #12
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	4607      	mov	r7, r0
 80091ca:	db01      	blt.n	80091d0 <_malloc_r+0x1c>
 80091cc:	42a9      	cmp	r1, r5
 80091ce:	d905      	bls.n	80091dc <_malloc_r+0x28>
 80091d0:	230c      	movs	r3, #12
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	2600      	movs	r6, #0
 80091d6:	4630      	mov	r0, r6
 80091d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091dc:	4e2e      	ldr	r6, [pc, #184]	; (8009298 <_malloc_r+0xe4>)
 80091de:	f000 fa3f 	bl	8009660 <__malloc_lock>
 80091e2:	6833      	ldr	r3, [r6, #0]
 80091e4:	461c      	mov	r4, r3
 80091e6:	bb34      	cbnz	r4, 8009236 <_malloc_r+0x82>
 80091e8:	4629      	mov	r1, r5
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff ffc2 	bl	8009174 <sbrk_aligned>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	4604      	mov	r4, r0
 80091f4:	d14d      	bne.n	8009292 <_malloc_r+0xde>
 80091f6:	6834      	ldr	r4, [r6, #0]
 80091f8:	4626      	mov	r6, r4
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	d140      	bne.n	8009280 <_malloc_r+0xcc>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	4631      	mov	r1, r6
 8009202:	4638      	mov	r0, r7
 8009204:	eb04 0803 	add.w	r8, r4, r3
 8009208:	f000 f9ae 	bl	8009568 <_sbrk_r>
 800920c:	4580      	cmp	r8, r0
 800920e:	d13a      	bne.n	8009286 <_malloc_r+0xd2>
 8009210:	6821      	ldr	r1, [r4, #0]
 8009212:	3503      	adds	r5, #3
 8009214:	1a6d      	subs	r5, r5, r1
 8009216:	f025 0503 	bic.w	r5, r5, #3
 800921a:	3508      	adds	r5, #8
 800921c:	2d0c      	cmp	r5, #12
 800921e:	bf38      	it	cc
 8009220:	250c      	movcc	r5, #12
 8009222:	4629      	mov	r1, r5
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ffa5 	bl	8009174 <sbrk_aligned>
 800922a:	3001      	adds	r0, #1
 800922c:	d02b      	beq.n	8009286 <_malloc_r+0xd2>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	442b      	add	r3, r5
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	e00e      	b.n	8009254 <_malloc_r+0xa0>
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	1b52      	subs	r2, r2, r5
 800923a:	d41e      	bmi.n	800927a <_malloc_r+0xc6>
 800923c:	2a0b      	cmp	r2, #11
 800923e:	d916      	bls.n	800926e <_malloc_r+0xba>
 8009240:	1961      	adds	r1, r4, r5
 8009242:	42a3      	cmp	r3, r4
 8009244:	6025      	str	r5, [r4, #0]
 8009246:	bf18      	it	ne
 8009248:	6059      	strne	r1, [r3, #4]
 800924a:	6863      	ldr	r3, [r4, #4]
 800924c:	bf08      	it	eq
 800924e:	6031      	streq	r1, [r6, #0]
 8009250:	5162      	str	r2, [r4, r5]
 8009252:	604b      	str	r3, [r1, #4]
 8009254:	4638      	mov	r0, r7
 8009256:	f104 060b 	add.w	r6, r4, #11
 800925a:	f000 fa07 	bl	800966c <__malloc_unlock>
 800925e:	f026 0607 	bic.w	r6, r6, #7
 8009262:	1d23      	adds	r3, r4, #4
 8009264:	1af2      	subs	r2, r6, r3
 8009266:	d0b6      	beq.n	80091d6 <_malloc_r+0x22>
 8009268:	1b9b      	subs	r3, r3, r6
 800926a:	50a3      	str	r3, [r4, r2]
 800926c:	e7b3      	b.n	80091d6 <_malloc_r+0x22>
 800926e:	6862      	ldr	r2, [r4, #4]
 8009270:	42a3      	cmp	r3, r4
 8009272:	bf0c      	ite	eq
 8009274:	6032      	streq	r2, [r6, #0]
 8009276:	605a      	strne	r2, [r3, #4]
 8009278:	e7ec      	b.n	8009254 <_malloc_r+0xa0>
 800927a:	4623      	mov	r3, r4
 800927c:	6864      	ldr	r4, [r4, #4]
 800927e:	e7b2      	b.n	80091e6 <_malloc_r+0x32>
 8009280:	4634      	mov	r4, r6
 8009282:	6876      	ldr	r6, [r6, #4]
 8009284:	e7b9      	b.n	80091fa <_malloc_r+0x46>
 8009286:	230c      	movs	r3, #12
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	4638      	mov	r0, r7
 800928c:	f000 f9ee 	bl	800966c <__malloc_unlock>
 8009290:	e7a1      	b.n	80091d6 <_malloc_r+0x22>
 8009292:	6025      	str	r5, [r4, #0]
 8009294:	e7de      	b.n	8009254 <_malloc_r+0xa0>
 8009296:	bf00      	nop
 8009298:	20000514 	.word	0x20000514

0800929c <__ssputs_r>:
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	688e      	ldr	r6, [r1, #8]
 80092a2:	429e      	cmp	r6, r3
 80092a4:	4682      	mov	sl, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	4690      	mov	r8, r2
 80092aa:	461f      	mov	r7, r3
 80092ac:	d838      	bhi.n	8009320 <__ssputs_r+0x84>
 80092ae:	898a      	ldrh	r2, [r1, #12]
 80092b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092b4:	d032      	beq.n	800931c <__ssputs_r+0x80>
 80092b6:	6825      	ldr	r5, [r4, #0]
 80092b8:	6909      	ldr	r1, [r1, #16]
 80092ba:	eba5 0901 	sub.w	r9, r5, r1
 80092be:	6965      	ldr	r5, [r4, #20]
 80092c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092c8:	3301      	adds	r3, #1
 80092ca:	444b      	add	r3, r9
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	429d      	cmp	r5, r3
 80092d0:	bf38      	it	cc
 80092d2:	461d      	movcc	r5, r3
 80092d4:	0553      	lsls	r3, r2, #21
 80092d6:	d531      	bpl.n	800933c <__ssputs_r+0xa0>
 80092d8:	4629      	mov	r1, r5
 80092da:	f7ff ff6b 	bl	80091b4 <_malloc_r>
 80092de:	4606      	mov	r6, r0
 80092e0:	b950      	cbnz	r0, 80092f8 <__ssputs_r+0x5c>
 80092e2:	230c      	movs	r3, #12
 80092e4:	f8ca 3000 	str.w	r3, [sl]
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	6921      	ldr	r1, [r4, #16]
 80092fa:	464a      	mov	r2, r9
 80092fc:	f7ff fa08 	bl	8008710 <memcpy>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	6126      	str	r6, [r4, #16]
 800930e:	6165      	str	r5, [r4, #20]
 8009310:	444e      	add	r6, r9
 8009312:	eba5 0509 	sub.w	r5, r5, r9
 8009316:	6026      	str	r6, [r4, #0]
 8009318:	60a5      	str	r5, [r4, #8]
 800931a:	463e      	mov	r6, r7
 800931c:	42be      	cmp	r6, r7
 800931e:	d900      	bls.n	8009322 <__ssputs_r+0x86>
 8009320:	463e      	mov	r6, r7
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	4632      	mov	r2, r6
 8009326:	4641      	mov	r1, r8
 8009328:	f000 f980 	bl	800962c <memmove>
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	1b9b      	subs	r3, r3, r6
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	4433      	add	r3, r6
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	2000      	movs	r0, #0
 800933a:	e7db      	b.n	80092f4 <__ssputs_r+0x58>
 800933c:	462a      	mov	r2, r5
 800933e:	f000 f99b 	bl	8009678 <_realloc_r>
 8009342:	4606      	mov	r6, r0
 8009344:	2800      	cmp	r0, #0
 8009346:	d1e1      	bne.n	800930c <__ssputs_r+0x70>
 8009348:	6921      	ldr	r1, [r4, #16]
 800934a:	4650      	mov	r0, sl
 800934c:	f7ff fec6 	bl	80090dc <_free_r>
 8009350:	e7c7      	b.n	80092e2 <__ssputs_r+0x46>
	...

08009354 <_svfiprintf_r>:
 8009354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009358:	4698      	mov	r8, r3
 800935a:	898b      	ldrh	r3, [r1, #12]
 800935c:	061b      	lsls	r3, r3, #24
 800935e:	b09d      	sub	sp, #116	; 0x74
 8009360:	4607      	mov	r7, r0
 8009362:	460d      	mov	r5, r1
 8009364:	4614      	mov	r4, r2
 8009366:	d50e      	bpl.n	8009386 <_svfiprintf_r+0x32>
 8009368:	690b      	ldr	r3, [r1, #16]
 800936a:	b963      	cbnz	r3, 8009386 <_svfiprintf_r+0x32>
 800936c:	2140      	movs	r1, #64	; 0x40
 800936e:	f7ff ff21 	bl	80091b4 <_malloc_r>
 8009372:	6028      	str	r0, [r5, #0]
 8009374:	6128      	str	r0, [r5, #16]
 8009376:	b920      	cbnz	r0, 8009382 <_svfiprintf_r+0x2e>
 8009378:	230c      	movs	r3, #12
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	e0d1      	b.n	8009526 <_svfiprintf_r+0x1d2>
 8009382:	2340      	movs	r3, #64	; 0x40
 8009384:	616b      	str	r3, [r5, #20]
 8009386:	2300      	movs	r3, #0
 8009388:	9309      	str	r3, [sp, #36]	; 0x24
 800938a:	2320      	movs	r3, #32
 800938c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009390:	f8cd 800c 	str.w	r8, [sp, #12]
 8009394:	2330      	movs	r3, #48	; 0x30
 8009396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009540 <_svfiprintf_r+0x1ec>
 800939a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939e:	f04f 0901 	mov.w	r9, #1
 80093a2:	4623      	mov	r3, r4
 80093a4:	469a      	mov	sl, r3
 80093a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093aa:	b10a      	cbz	r2, 80093b0 <_svfiprintf_r+0x5c>
 80093ac:	2a25      	cmp	r2, #37	; 0x25
 80093ae:	d1f9      	bne.n	80093a4 <_svfiprintf_r+0x50>
 80093b0:	ebba 0b04 	subs.w	fp, sl, r4
 80093b4:	d00b      	beq.n	80093ce <_svfiprintf_r+0x7a>
 80093b6:	465b      	mov	r3, fp
 80093b8:	4622      	mov	r2, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ff6d 	bl	800929c <__ssputs_r>
 80093c2:	3001      	adds	r0, #1
 80093c4:	f000 80aa 	beq.w	800951c <_svfiprintf_r+0x1c8>
 80093c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ca:	445a      	add	r2, fp
 80093cc:	9209      	str	r2, [sp, #36]	; 0x24
 80093ce:	f89a 3000 	ldrb.w	r3, [sl]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80a2 	beq.w	800951c <_svfiprintf_r+0x1c8>
 80093d8:	2300      	movs	r3, #0
 80093da:	f04f 32ff 	mov.w	r2, #4294967295
 80093de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e2:	f10a 0a01 	add.w	sl, sl, #1
 80093e6:	9304      	str	r3, [sp, #16]
 80093e8:	9307      	str	r3, [sp, #28]
 80093ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ee:	931a      	str	r3, [sp, #104]	; 0x68
 80093f0:	4654      	mov	r4, sl
 80093f2:	2205      	movs	r2, #5
 80093f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f8:	4851      	ldr	r0, [pc, #324]	; (8009540 <_svfiprintf_r+0x1ec>)
 80093fa:	f7f6 fef1 	bl	80001e0 <memchr>
 80093fe:	9a04      	ldr	r2, [sp, #16]
 8009400:	b9d8      	cbnz	r0, 800943a <_svfiprintf_r+0xe6>
 8009402:	06d0      	lsls	r0, r2, #27
 8009404:	bf44      	itt	mi
 8009406:	2320      	movmi	r3, #32
 8009408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940c:	0711      	lsls	r1, r2, #28
 800940e:	bf44      	itt	mi
 8009410:	232b      	movmi	r3, #43	; 0x2b
 8009412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009416:	f89a 3000 	ldrb.w	r3, [sl]
 800941a:	2b2a      	cmp	r3, #42	; 0x2a
 800941c:	d015      	beq.n	800944a <_svfiprintf_r+0xf6>
 800941e:	9a07      	ldr	r2, [sp, #28]
 8009420:	4654      	mov	r4, sl
 8009422:	2000      	movs	r0, #0
 8009424:	f04f 0c0a 	mov.w	ip, #10
 8009428:	4621      	mov	r1, r4
 800942a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942e:	3b30      	subs	r3, #48	; 0x30
 8009430:	2b09      	cmp	r3, #9
 8009432:	d94e      	bls.n	80094d2 <_svfiprintf_r+0x17e>
 8009434:	b1b0      	cbz	r0, 8009464 <_svfiprintf_r+0x110>
 8009436:	9207      	str	r2, [sp, #28]
 8009438:	e014      	b.n	8009464 <_svfiprintf_r+0x110>
 800943a:	eba0 0308 	sub.w	r3, r0, r8
 800943e:	fa09 f303 	lsl.w	r3, r9, r3
 8009442:	4313      	orrs	r3, r2
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	46a2      	mov	sl, r4
 8009448:	e7d2      	b.n	80093f0 <_svfiprintf_r+0x9c>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	1d19      	adds	r1, r3, #4
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	9103      	str	r1, [sp, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	bfbb      	ittet	lt
 8009456:	425b      	neglt	r3, r3
 8009458:	f042 0202 	orrlt.w	r2, r2, #2
 800945c:	9307      	strge	r3, [sp, #28]
 800945e:	9307      	strlt	r3, [sp, #28]
 8009460:	bfb8      	it	lt
 8009462:	9204      	strlt	r2, [sp, #16]
 8009464:	7823      	ldrb	r3, [r4, #0]
 8009466:	2b2e      	cmp	r3, #46	; 0x2e
 8009468:	d10c      	bne.n	8009484 <_svfiprintf_r+0x130>
 800946a:	7863      	ldrb	r3, [r4, #1]
 800946c:	2b2a      	cmp	r3, #42	; 0x2a
 800946e:	d135      	bne.n	80094dc <_svfiprintf_r+0x188>
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	1d1a      	adds	r2, r3, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	9203      	str	r2, [sp, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	bfb8      	it	lt
 800947c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009480:	3402      	adds	r4, #2
 8009482:	9305      	str	r3, [sp, #20]
 8009484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009550 <_svfiprintf_r+0x1fc>
 8009488:	7821      	ldrb	r1, [r4, #0]
 800948a:	2203      	movs	r2, #3
 800948c:	4650      	mov	r0, sl
 800948e:	f7f6 fea7 	bl	80001e0 <memchr>
 8009492:	b140      	cbz	r0, 80094a6 <_svfiprintf_r+0x152>
 8009494:	2340      	movs	r3, #64	; 0x40
 8009496:	eba0 000a 	sub.w	r0, r0, sl
 800949a:	fa03 f000 	lsl.w	r0, r3, r0
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	4303      	orrs	r3, r0
 80094a2:	3401      	adds	r4, #1
 80094a4:	9304      	str	r3, [sp, #16]
 80094a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094aa:	4826      	ldr	r0, [pc, #152]	; (8009544 <_svfiprintf_r+0x1f0>)
 80094ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094b0:	2206      	movs	r2, #6
 80094b2:	f7f6 fe95 	bl	80001e0 <memchr>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d038      	beq.n	800952c <_svfiprintf_r+0x1d8>
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <_svfiprintf_r+0x1f4>)
 80094bc:	bb1b      	cbnz	r3, 8009506 <_svfiprintf_r+0x1b2>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	3307      	adds	r3, #7
 80094c2:	f023 0307 	bic.w	r3, r3, #7
 80094c6:	3308      	adds	r3, #8
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094cc:	4433      	add	r3, r6
 80094ce:	9309      	str	r3, [sp, #36]	; 0x24
 80094d0:	e767      	b.n	80093a2 <_svfiprintf_r+0x4e>
 80094d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d6:	460c      	mov	r4, r1
 80094d8:	2001      	movs	r0, #1
 80094da:	e7a5      	b.n	8009428 <_svfiprintf_r+0xd4>
 80094dc:	2300      	movs	r3, #0
 80094de:	3401      	adds	r4, #1
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	4619      	mov	r1, r3
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4620      	mov	r0, r4
 80094ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ee:	3a30      	subs	r2, #48	; 0x30
 80094f0:	2a09      	cmp	r2, #9
 80094f2:	d903      	bls.n	80094fc <_svfiprintf_r+0x1a8>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0c5      	beq.n	8009484 <_svfiprintf_r+0x130>
 80094f8:	9105      	str	r1, [sp, #20]
 80094fa:	e7c3      	b.n	8009484 <_svfiprintf_r+0x130>
 80094fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009500:	4604      	mov	r4, r0
 8009502:	2301      	movs	r3, #1
 8009504:	e7f0      	b.n	80094e8 <_svfiprintf_r+0x194>
 8009506:	ab03      	add	r3, sp, #12
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	462a      	mov	r2, r5
 800950c:	4b0f      	ldr	r3, [pc, #60]	; (800954c <_svfiprintf_r+0x1f8>)
 800950e:	a904      	add	r1, sp, #16
 8009510:	4638      	mov	r0, r7
 8009512:	f7fc fa49 	bl	80059a8 <_printf_float>
 8009516:	1c42      	adds	r2, r0, #1
 8009518:	4606      	mov	r6, r0
 800951a:	d1d6      	bne.n	80094ca <_svfiprintf_r+0x176>
 800951c:	89ab      	ldrh	r3, [r5, #12]
 800951e:	065b      	lsls	r3, r3, #25
 8009520:	f53f af2c 	bmi.w	800937c <_svfiprintf_r+0x28>
 8009524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009526:	b01d      	add	sp, #116	; 0x74
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	ab03      	add	r3, sp, #12
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	462a      	mov	r2, r5
 8009532:	4b06      	ldr	r3, [pc, #24]	; (800954c <_svfiprintf_r+0x1f8>)
 8009534:	a904      	add	r1, sp, #16
 8009536:	4638      	mov	r0, r7
 8009538:	f7fc fcda 	bl	8005ef0 <_printf_i>
 800953c:	e7eb      	b.n	8009516 <_svfiprintf_r+0x1c2>
 800953e:	bf00      	nop
 8009540:	0800a594 	.word	0x0800a594
 8009544:	0800a59e 	.word	0x0800a59e
 8009548:	080059a9 	.word	0x080059a9
 800954c:	0800929d 	.word	0x0800929d
 8009550:	0800a59a 	.word	0x0800a59a
 8009554:	00000000 	.word	0x00000000

08009558 <nan>:
 8009558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009560 <nan+0x8>
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	00000000 	.word	0x00000000
 8009564:	7ff80000 	.word	0x7ff80000

08009568 <_sbrk_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d06      	ldr	r5, [pc, #24]	; (8009584 <_sbrk_r+0x1c>)
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	f7f8 ffc2 	bl	80024fc <_sbrk>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_sbrk_r+0x1a>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_sbrk_r+0x1a>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	2000051c 	.word	0x2000051c

08009588 <strncmp>:
 8009588:	b510      	push	{r4, lr}
 800958a:	b17a      	cbz	r2, 80095ac <strncmp+0x24>
 800958c:	4603      	mov	r3, r0
 800958e:	3901      	subs	r1, #1
 8009590:	1884      	adds	r4, r0, r2
 8009592:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009596:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800959a:	4290      	cmp	r0, r2
 800959c:	d101      	bne.n	80095a2 <strncmp+0x1a>
 800959e:	42a3      	cmp	r3, r4
 80095a0:	d101      	bne.n	80095a6 <strncmp+0x1e>
 80095a2:	1a80      	subs	r0, r0, r2
 80095a4:	bd10      	pop	{r4, pc}
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d1f3      	bne.n	8009592 <strncmp+0xa>
 80095aa:	e7fa      	b.n	80095a2 <strncmp+0x1a>
 80095ac:	4610      	mov	r0, r2
 80095ae:	e7f9      	b.n	80095a4 <strncmp+0x1c>

080095b0 <__ascii_wctomb>:
 80095b0:	b149      	cbz	r1, 80095c6 <__ascii_wctomb+0x16>
 80095b2:	2aff      	cmp	r2, #255	; 0xff
 80095b4:	bf85      	ittet	hi
 80095b6:	238a      	movhi	r3, #138	; 0x8a
 80095b8:	6003      	strhi	r3, [r0, #0]
 80095ba:	700a      	strbls	r2, [r1, #0]
 80095bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80095c0:	bf98      	it	ls
 80095c2:	2001      	movls	r0, #1
 80095c4:	4770      	bx	lr
 80095c6:	4608      	mov	r0, r1
 80095c8:	4770      	bx	lr
	...

080095cc <__assert_func>:
 80095cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ce:	4614      	mov	r4, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <__assert_func+0x2c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4605      	mov	r5, r0
 80095d8:	68d8      	ldr	r0, [r3, #12]
 80095da:	b14c      	cbz	r4, 80095f0 <__assert_func+0x24>
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <__assert_func+0x30>)
 80095de:	9100      	str	r1, [sp, #0]
 80095e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <__assert_func+0x34>)
 80095e6:	462b      	mov	r3, r5
 80095e8:	f000 f80e 	bl	8009608 <fiprintf>
 80095ec:	f000 fa8c 	bl	8009b08 <abort>
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <__assert_func+0x38>)
 80095f2:	461c      	mov	r4, r3
 80095f4:	e7f3      	b.n	80095de <__assert_func+0x12>
 80095f6:	bf00      	nop
 80095f8:	20000050 	.word	0x20000050
 80095fc:	0800a5a5 	.word	0x0800a5a5
 8009600:	0800a5b2 	.word	0x0800a5b2
 8009604:	0800a5e0 	.word	0x0800a5e0

08009608 <fiprintf>:
 8009608:	b40e      	push	{r1, r2, r3}
 800960a:	b503      	push	{r0, r1, lr}
 800960c:	4601      	mov	r1, r0
 800960e:	ab03      	add	r3, sp, #12
 8009610:	4805      	ldr	r0, [pc, #20]	; (8009628 <fiprintf+0x20>)
 8009612:	f853 2b04 	ldr.w	r2, [r3], #4
 8009616:	6800      	ldr	r0, [r0, #0]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	f000 f885 	bl	8009728 <_vfiprintf_r>
 800961e:	b002      	add	sp, #8
 8009620:	f85d eb04 	ldr.w	lr, [sp], #4
 8009624:	b003      	add	sp, #12
 8009626:	4770      	bx	lr
 8009628:	20000050 	.word	0x20000050

0800962c <memmove>:
 800962c:	4288      	cmp	r0, r1
 800962e:	b510      	push	{r4, lr}
 8009630:	eb01 0402 	add.w	r4, r1, r2
 8009634:	d902      	bls.n	800963c <memmove+0x10>
 8009636:	4284      	cmp	r4, r0
 8009638:	4623      	mov	r3, r4
 800963a:	d807      	bhi.n	800964c <memmove+0x20>
 800963c:	1e43      	subs	r3, r0, #1
 800963e:	42a1      	cmp	r1, r4
 8009640:	d008      	beq.n	8009654 <memmove+0x28>
 8009642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800964a:	e7f8      	b.n	800963e <memmove+0x12>
 800964c:	4402      	add	r2, r0
 800964e:	4601      	mov	r1, r0
 8009650:	428a      	cmp	r2, r1
 8009652:	d100      	bne.n	8009656 <memmove+0x2a>
 8009654:	bd10      	pop	{r4, pc}
 8009656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800965a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800965e:	e7f7      	b.n	8009650 <memmove+0x24>

08009660 <__malloc_lock>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__malloc_lock+0x8>)
 8009662:	f000 bc11 	b.w	8009e88 <__retarget_lock_acquire_recursive>
 8009666:	bf00      	nop
 8009668:	20000520 	.word	0x20000520

0800966c <__malloc_unlock>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__malloc_unlock+0x8>)
 800966e:	f000 bc0c 	b.w	8009e8a <__retarget_lock_release_recursive>
 8009672:	bf00      	nop
 8009674:	20000520 	.word	0x20000520

08009678 <_realloc_r>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	4680      	mov	r8, r0
 800967e:	4614      	mov	r4, r2
 8009680:	460e      	mov	r6, r1
 8009682:	b921      	cbnz	r1, 800968e <_realloc_r+0x16>
 8009684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	4611      	mov	r1, r2
 800968a:	f7ff bd93 	b.w	80091b4 <_malloc_r>
 800968e:	b92a      	cbnz	r2, 800969c <_realloc_r+0x24>
 8009690:	f7ff fd24 	bl	80090dc <_free_r>
 8009694:	4625      	mov	r5, r4
 8009696:	4628      	mov	r0, r5
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	f000 fc5c 	bl	8009f58 <_malloc_usable_size_r>
 80096a0:	4284      	cmp	r4, r0
 80096a2:	4607      	mov	r7, r0
 80096a4:	d802      	bhi.n	80096ac <_realloc_r+0x34>
 80096a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096aa:	d812      	bhi.n	80096d2 <_realloc_r+0x5a>
 80096ac:	4621      	mov	r1, r4
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7ff fd80 	bl	80091b4 <_malloc_r>
 80096b4:	4605      	mov	r5, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0ed      	beq.n	8009696 <_realloc_r+0x1e>
 80096ba:	42bc      	cmp	r4, r7
 80096bc:	4622      	mov	r2, r4
 80096be:	4631      	mov	r1, r6
 80096c0:	bf28      	it	cs
 80096c2:	463a      	movcs	r2, r7
 80096c4:	f7ff f824 	bl	8008710 <memcpy>
 80096c8:	4631      	mov	r1, r6
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7ff fd06 	bl	80090dc <_free_r>
 80096d0:	e7e1      	b.n	8009696 <_realloc_r+0x1e>
 80096d2:	4635      	mov	r5, r6
 80096d4:	e7df      	b.n	8009696 <_realloc_r+0x1e>

080096d6 <__sfputc_r>:
 80096d6:	6893      	ldr	r3, [r2, #8]
 80096d8:	3b01      	subs	r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	b410      	push	{r4}
 80096de:	6093      	str	r3, [r2, #8]
 80096e0:	da08      	bge.n	80096f4 <__sfputc_r+0x1e>
 80096e2:	6994      	ldr	r4, [r2, #24]
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	db01      	blt.n	80096ec <__sfputc_r+0x16>
 80096e8:	290a      	cmp	r1, #10
 80096ea:	d103      	bne.n	80096f4 <__sfputc_r+0x1e>
 80096ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f0:	f000 b94a 	b.w	8009988 <__swbuf_r>
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	1c58      	adds	r0, r3, #1
 80096f8:	6010      	str	r0, [r2, #0]
 80096fa:	7019      	strb	r1, [r3, #0]
 80096fc:	4608      	mov	r0, r1
 80096fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009702:	4770      	bx	lr

08009704 <__sfputs_r>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	4606      	mov	r6, r0
 8009708:	460f      	mov	r7, r1
 800970a:	4614      	mov	r4, r2
 800970c:	18d5      	adds	r5, r2, r3
 800970e:	42ac      	cmp	r4, r5
 8009710:	d101      	bne.n	8009716 <__sfputs_r+0x12>
 8009712:	2000      	movs	r0, #0
 8009714:	e007      	b.n	8009726 <__sfputs_r+0x22>
 8009716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971a:	463a      	mov	r2, r7
 800971c:	4630      	mov	r0, r6
 800971e:	f7ff ffda 	bl	80096d6 <__sfputc_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	d1f3      	bne.n	800970e <__sfputs_r+0xa>
 8009726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009728 <_vfiprintf_r>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	460d      	mov	r5, r1
 800972e:	b09d      	sub	sp, #116	; 0x74
 8009730:	4614      	mov	r4, r2
 8009732:	4698      	mov	r8, r3
 8009734:	4606      	mov	r6, r0
 8009736:	b118      	cbz	r0, 8009740 <_vfiprintf_r+0x18>
 8009738:	6983      	ldr	r3, [r0, #24]
 800973a:	b90b      	cbnz	r3, 8009740 <_vfiprintf_r+0x18>
 800973c:	f000 fb06 	bl	8009d4c <__sinit>
 8009740:	4b89      	ldr	r3, [pc, #548]	; (8009968 <_vfiprintf_r+0x240>)
 8009742:	429d      	cmp	r5, r3
 8009744:	d11b      	bne.n	800977e <_vfiprintf_r+0x56>
 8009746:	6875      	ldr	r5, [r6, #4]
 8009748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800974a:	07d9      	lsls	r1, r3, #31
 800974c:	d405      	bmi.n	800975a <_vfiprintf_r+0x32>
 800974e:	89ab      	ldrh	r3, [r5, #12]
 8009750:	059a      	lsls	r2, r3, #22
 8009752:	d402      	bmi.n	800975a <_vfiprintf_r+0x32>
 8009754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009756:	f000 fb97 	bl	8009e88 <__retarget_lock_acquire_recursive>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	071b      	lsls	r3, r3, #28
 800975e:	d501      	bpl.n	8009764 <_vfiprintf_r+0x3c>
 8009760:	692b      	ldr	r3, [r5, #16]
 8009762:	b9eb      	cbnz	r3, 80097a0 <_vfiprintf_r+0x78>
 8009764:	4629      	mov	r1, r5
 8009766:	4630      	mov	r0, r6
 8009768:	f000 f960 	bl	8009a2c <__swsetup_r>
 800976c:	b1c0      	cbz	r0, 80097a0 <_vfiprintf_r+0x78>
 800976e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009770:	07dc      	lsls	r4, r3, #31
 8009772:	d50e      	bpl.n	8009792 <_vfiprintf_r+0x6a>
 8009774:	f04f 30ff 	mov.w	r0, #4294967295
 8009778:	b01d      	add	sp, #116	; 0x74
 800977a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977e:	4b7b      	ldr	r3, [pc, #492]	; (800996c <_vfiprintf_r+0x244>)
 8009780:	429d      	cmp	r5, r3
 8009782:	d101      	bne.n	8009788 <_vfiprintf_r+0x60>
 8009784:	68b5      	ldr	r5, [r6, #8]
 8009786:	e7df      	b.n	8009748 <_vfiprintf_r+0x20>
 8009788:	4b79      	ldr	r3, [pc, #484]	; (8009970 <_vfiprintf_r+0x248>)
 800978a:	429d      	cmp	r5, r3
 800978c:	bf08      	it	eq
 800978e:	68f5      	ldreq	r5, [r6, #12]
 8009790:	e7da      	b.n	8009748 <_vfiprintf_r+0x20>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	0598      	lsls	r0, r3, #22
 8009796:	d4ed      	bmi.n	8009774 <_vfiprintf_r+0x4c>
 8009798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800979a:	f000 fb76 	bl	8009e8a <__retarget_lock_release_recursive>
 800979e:	e7e9      	b.n	8009774 <_vfiprintf_r+0x4c>
 80097a0:	2300      	movs	r3, #0
 80097a2:	9309      	str	r3, [sp, #36]	; 0x24
 80097a4:	2320      	movs	r3, #32
 80097a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ae:	2330      	movs	r3, #48	; 0x30
 80097b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009974 <_vfiprintf_r+0x24c>
 80097b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b8:	f04f 0901 	mov.w	r9, #1
 80097bc:	4623      	mov	r3, r4
 80097be:	469a      	mov	sl, r3
 80097c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c4:	b10a      	cbz	r2, 80097ca <_vfiprintf_r+0xa2>
 80097c6:	2a25      	cmp	r2, #37	; 0x25
 80097c8:	d1f9      	bne.n	80097be <_vfiprintf_r+0x96>
 80097ca:	ebba 0b04 	subs.w	fp, sl, r4
 80097ce:	d00b      	beq.n	80097e8 <_vfiprintf_r+0xc0>
 80097d0:	465b      	mov	r3, fp
 80097d2:	4622      	mov	r2, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ff94 	bl	8009704 <__sfputs_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	f000 80aa 	beq.w	8009936 <_vfiprintf_r+0x20e>
 80097e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e4:	445a      	add	r2, fp
 80097e6:	9209      	str	r2, [sp, #36]	; 0x24
 80097e8:	f89a 3000 	ldrb.w	r3, [sl]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80a2 	beq.w	8009936 <_vfiprintf_r+0x20e>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295
 80097f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fc:	f10a 0a01 	add.w	sl, sl, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009808:	931a      	str	r3, [sp, #104]	; 0x68
 800980a:	4654      	mov	r4, sl
 800980c:	2205      	movs	r2, #5
 800980e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009812:	4858      	ldr	r0, [pc, #352]	; (8009974 <_vfiprintf_r+0x24c>)
 8009814:	f7f6 fce4 	bl	80001e0 <memchr>
 8009818:	9a04      	ldr	r2, [sp, #16]
 800981a:	b9d8      	cbnz	r0, 8009854 <_vfiprintf_r+0x12c>
 800981c:	06d1      	lsls	r1, r2, #27
 800981e:	bf44      	itt	mi
 8009820:	2320      	movmi	r3, #32
 8009822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009826:	0713      	lsls	r3, r2, #28
 8009828:	bf44      	itt	mi
 800982a:	232b      	movmi	r3, #43	; 0x2b
 800982c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009830:	f89a 3000 	ldrb.w	r3, [sl]
 8009834:	2b2a      	cmp	r3, #42	; 0x2a
 8009836:	d015      	beq.n	8009864 <_vfiprintf_r+0x13c>
 8009838:	9a07      	ldr	r2, [sp, #28]
 800983a:	4654      	mov	r4, sl
 800983c:	2000      	movs	r0, #0
 800983e:	f04f 0c0a 	mov.w	ip, #10
 8009842:	4621      	mov	r1, r4
 8009844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009848:	3b30      	subs	r3, #48	; 0x30
 800984a:	2b09      	cmp	r3, #9
 800984c:	d94e      	bls.n	80098ec <_vfiprintf_r+0x1c4>
 800984e:	b1b0      	cbz	r0, 800987e <_vfiprintf_r+0x156>
 8009850:	9207      	str	r2, [sp, #28]
 8009852:	e014      	b.n	800987e <_vfiprintf_r+0x156>
 8009854:	eba0 0308 	sub.w	r3, r0, r8
 8009858:	fa09 f303 	lsl.w	r3, r9, r3
 800985c:	4313      	orrs	r3, r2
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	46a2      	mov	sl, r4
 8009862:	e7d2      	b.n	800980a <_vfiprintf_r+0xe2>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	1d19      	adds	r1, r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	9103      	str	r1, [sp, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfbb      	ittet	lt
 8009870:	425b      	neglt	r3, r3
 8009872:	f042 0202 	orrlt.w	r2, r2, #2
 8009876:	9307      	strge	r3, [sp, #28]
 8009878:	9307      	strlt	r3, [sp, #28]
 800987a:	bfb8      	it	lt
 800987c:	9204      	strlt	r2, [sp, #16]
 800987e:	7823      	ldrb	r3, [r4, #0]
 8009880:	2b2e      	cmp	r3, #46	; 0x2e
 8009882:	d10c      	bne.n	800989e <_vfiprintf_r+0x176>
 8009884:	7863      	ldrb	r3, [r4, #1]
 8009886:	2b2a      	cmp	r3, #42	; 0x2a
 8009888:	d135      	bne.n	80098f6 <_vfiprintf_r+0x1ce>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	1d1a      	adds	r2, r3, #4
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	9203      	str	r2, [sp, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfb8      	it	lt
 8009896:	f04f 33ff 	movlt.w	r3, #4294967295
 800989a:	3402      	adds	r4, #2
 800989c:	9305      	str	r3, [sp, #20]
 800989e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009984 <_vfiprintf_r+0x25c>
 80098a2:	7821      	ldrb	r1, [r4, #0]
 80098a4:	2203      	movs	r2, #3
 80098a6:	4650      	mov	r0, sl
 80098a8:	f7f6 fc9a 	bl	80001e0 <memchr>
 80098ac:	b140      	cbz	r0, 80098c0 <_vfiprintf_r+0x198>
 80098ae:	2340      	movs	r3, #64	; 0x40
 80098b0:	eba0 000a 	sub.w	r0, r0, sl
 80098b4:	fa03 f000 	lsl.w	r0, r3, r0
 80098b8:	9b04      	ldr	r3, [sp, #16]
 80098ba:	4303      	orrs	r3, r0
 80098bc:	3401      	adds	r4, #1
 80098be:	9304      	str	r3, [sp, #16]
 80098c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c4:	482c      	ldr	r0, [pc, #176]	; (8009978 <_vfiprintf_r+0x250>)
 80098c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ca:	2206      	movs	r2, #6
 80098cc:	f7f6 fc88 	bl	80001e0 <memchr>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d03f      	beq.n	8009954 <_vfiprintf_r+0x22c>
 80098d4:	4b29      	ldr	r3, [pc, #164]	; (800997c <_vfiprintf_r+0x254>)
 80098d6:	bb1b      	cbnz	r3, 8009920 <_vfiprintf_r+0x1f8>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	3307      	adds	r3, #7
 80098dc:	f023 0307 	bic.w	r3, r3, #7
 80098e0:	3308      	adds	r3, #8
 80098e2:	9303      	str	r3, [sp, #12]
 80098e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e6:	443b      	add	r3, r7
 80098e8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ea:	e767      	b.n	80097bc <_vfiprintf_r+0x94>
 80098ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f0:	460c      	mov	r4, r1
 80098f2:	2001      	movs	r0, #1
 80098f4:	e7a5      	b.n	8009842 <_vfiprintf_r+0x11a>
 80098f6:	2300      	movs	r3, #0
 80098f8:	3401      	adds	r4, #1
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	4619      	mov	r1, r3
 80098fe:	f04f 0c0a 	mov.w	ip, #10
 8009902:	4620      	mov	r0, r4
 8009904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009908:	3a30      	subs	r2, #48	; 0x30
 800990a:	2a09      	cmp	r2, #9
 800990c:	d903      	bls.n	8009916 <_vfiprintf_r+0x1ee>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0c5      	beq.n	800989e <_vfiprintf_r+0x176>
 8009912:	9105      	str	r1, [sp, #20]
 8009914:	e7c3      	b.n	800989e <_vfiprintf_r+0x176>
 8009916:	fb0c 2101 	mla	r1, ip, r1, r2
 800991a:	4604      	mov	r4, r0
 800991c:	2301      	movs	r3, #1
 800991e:	e7f0      	b.n	8009902 <_vfiprintf_r+0x1da>
 8009920:	ab03      	add	r3, sp, #12
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	462a      	mov	r2, r5
 8009926:	4b16      	ldr	r3, [pc, #88]	; (8009980 <_vfiprintf_r+0x258>)
 8009928:	a904      	add	r1, sp, #16
 800992a:	4630      	mov	r0, r6
 800992c:	f7fc f83c 	bl	80059a8 <_printf_float>
 8009930:	4607      	mov	r7, r0
 8009932:	1c78      	adds	r0, r7, #1
 8009934:	d1d6      	bne.n	80098e4 <_vfiprintf_r+0x1bc>
 8009936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009938:	07d9      	lsls	r1, r3, #31
 800993a:	d405      	bmi.n	8009948 <_vfiprintf_r+0x220>
 800993c:	89ab      	ldrh	r3, [r5, #12]
 800993e:	059a      	lsls	r2, r3, #22
 8009940:	d402      	bmi.n	8009948 <_vfiprintf_r+0x220>
 8009942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009944:	f000 faa1 	bl	8009e8a <__retarget_lock_release_recursive>
 8009948:	89ab      	ldrh	r3, [r5, #12]
 800994a:	065b      	lsls	r3, r3, #25
 800994c:	f53f af12 	bmi.w	8009774 <_vfiprintf_r+0x4c>
 8009950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009952:	e711      	b.n	8009778 <_vfiprintf_r+0x50>
 8009954:	ab03      	add	r3, sp, #12
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	462a      	mov	r2, r5
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <_vfiprintf_r+0x258>)
 800995c:	a904      	add	r1, sp, #16
 800995e:	4630      	mov	r0, r6
 8009960:	f7fc fac6 	bl	8005ef0 <_printf_i>
 8009964:	e7e4      	b.n	8009930 <_vfiprintf_r+0x208>
 8009966:	bf00      	nop
 8009968:	0800a604 	.word	0x0800a604
 800996c:	0800a624 	.word	0x0800a624
 8009970:	0800a5e4 	.word	0x0800a5e4
 8009974:	0800a594 	.word	0x0800a594
 8009978:	0800a59e 	.word	0x0800a59e
 800997c:	080059a9 	.word	0x080059a9
 8009980:	08009705 	.word	0x08009705
 8009984:	0800a59a 	.word	0x0800a59a

08009988 <__swbuf_r>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	460e      	mov	r6, r1
 800998c:	4614      	mov	r4, r2
 800998e:	4605      	mov	r5, r0
 8009990:	b118      	cbz	r0, 800999a <__swbuf_r+0x12>
 8009992:	6983      	ldr	r3, [r0, #24]
 8009994:	b90b      	cbnz	r3, 800999a <__swbuf_r+0x12>
 8009996:	f000 f9d9 	bl	8009d4c <__sinit>
 800999a:	4b21      	ldr	r3, [pc, #132]	; (8009a20 <__swbuf_r+0x98>)
 800999c:	429c      	cmp	r4, r3
 800999e:	d12b      	bne.n	80099f8 <__swbuf_r+0x70>
 80099a0:	686c      	ldr	r4, [r5, #4]
 80099a2:	69a3      	ldr	r3, [r4, #24]
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	071a      	lsls	r2, r3, #28
 80099aa:	d52f      	bpl.n	8009a0c <__swbuf_r+0x84>
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	b36b      	cbz	r3, 8009a0c <__swbuf_r+0x84>
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	1ac0      	subs	r0, r0, r3
 80099b6:	6963      	ldr	r3, [r4, #20]
 80099b8:	b2f6      	uxtb	r6, r6
 80099ba:	4283      	cmp	r3, r0
 80099bc:	4637      	mov	r7, r6
 80099be:	dc04      	bgt.n	80099ca <__swbuf_r+0x42>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f92e 	bl	8009c24 <_fflush_r>
 80099c8:	bb30      	cbnz	r0, 8009a18 <__swbuf_r+0x90>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	60a3      	str	r3, [r4, #8]
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	701e      	strb	r6, [r3, #0]
 80099d8:	6963      	ldr	r3, [r4, #20]
 80099da:	3001      	adds	r0, #1
 80099dc:	4283      	cmp	r3, r0
 80099de:	d004      	beq.n	80099ea <__swbuf_r+0x62>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	07db      	lsls	r3, r3, #31
 80099e4:	d506      	bpl.n	80099f4 <__swbuf_r+0x6c>
 80099e6:	2e0a      	cmp	r6, #10
 80099e8:	d104      	bne.n	80099f4 <__swbuf_r+0x6c>
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 f919 	bl	8009c24 <_fflush_r>
 80099f2:	b988      	cbnz	r0, 8009a18 <__swbuf_r+0x90>
 80099f4:	4638      	mov	r0, r7
 80099f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f8:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <__swbuf_r+0x9c>)
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d101      	bne.n	8009a02 <__swbuf_r+0x7a>
 80099fe:	68ac      	ldr	r4, [r5, #8]
 8009a00:	e7cf      	b.n	80099a2 <__swbuf_r+0x1a>
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <__swbuf_r+0xa0>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	bf08      	it	eq
 8009a08:	68ec      	ldreq	r4, [r5, #12]
 8009a0a:	e7ca      	b.n	80099a2 <__swbuf_r+0x1a>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 f80c 	bl	8009a2c <__swsetup_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0cb      	beq.n	80099b0 <__swbuf_r+0x28>
 8009a18:	f04f 37ff 	mov.w	r7, #4294967295
 8009a1c:	e7ea      	b.n	80099f4 <__swbuf_r+0x6c>
 8009a1e:	bf00      	nop
 8009a20:	0800a604 	.word	0x0800a604
 8009a24:	0800a624 	.word	0x0800a624
 8009a28:	0800a5e4 	.word	0x0800a5e4

08009a2c <__swsetup_r>:
 8009a2c:	4b32      	ldr	r3, [pc, #200]	; (8009af8 <__swsetup_r+0xcc>)
 8009a2e:	b570      	push	{r4, r5, r6, lr}
 8009a30:	681d      	ldr	r5, [r3, #0]
 8009a32:	4606      	mov	r6, r0
 8009a34:	460c      	mov	r4, r1
 8009a36:	b125      	cbz	r5, 8009a42 <__swsetup_r+0x16>
 8009a38:	69ab      	ldr	r3, [r5, #24]
 8009a3a:	b913      	cbnz	r3, 8009a42 <__swsetup_r+0x16>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 f985 	bl	8009d4c <__sinit>
 8009a42:	4b2e      	ldr	r3, [pc, #184]	; (8009afc <__swsetup_r+0xd0>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	d10f      	bne.n	8009a68 <__swsetup_r+0x3c>
 8009a48:	686c      	ldr	r4, [r5, #4]
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a50:	0719      	lsls	r1, r3, #28
 8009a52:	d42c      	bmi.n	8009aae <__swsetup_r+0x82>
 8009a54:	06dd      	lsls	r5, r3, #27
 8009a56:	d411      	bmi.n	8009a7c <__swsetup_r+0x50>
 8009a58:	2309      	movs	r3, #9
 8009a5a:	6033      	str	r3, [r6, #0]
 8009a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295
 8009a66:	e03e      	b.n	8009ae6 <__swsetup_r+0xba>
 8009a68:	4b25      	ldr	r3, [pc, #148]	; (8009b00 <__swsetup_r+0xd4>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d101      	bne.n	8009a72 <__swsetup_r+0x46>
 8009a6e:	68ac      	ldr	r4, [r5, #8]
 8009a70:	e7eb      	b.n	8009a4a <__swsetup_r+0x1e>
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <__swsetup_r+0xd8>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	bf08      	it	eq
 8009a78:	68ec      	ldreq	r4, [r5, #12]
 8009a7a:	e7e6      	b.n	8009a4a <__swsetup_r+0x1e>
 8009a7c:	0758      	lsls	r0, r3, #29
 8009a7e:	d512      	bpl.n	8009aa6 <__swsetup_r+0x7a>
 8009a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a82:	b141      	cbz	r1, 8009a96 <__swsetup_r+0x6a>
 8009a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d002      	beq.n	8009a92 <__swsetup_r+0x66>
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff fb25 	bl	80090dc <_free_r>
 8009a92:	2300      	movs	r3, #0
 8009a94:	6363      	str	r3, [r4, #52]	; 0x34
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	6063      	str	r3, [r4, #4]
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f043 0308 	orr.w	r3, r3, #8
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	b94b      	cbnz	r3, 8009ac6 <__swsetup_r+0x9a>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009abc:	d003      	beq.n	8009ac6 <__swsetup_r+0x9a>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 fa09 	bl	8009ed8 <__smakebuf_r>
 8009ac6:	89a0      	ldrh	r0, [r4, #12]
 8009ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009acc:	f010 0301 	ands.w	r3, r0, #1
 8009ad0:	d00a      	beq.n	8009ae8 <__swsetup_r+0xbc>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	6963      	ldr	r3, [r4, #20]
 8009ad8:	425b      	negs	r3, r3
 8009ada:	61a3      	str	r3, [r4, #24]
 8009adc:	6923      	ldr	r3, [r4, #16]
 8009ade:	b943      	cbnz	r3, 8009af2 <__swsetup_r+0xc6>
 8009ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ae4:	d1ba      	bne.n	8009a5c <__swsetup_r+0x30>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	0781      	lsls	r1, r0, #30
 8009aea:	bf58      	it	pl
 8009aec:	6963      	ldrpl	r3, [r4, #20]
 8009aee:	60a3      	str	r3, [r4, #8]
 8009af0:	e7f4      	b.n	8009adc <__swsetup_r+0xb0>
 8009af2:	2000      	movs	r0, #0
 8009af4:	e7f7      	b.n	8009ae6 <__swsetup_r+0xba>
 8009af6:	bf00      	nop
 8009af8:	20000050 	.word	0x20000050
 8009afc:	0800a604 	.word	0x0800a604
 8009b00:	0800a624 	.word	0x0800a624
 8009b04:	0800a5e4 	.word	0x0800a5e4

08009b08 <abort>:
 8009b08:	b508      	push	{r3, lr}
 8009b0a:	2006      	movs	r0, #6
 8009b0c:	f000 fa54 	bl	8009fb8 <raise>
 8009b10:	2001      	movs	r0, #1
 8009b12:	f7f8 fc7b 	bl	800240c <_exit>
	...

08009b18 <__sflush_r>:
 8009b18:	898a      	ldrh	r2, [r1, #12]
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	4605      	mov	r5, r0
 8009b20:	0710      	lsls	r0, r2, #28
 8009b22:	460c      	mov	r4, r1
 8009b24:	d458      	bmi.n	8009bd8 <__sflush_r+0xc0>
 8009b26:	684b      	ldr	r3, [r1, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dc05      	bgt.n	8009b38 <__sflush_r+0x20>
 8009b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dc02      	bgt.n	8009b38 <__sflush_r+0x20>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	d0f9      	beq.n	8009b32 <__sflush_r+0x1a>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b44:	682f      	ldr	r7, [r5, #0]
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	d032      	beq.n	8009bb0 <__sflush_r+0x98>
 8009b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	075a      	lsls	r2, r3, #29
 8009b50:	d505      	bpl.n	8009b5e <__sflush_r+0x46>
 8009b52:	6863      	ldr	r3, [r4, #4]
 8009b54:	1ac0      	subs	r0, r0, r3
 8009b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b58:	b10b      	cbz	r3, 8009b5e <__sflush_r+0x46>
 8009b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b5c:	1ac0      	subs	r0, r0, r3
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4602      	mov	r2, r0
 8009b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b64:	6a21      	ldr	r1, [r4, #32]
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b0      	blx	r6
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	d106      	bne.n	8009b7e <__sflush_r+0x66>
 8009b70:	6829      	ldr	r1, [r5, #0]
 8009b72:	291d      	cmp	r1, #29
 8009b74:	d82c      	bhi.n	8009bd0 <__sflush_r+0xb8>
 8009b76:	4a2a      	ldr	r2, [pc, #168]	; (8009c20 <__sflush_r+0x108>)
 8009b78:	40ca      	lsrs	r2, r1
 8009b7a:	07d6      	lsls	r6, r2, #31
 8009b7c:	d528      	bpl.n	8009bd0 <__sflush_r+0xb8>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	6062      	str	r2, [r4, #4]
 8009b82:	04d9      	lsls	r1, r3, #19
 8009b84:	6922      	ldr	r2, [r4, #16]
 8009b86:	6022      	str	r2, [r4, #0]
 8009b88:	d504      	bpl.n	8009b94 <__sflush_r+0x7c>
 8009b8a:	1c42      	adds	r2, r0, #1
 8009b8c:	d101      	bne.n	8009b92 <__sflush_r+0x7a>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b903      	cbnz	r3, 8009b94 <__sflush_r+0x7c>
 8009b92:	6560      	str	r0, [r4, #84]	; 0x54
 8009b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b96:	602f      	str	r7, [r5, #0]
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	d0ca      	beq.n	8009b32 <__sflush_r+0x1a>
 8009b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	d002      	beq.n	8009baa <__sflush_r+0x92>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7ff fa99 	bl	80090dc <_free_r>
 8009baa:	2000      	movs	r0, #0
 8009bac:	6360      	str	r0, [r4, #52]	; 0x34
 8009bae:	e7c1      	b.n	8009b34 <__sflush_r+0x1c>
 8009bb0:	6a21      	ldr	r1, [r4, #32]
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b0      	blx	r6
 8009bb8:	1c41      	adds	r1, r0, #1
 8009bba:	d1c7      	bne.n	8009b4c <__sflush_r+0x34>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0c4      	beq.n	8009b4c <__sflush_r+0x34>
 8009bc2:	2b1d      	cmp	r3, #29
 8009bc4:	d001      	beq.n	8009bca <__sflush_r+0xb2>
 8009bc6:	2b16      	cmp	r3, #22
 8009bc8:	d101      	bne.n	8009bce <__sflush_r+0xb6>
 8009bca:	602f      	str	r7, [r5, #0]
 8009bcc:	e7b1      	b.n	8009b32 <__sflush_r+0x1a>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	e7ad      	b.n	8009b34 <__sflush_r+0x1c>
 8009bd8:	690f      	ldr	r7, [r1, #16]
 8009bda:	2f00      	cmp	r7, #0
 8009bdc:	d0a9      	beq.n	8009b32 <__sflush_r+0x1a>
 8009bde:	0793      	lsls	r3, r2, #30
 8009be0:	680e      	ldr	r6, [r1, #0]
 8009be2:	bf08      	it	eq
 8009be4:	694b      	ldreq	r3, [r1, #20]
 8009be6:	600f      	str	r7, [r1, #0]
 8009be8:	bf18      	it	ne
 8009bea:	2300      	movne	r3, #0
 8009bec:	eba6 0807 	sub.w	r8, r6, r7
 8009bf0:	608b      	str	r3, [r1, #8]
 8009bf2:	f1b8 0f00 	cmp.w	r8, #0
 8009bf6:	dd9c      	ble.n	8009b32 <__sflush_r+0x1a>
 8009bf8:	6a21      	ldr	r1, [r4, #32]
 8009bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bfc:	4643      	mov	r3, r8
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b0      	blx	r6
 8009c04:	2800      	cmp	r0, #0
 8009c06:	dc06      	bgt.n	8009c16 <__sflush_r+0xfe>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e78e      	b.n	8009b34 <__sflush_r+0x1c>
 8009c16:	4407      	add	r7, r0
 8009c18:	eba8 0800 	sub.w	r8, r8, r0
 8009c1c:	e7e9      	b.n	8009bf2 <__sflush_r+0xda>
 8009c1e:	bf00      	nop
 8009c20:	20400001 	.word	0x20400001

08009c24 <_fflush_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	690b      	ldr	r3, [r1, #16]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b913      	cbnz	r3, 8009c34 <_fflush_r+0x10>
 8009c2e:	2500      	movs	r5, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	b118      	cbz	r0, 8009c3e <_fflush_r+0x1a>
 8009c36:	6983      	ldr	r3, [r0, #24]
 8009c38:	b90b      	cbnz	r3, 8009c3e <_fflush_r+0x1a>
 8009c3a:	f000 f887 	bl	8009d4c <__sinit>
 8009c3e:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <_fflush_r+0x6c>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d11b      	bne.n	8009c7c <_fflush_r+0x58>
 8009c44:	686c      	ldr	r4, [r5, #4]
 8009c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0ef      	beq.n	8009c2e <_fflush_r+0xa>
 8009c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c50:	07d0      	lsls	r0, r2, #31
 8009c52:	d404      	bmi.n	8009c5e <_fflush_r+0x3a>
 8009c54:	0599      	lsls	r1, r3, #22
 8009c56:	d402      	bmi.n	8009c5e <_fflush_r+0x3a>
 8009c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c5a:	f000 f915 	bl	8009e88 <__retarget_lock_acquire_recursive>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	4621      	mov	r1, r4
 8009c62:	f7ff ff59 	bl	8009b18 <__sflush_r>
 8009c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c68:	07da      	lsls	r2, r3, #31
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	d4e0      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	059b      	lsls	r3, r3, #22
 8009c72:	d4dd      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c76:	f000 f908 	bl	8009e8a <__retarget_lock_release_recursive>
 8009c7a:	e7d9      	b.n	8009c30 <_fflush_r+0xc>
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <_fflush_r+0x70>)
 8009c7e:	429c      	cmp	r4, r3
 8009c80:	d101      	bne.n	8009c86 <_fflush_r+0x62>
 8009c82:	68ac      	ldr	r4, [r5, #8]
 8009c84:	e7df      	b.n	8009c46 <_fflush_r+0x22>
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <_fflush_r+0x74>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	bf08      	it	eq
 8009c8c:	68ec      	ldreq	r4, [r5, #12]
 8009c8e:	e7da      	b.n	8009c46 <_fflush_r+0x22>
 8009c90:	0800a604 	.word	0x0800a604
 8009c94:	0800a624 	.word	0x0800a624
 8009c98:	0800a5e4 	.word	0x0800a5e4

08009c9c <std>:
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009caa:	6083      	str	r3, [r0, #8]
 8009cac:	8181      	strh	r1, [r0, #12]
 8009cae:	6643      	str	r3, [r0, #100]	; 0x64
 8009cb0:	81c2      	strh	r2, [r0, #14]
 8009cb2:	6183      	str	r3, [r0, #24]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	2208      	movs	r2, #8
 8009cb8:	305c      	adds	r0, #92	; 0x5c
 8009cba:	f7fb fdcd 	bl	8005858 <memset>
 8009cbe:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <std+0x38>)
 8009cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8009cc2:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <std+0x3c>)
 8009cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cc6:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <std+0x40>)
 8009cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cca:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <std+0x44>)
 8009ccc:	6224      	str	r4, [r4, #32]
 8009cce:	6323      	str	r3, [r4, #48]	; 0x30
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	bf00      	nop
 8009cd4:	08009ff1 	.word	0x08009ff1
 8009cd8:	0800a013 	.word	0x0800a013
 8009cdc:	0800a04b 	.word	0x0800a04b
 8009ce0:	0800a06f 	.word	0x0800a06f

08009ce4 <_cleanup_r>:
 8009ce4:	4901      	ldr	r1, [pc, #4]	; (8009cec <_cleanup_r+0x8>)
 8009ce6:	f000 b8af 	b.w	8009e48 <_fwalk_reent>
 8009cea:	bf00      	nop
 8009cec:	08009c25 	.word	0x08009c25

08009cf0 <__sfmoreglue>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	2268      	movs	r2, #104	; 0x68
 8009cf4:	1e4d      	subs	r5, r1, #1
 8009cf6:	4355      	muls	r5, r2
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cfe:	f7ff fa59 	bl	80091b4 <_malloc_r>
 8009d02:	4604      	mov	r4, r0
 8009d04:	b140      	cbz	r0, 8009d18 <__sfmoreglue+0x28>
 8009d06:	2100      	movs	r1, #0
 8009d08:	e9c0 1600 	strd	r1, r6, [r0]
 8009d0c:	300c      	adds	r0, #12
 8009d0e:	60a0      	str	r0, [r4, #8]
 8009d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d14:	f7fb fda0 	bl	8005858 <memset>
 8009d18:	4620      	mov	r0, r4
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}

08009d1c <__sfp_lock_acquire>:
 8009d1c:	4801      	ldr	r0, [pc, #4]	; (8009d24 <__sfp_lock_acquire+0x8>)
 8009d1e:	f000 b8b3 	b.w	8009e88 <__retarget_lock_acquire_recursive>
 8009d22:	bf00      	nop
 8009d24:	20000521 	.word	0x20000521

08009d28 <__sfp_lock_release>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__sfp_lock_release+0x8>)
 8009d2a:	f000 b8ae 	b.w	8009e8a <__retarget_lock_release_recursive>
 8009d2e:	bf00      	nop
 8009d30:	20000521 	.word	0x20000521

08009d34 <__sinit_lock_acquire>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__sinit_lock_acquire+0x8>)
 8009d36:	f000 b8a7 	b.w	8009e88 <__retarget_lock_acquire_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20000522 	.word	0x20000522

08009d40 <__sinit_lock_release>:
 8009d40:	4801      	ldr	r0, [pc, #4]	; (8009d48 <__sinit_lock_release+0x8>)
 8009d42:	f000 b8a2 	b.w	8009e8a <__retarget_lock_release_recursive>
 8009d46:	bf00      	nop
 8009d48:	20000522 	.word	0x20000522

08009d4c <__sinit>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	f7ff fff0 	bl	8009d34 <__sinit_lock_acquire>
 8009d54:	69a3      	ldr	r3, [r4, #24]
 8009d56:	b11b      	cbz	r3, 8009d60 <__sinit+0x14>
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f7ff bff0 	b.w	8009d40 <__sinit_lock_release>
 8009d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d64:	6523      	str	r3, [r4, #80]	; 0x50
 8009d66:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <__sinit+0x68>)
 8009d68:	4a13      	ldr	r2, [pc, #76]	; (8009db8 <__sinit+0x6c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	bf04      	itt	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	61a3      	streq	r3, [r4, #24]
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f820 	bl	8009dbc <__sfp>
 8009d7c:	6060      	str	r0, [r4, #4]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 f81c 	bl	8009dbc <__sfp>
 8009d84:	60a0      	str	r0, [r4, #8]
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 f818 	bl	8009dbc <__sfp>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	60e0      	str	r0, [r4, #12]
 8009d90:	2104      	movs	r1, #4
 8009d92:	6860      	ldr	r0, [r4, #4]
 8009d94:	f7ff ff82 	bl	8009c9c <std>
 8009d98:	68a0      	ldr	r0, [r4, #8]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	2109      	movs	r1, #9
 8009d9e:	f7ff ff7d 	bl	8009c9c <std>
 8009da2:	68e0      	ldr	r0, [r4, #12]
 8009da4:	2202      	movs	r2, #2
 8009da6:	2112      	movs	r1, #18
 8009da8:	f7ff ff78 	bl	8009c9c <std>
 8009dac:	2301      	movs	r3, #1
 8009dae:	61a3      	str	r3, [r4, #24]
 8009db0:	e7d2      	b.n	8009d58 <__sinit+0xc>
 8009db2:	bf00      	nop
 8009db4:	0800a19c 	.word	0x0800a19c
 8009db8:	08009ce5 	.word	0x08009ce5

08009dbc <__sfp>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	f7ff ffac 	bl	8009d1c <__sfp_lock_acquire>
 8009dc4:	4b1e      	ldr	r3, [pc, #120]	; (8009e40 <__sfp+0x84>)
 8009dc6:	681e      	ldr	r6, [r3, #0]
 8009dc8:	69b3      	ldr	r3, [r6, #24]
 8009dca:	b913      	cbnz	r3, 8009dd2 <__sfp+0x16>
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff ffbd 	bl	8009d4c <__sinit>
 8009dd2:	3648      	adds	r6, #72	; 0x48
 8009dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	d503      	bpl.n	8009de4 <__sfp+0x28>
 8009ddc:	6833      	ldr	r3, [r6, #0]
 8009dde:	b30b      	cbz	r3, 8009e24 <__sfp+0x68>
 8009de0:	6836      	ldr	r6, [r6, #0]
 8009de2:	e7f7      	b.n	8009dd4 <__sfp+0x18>
 8009de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009de8:	b9d5      	cbnz	r5, 8009e20 <__sfp+0x64>
 8009dea:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <__sfp+0x88>)
 8009dec:	60e3      	str	r3, [r4, #12]
 8009dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009df2:	6665      	str	r5, [r4, #100]	; 0x64
 8009df4:	f000 f847 	bl	8009e86 <__retarget_lock_init_recursive>
 8009df8:	f7ff ff96 	bl	8009d28 <__sfp_lock_release>
 8009dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e04:	6025      	str	r5, [r4, #0]
 8009e06:	61a5      	str	r5, [r4, #24]
 8009e08:	2208      	movs	r2, #8
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e10:	f7fb fd22 	bl	8005858 <memset>
 8009e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e20:	3468      	adds	r4, #104	; 0x68
 8009e22:	e7d9      	b.n	8009dd8 <__sfp+0x1c>
 8009e24:	2104      	movs	r1, #4
 8009e26:	4638      	mov	r0, r7
 8009e28:	f7ff ff62 	bl	8009cf0 <__sfmoreglue>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	6030      	str	r0, [r6, #0]
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d1d5      	bne.n	8009de0 <__sfp+0x24>
 8009e34:	f7ff ff78 	bl	8009d28 <__sfp_lock_release>
 8009e38:	230c      	movs	r3, #12
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	e7ee      	b.n	8009e1c <__sfp+0x60>
 8009e3e:	bf00      	nop
 8009e40:	0800a19c 	.word	0x0800a19c
 8009e44:	ffff0001 	.word	0xffff0001

08009e48 <_fwalk_reent>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	4688      	mov	r8, r1
 8009e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e54:	2700      	movs	r7, #0
 8009e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e5e:	d505      	bpl.n	8009e6c <_fwalk_reent+0x24>
 8009e60:	6824      	ldr	r4, [r4, #0]
 8009e62:	2c00      	cmp	r4, #0
 8009e64:	d1f7      	bne.n	8009e56 <_fwalk_reent+0xe>
 8009e66:	4638      	mov	r0, r7
 8009e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6c:	89ab      	ldrh	r3, [r5, #12]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d907      	bls.n	8009e82 <_fwalk_reent+0x3a>
 8009e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e76:	3301      	adds	r3, #1
 8009e78:	d003      	beq.n	8009e82 <_fwalk_reent+0x3a>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	47c0      	blx	r8
 8009e80:	4307      	orrs	r7, r0
 8009e82:	3568      	adds	r5, #104	; 0x68
 8009e84:	e7e9      	b.n	8009e5a <_fwalk_reent+0x12>

08009e86 <__retarget_lock_init_recursive>:
 8009e86:	4770      	bx	lr

08009e88 <__retarget_lock_acquire_recursive>:
 8009e88:	4770      	bx	lr

08009e8a <__retarget_lock_release_recursive>:
 8009e8a:	4770      	bx	lr

08009e8c <__swhatbuf_r>:
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	460e      	mov	r6, r1
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	2900      	cmp	r1, #0
 8009e96:	b096      	sub	sp, #88	; 0x58
 8009e98:	4614      	mov	r4, r2
 8009e9a:	461d      	mov	r5, r3
 8009e9c:	da08      	bge.n	8009eb0 <__swhatbuf_r+0x24>
 8009e9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	602a      	str	r2, [r5, #0]
 8009ea6:	061a      	lsls	r2, r3, #24
 8009ea8:	d410      	bmi.n	8009ecc <__swhatbuf_r+0x40>
 8009eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eae:	e00e      	b.n	8009ece <__swhatbuf_r+0x42>
 8009eb0:	466a      	mov	r2, sp
 8009eb2:	f000 f903 	bl	800a0bc <_fstat_r>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	dbf1      	blt.n	8009e9e <__swhatbuf_r+0x12>
 8009eba:	9a01      	ldr	r2, [sp, #4]
 8009ebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ec4:	425a      	negs	r2, r3
 8009ec6:	415a      	adcs	r2, r3
 8009ec8:	602a      	str	r2, [r5, #0]
 8009eca:	e7ee      	b.n	8009eaa <__swhatbuf_r+0x1e>
 8009ecc:	2340      	movs	r3, #64	; 0x40
 8009ece:	2000      	movs	r0, #0
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	b016      	add	sp, #88	; 0x58
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ed8 <__smakebuf_r>:
 8009ed8:	898b      	ldrh	r3, [r1, #12]
 8009eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009edc:	079d      	lsls	r5, r3, #30
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	d507      	bpl.n	8009ef4 <__smakebuf_r+0x1c>
 8009ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	2301      	movs	r3, #1
 8009eee:	6163      	str	r3, [r4, #20]
 8009ef0:	b002      	add	sp, #8
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	ab01      	add	r3, sp, #4
 8009ef6:	466a      	mov	r2, sp
 8009ef8:	f7ff ffc8 	bl	8009e8c <__swhatbuf_r>
 8009efc:	9900      	ldr	r1, [sp, #0]
 8009efe:	4605      	mov	r5, r0
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7ff f957 	bl	80091b4 <_malloc_r>
 8009f06:	b948      	cbnz	r0, 8009f1c <__smakebuf_r+0x44>
 8009f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0c:	059a      	lsls	r2, r3, #22
 8009f0e:	d4ef      	bmi.n	8009ef0 <__smakebuf_r+0x18>
 8009f10:	f023 0303 	bic.w	r3, r3, #3
 8009f14:	f043 0302 	orr.w	r3, r3, #2
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	e7e3      	b.n	8009ee4 <__smakebuf_r+0xc>
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <__smakebuf_r+0x7c>)
 8009f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	6020      	str	r0, [r4, #0]
 8009f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	9b00      	ldr	r3, [sp, #0]
 8009f2c:	6163      	str	r3, [r4, #20]
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	6120      	str	r0, [r4, #16]
 8009f32:	b15b      	cbz	r3, 8009f4c <__smakebuf_r+0x74>
 8009f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 f8d1 	bl	800a0e0 <_isatty_r>
 8009f3e:	b128      	cbz	r0, 8009f4c <__smakebuf_r+0x74>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	89a0      	ldrh	r0, [r4, #12]
 8009f4e:	4305      	orrs	r5, r0
 8009f50:	81a5      	strh	r5, [r4, #12]
 8009f52:	e7cd      	b.n	8009ef0 <__smakebuf_r+0x18>
 8009f54:	08009ce5 	.word	0x08009ce5

08009f58 <_malloc_usable_size_r>:
 8009f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5c:	1f18      	subs	r0, r3, #4
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfbc      	itt	lt
 8009f62:	580b      	ldrlt	r3, [r1, r0]
 8009f64:	18c0      	addlt	r0, r0, r3
 8009f66:	4770      	bx	lr

08009f68 <_raise_r>:
 8009f68:	291f      	cmp	r1, #31
 8009f6a:	b538      	push	{r3, r4, r5, lr}
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	d904      	bls.n	8009f7c <_raise_r+0x14>
 8009f72:	2316      	movs	r3, #22
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f7e:	b112      	cbz	r2, 8009f86 <_raise_r+0x1e>
 8009f80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f84:	b94b      	cbnz	r3, 8009f9a <_raise_r+0x32>
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 f830 	bl	8009fec <_getpid_r>
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4601      	mov	r1, r0
 8009f90:	4620      	mov	r0, r4
 8009f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f96:	f000 b817 	b.w	8009fc8 <_kill_r>
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d00a      	beq.n	8009fb4 <_raise_r+0x4c>
 8009f9e:	1c59      	adds	r1, r3, #1
 8009fa0:	d103      	bne.n	8009faa <_raise_r+0x42>
 8009fa2:	2316      	movs	r3, #22
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	e7e7      	b.n	8009f7a <_raise_r+0x12>
 8009faa:	2400      	movs	r4, #0
 8009fac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	4798      	blx	r3
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7e0      	b.n	8009f7a <_raise_r+0x12>

08009fb8 <raise>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <raise+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f7ff bfd3 	b.w	8009f68 <_raise_r>
 8009fc2:	bf00      	nop
 8009fc4:	20000050 	.word	0x20000050

08009fc8 <_kill_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_kill_r+0x20>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	f7f8 fa09 	bl	80023ec <_kill>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	d102      	bne.n	8009fe4 <_kill_r+0x1c>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b103      	cbz	r3, 8009fe4 <_kill_r+0x1c>
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	2000051c 	.word	0x2000051c

08009fec <_getpid_r>:
 8009fec:	f7f8 b9f6 	b.w	80023dc <_getpid>

08009ff0 <__sread>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	f000 f894 	bl	800a124 <_read_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	bfab      	itete	ge
 800a000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a002:	89a3      	ldrhlt	r3, [r4, #12]
 800a004:	181b      	addge	r3, r3, r0
 800a006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a00a:	bfac      	ite	ge
 800a00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a00e:	81a3      	strhlt	r3, [r4, #12]
 800a010:	bd10      	pop	{r4, pc}

0800a012 <__swrite>:
 800a012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	461f      	mov	r7, r3
 800a018:	898b      	ldrh	r3, [r1, #12]
 800a01a:	05db      	lsls	r3, r3, #23
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	4616      	mov	r6, r2
 800a022:	d505      	bpl.n	800a030 <__swrite+0x1e>
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2302      	movs	r3, #2
 800a02a:	2200      	movs	r2, #0
 800a02c:	f000 f868 	bl	800a100 <_lseek_r>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	f000 b817 	b.w	800a078 <_write_r>

0800a04a <__sseek>:
 800a04a:	b510      	push	{r4, lr}
 800a04c:	460c      	mov	r4, r1
 800a04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a052:	f000 f855 	bl	800a100 <_lseek_r>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	bf15      	itete	ne
 800a05c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a066:	81a3      	strheq	r3, [r4, #12]
 800a068:	bf18      	it	ne
 800a06a:	81a3      	strhne	r3, [r4, #12]
 800a06c:	bd10      	pop	{r4, pc}

0800a06e <__sclose>:
 800a06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a072:	f000 b813 	b.w	800a09c <_close_r>
	...

0800a078 <_write_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d07      	ldr	r5, [pc, #28]	; (800a098 <_write_r+0x20>)
 800a07c:	4604      	mov	r4, r0
 800a07e:	4608      	mov	r0, r1
 800a080:	4611      	mov	r1, r2
 800a082:	2200      	movs	r2, #0
 800a084:	602a      	str	r2, [r5, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	f7f8 f9e7 	bl	800245a <_write>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_write_r+0x1e>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_write_r+0x1e>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	2000051c 	.word	0x2000051c

0800a09c <_close_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d06      	ldr	r5, [pc, #24]	; (800a0b8 <_close_r+0x1c>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	f7f8 f9f3 	bl	8002492 <_close>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_close_r+0x1a>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_close_r+0x1a>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	2000051c 	.word	0x2000051c

0800a0bc <_fstat_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	; (800a0dc <_fstat_r+0x20>)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	f7f8 f9ee 	bl	80024aa <_fstat>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	d102      	bne.n	800a0d8 <_fstat_r+0x1c>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b103      	cbz	r3, 800a0d8 <_fstat_r+0x1c>
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	bf00      	nop
 800a0dc:	2000051c 	.word	0x2000051c

0800a0e0 <_isatty_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_isatty_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f8 f9ed 	bl	80024ca <_isatty>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_isatty_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_isatty_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	2000051c 	.word	0x2000051c

0800a100 <_lseek_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d07      	ldr	r5, [pc, #28]	; (800a120 <_lseek_r+0x20>)
 800a104:	4604      	mov	r4, r0
 800a106:	4608      	mov	r0, r1
 800a108:	4611      	mov	r1, r2
 800a10a:	2200      	movs	r2, #0
 800a10c:	602a      	str	r2, [r5, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	f7f8 f9e6 	bl	80024e0 <_lseek>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_lseek_r+0x1e>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_lseek_r+0x1e>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	2000051c 	.word	0x2000051c

0800a124 <_read_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d07      	ldr	r5, [pc, #28]	; (800a144 <_read_r+0x20>)
 800a128:	4604      	mov	r4, r0
 800a12a:	4608      	mov	r0, r1
 800a12c:	4611      	mov	r1, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	602a      	str	r2, [r5, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	f7f8 f974 	bl	8002420 <_read>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_read_r+0x1e>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_read_r+0x1e>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	2000051c 	.word	0x2000051c

0800a148 <_init>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	bf00      	nop
 800a14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14e:	bc08      	pop	{r3}
 800a150:	469e      	mov	lr, r3
 800a152:	4770      	bx	lr

0800a154 <_fini>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr
